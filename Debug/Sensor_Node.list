
Sensor_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005490  08005490  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005490  08005490  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005490  08005490  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000018  080054b0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080054b0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009947  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d15  00000000  00000000  000299ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002b6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f8  00000000  00000000  0002c010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001d01  00000000  00000000  0002c708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c2fe  00000000  00000000  0002e409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f8f8  00000000  00000000  0003a707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002158  00000000  00000000  000ca000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000cc158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005380 	.word	0x08005380

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08005380 	.word	0x08005380

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_fdiv>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	464f      	mov	r7, r9
 80003f8:	4646      	mov	r6, r8
 80003fa:	46d6      	mov	lr, sl
 80003fc:	0245      	lsls	r5, r0, #9
 80003fe:	b5c0      	push	{r6, r7, lr}
 8000400:	0047      	lsls	r7, r0, #1
 8000402:	1c0c      	adds	r4, r1, #0
 8000404:	0a6d      	lsrs	r5, r5, #9
 8000406:	0e3f      	lsrs	r7, r7, #24
 8000408:	0fc6      	lsrs	r6, r0, #31
 800040a:	2f00      	cmp	r7, #0
 800040c:	d100      	bne.n	8000410 <__aeabi_fdiv+0x1c>
 800040e:	e06f      	b.n	80004f0 <__aeabi_fdiv+0xfc>
 8000410:	2fff      	cmp	r7, #255	; 0xff
 8000412:	d100      	bne.n	8000416 <__aeabi_fdiv+0x22>
 8000414:	e074      	b.n	8000500 <__aeabi_fdiv+0x10c>
 8000416:	2300      	movs	r3, #0
 8000418:	2280      	movs	r2, #128	; 0x80
 800041a:	4699      	mov	r9, r3
 800041c:	469a      	mov	sl, r3
 800041e:	00ed      	lsls	r5, r5, #3
 8000420:	04d2      	lsls	r2, r2, #19
 8000422:	4315      	orrs	r5, r2
 8000424:	3f7f      	subs	r7, #127	; 0x7f
 8000426:	0263      	lsls	r3, r4, #9
 8000428:	0a5b      	lsrs	r3, r3, #9
 800042a:	4698      	mov	r8, r3
 800042c:	0063      	lsls	r3, r4, #1
 800042e:	0e1b      	lsrs	r3, r3, #24
 8000430:	0fe4      	lsrs	r4, r4, #31
 8000432:	2b00      	cmp	r3, #0
 8000434:	d04d      	beq.n	80004d2 <__aeabi_fdiv+0xde>
 8000436:	2bff      	cmp	r3, #255	; 0xff
 8000438:	d045      	beq.n	80004c6 <__aeabi_fdiv+0xd2>
 800043a:	4642      	mov	r2, r8
 800043c:	2180      	movs	r1, #128	; 0x80
 800043e:	00d2      	lsls	r2, r2, #3
 8000440:	04c9      	lsls	r1, r1, #19
 8000442:	4311      	orrs	r1, r2
 8000444:	4688      	mov	r8, r1
 8000446:	2200      	movs	r2, #0
 8000448:	3b7f      	subs	r3, #127	; 0x7f
 800044a:	0031      	movs	r1, r6
 800044c:	1aff      	subs	r7, r7, r3
 800044e:	464b      	mov	r3, r9
 8000450:	4061      	eors	r1, r4
 8000452:	b2c9      	uxtb	r1, r1
 8000454:	2b0f      	cmp	r3, #15
 8000456:	d900      	bls.n	800045a <__aeabi_fdiv+0x66>
 8000458:	e0b8      	b.n	80005cc <__aeabi_fdiv+0x1d8>
 800045a:	4870      	ldr	r0, [pc, #448]	; (800061c <__aeabi_fdiv+0x228>)
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	58c3      	ldr	r3, [r0, r3]
 8000460:	469f      	mov	pc, r3
 8000462:	2300      	movs	r3, #0
 8000464:	4698      	mov	r8, r3
 8000466:	0026      	movs	r6, r4
 8000468:	4645      	mov	r5, r8
 800046a:	4692      	mov	sl, r2
 800046c:	4653      	mov	r3, sl
 800046e:	2b02      	cmp	r3, #2
 8000470:	d100      	bne.n	8000474 <__aeabi_fdiv+0x80>
 8000472:	e08d      	b.n	8000590 <__aeabi_fdiv+0x19c>
 8000474:	2b03      	cmp	r3, #3
 8000476:	d100      	bne.n	800047a <__aeabi_fdiv+0x86>
 8000478:	e0a1      	b.n	80005be <__aeabi_fdiv+0x1ca>
 800047a:	2b01      	cmp	r3, #1
 800047c:	d018      	beq.n	80004b0 <__aeabi_fdiv+0xbc>
 800047e:	003b      	movs	r3, r7
 8000480:	337f      	adds	r3, #127	; 0x7f
 8000482:	2b00      	cmp	r3, #0
 8000484:	dd6d      	ble.n	8000562 <__aeabi_fdiv+0x16e>
 8000486:	076a      	lsls	r2, r5, #29
 8000488:	d004      	beq.n	8000494 <__aeabi_fdiv+0xa0>
 800048a:	220f      	movs	r2, #15
 800048c:	402a      	ands	r2, r5
 800048e:	2a04      	cmp	r2, #4
 8000490:	d000      	beq.n	8000494 <__aeabi_fdiv+0xa0>
 8000492:	3504      	adds	r5, #4
 8000494:	012a      	lsls	r2, r5, #4
 8000496:	d503      	bpl.n	80004a0 <__aeabi_fdiv+0xac>
 8000498:	4b61      	ldr	r3, [pc, #388]	; (8000620 <__aeabi_fdiv+0x22c>)
 800049a:	401d      	ands	r5, r3
 800049c:	003b      	movs	r3, r7
 800049e:	3380      	adds	r3, #128	; 0x80
 80004a0:	2bfe      	cmp	r3, #254	; 0xfe
 80004a2:	dd00      	ble.n	80004a6 <__aeabi_fdiv+0xb2>
 80004a4:	e074      	b.n	8000590 <__aeabi_fdiv+0x19c>
 80004a6:	01aa      	lsls	r2, r5, #6
 80004a8:	0a52      	lsrs	r2, r2, #9
 80004aa:	b2d8      	uxtb	r0, r3
 80004ac:	e002      	b.n	80004b4 <__aeabi_fdiv+0xc0>
 80004ae:	000e      	movs	r6, r1
 80004b0:	2000      	movs	r0, #0
 80004b2:	2200      	movs	r2, #0
 80004b4:	05c0      	lsls	r0, r0, #23
 80004b6:	07f6      	lsls	r6, r6, #31
 80004b8:	4310      	orrs	r0, r2
 80004ba:	4330      	orrs	r0, r6
 80004bc:	bce0      	pop	{r5, r6, r7}
 80004be:	46ba      	mov	sl, r7
 80004c0:	46b1      	mov	r9, r6
 80004c2:	46a8      	mov	r8, r5
 80004c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004c6:	4643      	mov	r3, r8
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d13f      	bne.n	800054c <__aeabi_fdiv+0x158>
 80004cc:	2202      	movs	r2, #2
 80004ce:	3fff      	subs	r7, #255	; 0xff
 80004d0:	e003      	b.n	80004da <__aeabi_fdiv+0xe6>
 80004d2:	4643      	mov	r3, r8
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d12d      	bne.n	8000534 <__aeabi_fdiv+0x140>
 80004d8:	2201      	movs	r2, #1
 80004da:	0031      	movs	r1, r6
 80004dc:	464b      	mov	r3, r9
 80004de:	4061      	eors	r1, r4
 80004e0:	b2c9      	uxtb	r1, r1
 80004e2:	4313      	orrs	r3, r2
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d838      	bhi.n	800055a <__aeabi_fdiv+0x166>
 80004e8:	484e      	ldr	r0, [pc, #312]	; (8000624 <__aeabi_fdiv+0x230>)
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	58c3      	ldr	r3, [r0, r3]
 80004ee:	469f      	mov	pc, r3
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	d113      	bne.n	800051c <__aeabi_fdiv+0x128>
 80004f4:	2304      	movs	r3, #4
 80004f6:	4699      	mov	r9, r3
 80004f8:	3b03      	subs	r3, #3
 80004fa:	2700      	movs	r7, #0
 80004fc:	469a      	mov	sl, r3
 80004fe:	e792      	b.n	8000426 <__aeabi_fdiv+0x32>
 8000500:	2d00      	cmp	r5, #0
 8000502:	d105      	bne.n	8000510 <__aeabi_fdiv+0x11c>
 8000504:	2308      	movs	r3, #8
 8000506:	4699      	mov	r9, r3
 8000508:	3b06      	subs	r3, #6
 800050a:	27ff      	movs	r7, #255	; 0xff
 800050c:	469a      	mov	sl, r3
 800050e:	e78a      	b.n	8000426 <__aeabi_fdiv+0x32>
 8000510:	230c      	movs	r3, #12
 8000512:	4699      	mov	r9, r3
 8000514:	3b09      	subs	r3, #9
 8000516:	27ff      	movs	r7, #255	; 0xff
 8000518:	469a      	mov	sl, r3
 800051a:	e784      	b.n	8000426 <__aeabi_fdiv+0x32>
 800051c:	0028      	movs	r0, r5
 800051e:	f001 f821 	bl	8001564 <__clzsi2>
 8000522:	2776      	movs	r7, #118	; 0x76
 8000524:	1f43      	subs	r3, r0, #5
 8000526:	409d      	lsls	r5, r3
 8000528:	2300      	movs	r3, #0
 800052a:	427f      	negs	r7, r7
 800052c:	4699      	mov	r9, r3
 800052e:	469a      	mov	sl, r3
 8000530:	1a3f      	subs	r7, r7, r0
 8000532:	e778      	b.n	8000426 <__aeabi_fdiv+0x32>
 8000534:	4640      	mov	r0, r8
 8000536:	f001 f815 	bl	8001564 <__clzsi2>
 800053a:	4642      	mov	r2, r8
 800053c:	1f43      	subs	r3, r0, #5
 800053e:	409a      	lsls	r2, r3
 8000540:	2376      	movs	r3, #118	; 0x76
 8000542:	425b      	negs	r3, r3
 8000544:	4690      	mov	r8, r2
 8000546:	1a1b      	subs	r3, r3, r0
 8000548:	2200      	movs	r2, #0
 800054a:	e77e      	b.n	800044a <__aeabi_fdiv+0x56>
 800054c:	2303      	movs	r3, #3
 800054e:	464a      	mov	r2, r9
 8000550:	431a      	orrs	r2, r3
 8000552:	4691      	mov	r9, r2
 8000554:	33fc      	adds	r3, #252	; 0xfc
 8000556:	2203      	movs	r2, #3
 8000558:	e777      	b.n	800044a <__aeabi_fdiv+0x56>
 800055a:	000e      	movs	r6, r1
 800055c:	20ff      	movs	r0, #255	; 0xff
 800055e:	2200      	movs	r2, #0
 8000560:	e7a8      	b.n	80004b4 <__aeabi_fdiv+0xc0>
 8000562:	2201      	movs	r2, #1
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	2b1b      	cmp	r3, #27
 8000568:	dca2      	bgt.n	80004b0 <__aeabi_fdiv+0xbc>
 800056a:	379e      	adds	r7, #158	; 0x9e
 800056c:	002a      	movs	r2, r5
 800056e:	40bd      	lsls	r5, r7
 8000570:	40da      	lsrs	r2, r3
 8000572:	1e6b      	subs	r3, r5, #1
 8000574:	419d      	sbcs	r5, r3
 8000576:	4315      	orrs	r5, r2
 8000578:	076a      	lsls	r2, r5, #29
 800057a:	d004      	beq.n	8000586 <__aeabi_fdiv+0x192>
 800057c:	220f      	movs	r2, #15
 800057e:	402a      	ands	r2, r5
 8000580:	2a04      	cmp	r2, #4
 8000582:	d000      	beq.n	8000586 <__aeabi_fdiv+0x192>
 8000584:	3504      	adds	r5, #4
 8000586:	016a      	lsls	r2, r5, #5
 8000588:	d544      	bpl.n	8000614 <__aeabi_fdiv+0x220>
 800058a:	2001      	movs	r0, #1
 800058c:	2200      	movs	r2, #0
 800058e:	e791      	b.n	80004b4 <__aeabi_fdiv+0xc0>
 8000590:	20ff      	movs	r0, #255	; 0xff
 8000592:	2200      	movs	r2, #0
 8000594:	e78e      	b.n	80004b4 <__aeabi_fdiv+0xc0>
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	2600      	movs	r6, #0
 800059a:	20ff      	movs	r0, #255	; 0xff
 800059c:	03d2      	lsls	r2, r2, #15
 800059e:	e789      	b.n	80004b4 <__aeabi_fdiv+0xc0>
 80005a0:	2300      	movs	r3, #0
 80005a2:	4698      	mov	r8, r3
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	03d2      	lsls	r2, r2, #15
 80005a8:	4215      	tst	r5, r2
 80005aa:	d008      	beq.n	80005be <__aeabi_fdiv+0x1ca>
 80005ac:	4643      	mov	r3, r8
 80005ae:	4213      	tst	r3, r2
 80005b0:	d105      	bne.n	80005be <__aeabi_fdiv+0x1ca>
 80005b2:	431a      	orrs	r2, r3
 80005b4:	0252      	lsls	r2, r2, #9
 80005b6:	0026      	movs	r6, r4
 80005b8:	20ff      	movs	r0, #255	; 0xff
 80005ba:	0a52      	lsrs	r2, r2, #9
 80005bc:	e77a      	b.n	80004b4 <__aeabi_fdiv+0xc0>
 80005be:	2280      	movs	r2, #128	; 0x80
 80005c0:	03d2      	lsls	r2, r2, #15
 80005c2:	432a      	orrs	r2, r5
 80005c4:	0252      	lsls	r2, r2, #9
 80005c6:	20ff      	movs	r0, #255	; 0xff
 80005c8:	0a52      	lsrs	r2, r2, #9
 80005ca:	e773      	b.n	80004b4 <__aeabi_fdiv+0xc0>
 80005cc:	4642      	mov	r2, r8
 80005ce:	016b      	lsls	r3, r5, #5
 80005d0:	0155      	lsls	r5, r2, #5
 80005d2:	42ab      	cmp	r3, r5
 80005d4:	d21a      	bcs.n	800060c <__aeabi_fdiv+0x218>
 80005d6:	201b      	movs	r0, #27
 80005d8:	2200      	movs	r2, #0
 80005da:	3f01      	subs	r7, #1
 80005dc:	2601      	movs	r6, #1
 80005de:	001c      	movs	r4, r3
 80005e0:	0052      	lsls	r2, r2, #1
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	2c00      	cmp	r4, #0
 80005e6:	db01      	blt.n	80005ec <__aeabi_fdiv+0x1f8>
 80005e8:	429d      	cmp	r5, r3
 80005ea:	d801      	bhi.n	80005f0 <__aeabi_fdiv+0x1fc>
 80005ec:	1b5b      	subs	r3, r3, r5
 80005ee:	4332      	orrs	r2, r6
 80005f0:	3801      	subs	r0, #1
 80005f2:	2800      	cmp	r0, #0
 80005f4:	d1f3      	bne.n	80005de <__aeabi_fdiv+0x1ea>
 80005f6:	1e58      	subs	r0, r3, #1
 80005f8:	4183      	sbcs	r3, r0
 80005fa:	4313      	orrs	r3, r2
 80005fc:	001d      	movs	r5, r3
 80005fe:	003b      	movs	r3, r7
 8000600:	337f      	adds	r3, #127	; 0x7f
 8000602:	000e      	movs	r6, r1
 8000604:	2b00      	cmp	r3, #0
 8000606:	dd00      	ble.n	800060a <__aeabi_fdiv+0x216>
 8000608:	e73d      	b.n	8000486 <__aeabi_fdiv+0x92>
 800060a:	e7aa      	b.n	8000562 <__aeabi_fdiv+0x16e>
 800060c:	201a      	movs	r0, #26
 800060e:	2201      	movs	r2, #1
 8000610:	1b5b      	subs	r3, r3, r5
 8000612:	e7e3      	b.n	80005dc <__aeabi_fdiv+0x1e8>
 8000614:	01aa      	lsls	r2, r5, #6
 8000616:	2000      	movs	r0, #0
 8000618:	0a52      	lsrs	r2, r2, #9
 800061a:	e74b      	b.n	80004b4 <__aeabi_fdiv+0xc0>
 800061c:	08005398 	.word	0x08005398
 8000620:	f7ffffff 	.word	0xf7ffffff
 8000624:	080053d8 	.word	0x080053d8

08000628 <__aeabi_i2f>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	2800      	cmp	r0, #0
 800062c:	d013      	beq.n	8000656 <__aeabi_i2f+0x2e>
 800062e:	17c3      	asrs	r3, r0, #31
 8000630:	18c5      	adds	r5, r0, r3
 8000632:	405d      	eors	r5, r3
 8000634:	0fc4      	lsrs	r4, r0, #31
 8000636:	0028      	movs	r0, r5
 8000638:	f000 ff94 	bl	8001564 <__clzsi2>
 800063c:	239e      	movs	r3, #158	; 0x9e
 800063e:	0001      	movs	r1, r0
 8000640:	1a1b      	subs	r3, r3, r0
 8000642:	2b96      	cmp	r3, #150	; 0x96
 8000644:	dc0f      	bgt.n	8000666 <__aeabi_i2f+0x3e>
 8000646:	2808      	cmp	r0, #8
 8000648:	d031      	beq.n	80006ae <__aeabi_i2f+0x86>
 800064a:	3908      	subs	r1, #8
 800064c:	408d      	lsls	r5, r1
 800064e:	026d      	lsls	r5, r5, #9
 8000650:	0a6d      	lsrs	r5, r5, #9
 8000652:	b2d8      	uxtb	r0, r3
 8000654:	e002      	b.n	800065c <__aeabi_i2f+0x34>
 8000656:	2400      	movs	r4, #0
 8000658:	2000      	movs	r0, #0
 800065a:	2500      	movs	r5, #0
 800065c:	05c0      	lsls	r0, r0, #23
 800065e:	4328      	orrs	r0, r5
 8000660:	07e4      	lsls	r4, r4, #31
 8000662:	4320      	orrs	r0, r4
 8000664:	bd70      	pop	{r4, r5, r6, pc}
 8000666:	2b99      	cmp	r3, #153	; 0x99
 8000668:	dd0c      	ble.n	8000684 <__aeabi_i2f+0x5c>
 800066a:	2205      	movs	r2, #5
 800066c:	1a12      	subs	r2, r2, r0
 800066e:	0028      	movs	r0, r5
 8000670:	40d0      	lsrs	r0, r2
 8000672:	0002      	movs	r2, r0
 8000674:	0008      	movs	r0, r1
 8000676:	301b      	adds	r0, #27
 8000678:	4085      	lsls	r5, r0
 800067a:	0028      	movs	r0, r5
 800067c:	1e45      	subs	r5, r0, #1
 800067e:	41a8      	sbcs	r0, r5
 8000680:	4302      	orrs	r2, r0
 8000682:	0015      	movs	r5, r2
 8000684:	2905      	cmp	r1, #5
 8000686:	dc16      	bgt.n	80006b6 <__aeabi_i2f+0x8e>
 8000688:	002a      	movs	r2, r5
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <__aeabi_i2f+0xa0>)
 800068c:	4002      	ands	r2, r0
 800068e:	076e      	lsls	r6, r5, #29
 8000690:	d009      	beq.n	80006a6 <__aeabi_i2f+0x7e>
 8000692:	260f      	movs	r6, #15
 8000694:	4035      	ands	r5, r6
 8000696:	2d04      	cmp	r5, #4
 8000698:	d005      	beq.n	80006a6 <__aeabi_i2f+0x7e>
 800069a:	3204      	adds	r2, #4
 800069c:	0155      	lsls	r5, r2, #5
 800069e:	d502      	bpl.n	80006a6 <__aeabi_i2f+0x7e>
 80006a0:	239f      	movs	r3, #159	; 0x9f
 80006a2:	4002      	ands	r2, r0
 80006a4:	1a5b      	subs	r3, r3, r1
 80006a6:	0192      	lsls	r2, r2, #6
 80006a8:	0a55      	lsrs	r5, r2, #9
 80006aa:	b2d8      	uxtb	r0, r3
 80006ac:	e7d6      	b.n	800065c <__aeabi_i2f+0x34>
 80006ae:	026d      	lsls	r5, r5, #9
 80006b0:	2096      	movs	r0, #150	; 0x96
 80006b2:	0a6d      	lsrs	r5, r5, #9
 80006b4:	e7d2      	b.n	800065c <__aeabi_i2f+0x34>
 80006b6:	1f4a      	subs	r2, r1, #5
 80006b8:	4095      	lsls	r5, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	4802      	ldr	r0, [pc, #8]	; (80006c8 <__aeabi_i2f+0xa0>)
 80006be:	4002      	ands	r2, r0
 80006c0:	076e      	lsls	r6, r5, #29
 80006c2:	d0f0      	beq.n	80006a6 <__aeabi_i2f+0x7e>
 80006c4:	e7e5      	b.n	8000692 <__aeabi_i2f+0x6a>
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	fbffffff 	.word	0xfbffffff

080006cc <__aeabi_dadd>:
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006ce:	464f      	mov	r7, r9
 80006d0:	4646      	mov	r6, r8
 80006d2:	46d6      	mov	lr, sl
 80006d4:	0004      	movs	r4, r0
 80006d6:	b5c0      	push	{r6, r7, lr}
 80006d8:	001f      	movs	r7, r3
 80006da:	030b      	lsls	r3, r1, #12
 80006dc:	0010      	movs	r0, r2
 80006de:	004e      	lsls	r6, r1, #1
 80006e0:	0a5b      	lsrs	r3, r3, #9
 80006e2:	0fcd      	lsrs	r5, r1, #31
 80006e4:	0f61      	lsrs	r1, r4, #29
 80006e6:	007a      	lsls	r2, r7, #1
 80006e8:	4319      	orrs	r1, r3
 80006ea:	00e3      	lsls	r3, r4, #3
 80006ec:	033c      	lsls	r4, r7, #12
 80006ee:	0fff      	lsrs	r7, r7, #31
 80006f0:	46bc      	mov	ip, r7
 80006f2:	0a64      	lsrs	r4, r4, #9
 80006f4:	0f47      	lsrs	r7, r0, #29
 80006f6:	4327      	orrs	r7, r4
 80006f8:	0d76      	lsrs	r6, r6, #21
 80006fa:	0d52      	lsrs	r2, r2, #21
 80006fc:	00c0      	lsls	r0, r0, #3
 80006fe:	46b9      	mov	r9, r7
 8000700:	4680      	mov	r8, r0
 8000702:	1ab7      	subs	r7, r6, r2
 8000704:	4565      	cmp	r5, ip
 8000706:	d100      	bne.n	800070a <__aeabi_dadd+0x3e>
 8000708:	e09b      	b.n	8000842 <__aeabi_dadd+0x176>
 800070a:	2f00      	cmp	r7, #0
 800070c:	dc00      	bgt.n	8000710 <__aeabi_dadd+0x44>
 800070e:	e084      	b.n	800081a <__aeabi_dadd+0x14e>
 8000710:	2a00      	cmp	r2, #0
 8000712:	d100      	bne.n	8000716 <__aeabi_dadd+0x4a>
 8000714:	e0be      	b.n	8000894 <__aeabi_dadd+0x1c8>
 8000716:	4ac8      	ldr	r2, [pc, #800]	; (8000a38 <__aeabi_dadd+0x36c>)
 8000718:	4296      	cmp	r6, r2
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x52>
 800071c:	e124      	b.n	8000968 <__aeabi_dadd+0x29c>
 800071e:	2280      	movs	r2, #128	; 0x80
 8000720:	464c      	mov	r4, r9
 8000722:	0412      	lsls	r2, r2, #16
 8000724:	4314      	orrs	r4, r2
 8000726:	46a1      	mov	r9, r4
 8000728:	2f38      	cmp	r7, #56	; 0x38
 800072a:	dd00      	ble.n	800072e <__aeabi_dadd+0x62>
 800072c:	e167      	b.n	80009fe <__aeabi_dadd+0x332>
 800072e:	2f1f      	cmp	r7, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x68>
 8000732:	e1d6      	b.n	8000ae2 <__aeabi_dadd+0x416>
 8000734:	2220      	movs	r2, #32
 8000736:	464c      	mov	r4, r9
 8000738:	1bd2      	subs	r2, r2, r7
 800073a:	4094      	lsls	r4, r2
 800073c:	46a2      	mov	sl, r4
 800073e:	4644      	mov	r4, r8
 8000740:	40fc      	lsrs	r4, r7
 8000742:	0020      	movs	r0, r4
 8000744:	4654      	mov	r4, sl
 8000746:	4304      	orrs	r4, r0
 8000748:	4640      	mov	r0, r8
 800074a:	4090      	lsls	r0, r2
 800074c:	1e42      	subs	r2, r0, #1
 800074e:	4190      	sbcs	r0, r2
 8000750:	464a      	mov	r2, r9
 8000752:	40fa      	lsrs	r2, r7
 8000754:	4304      	orrs	r4, r0
 8000756:	1a89      	subs	r1, r1, r2
 8000758:	1b1c      	subs	r4, r3, r4
 800075a:	42a3      	cmp	r3, r4
 800075c:	4192      	sbcs	r2, r2
 800075e:	4252      	negs	r2, r2
 8000760:	1a8b      	subs	r3, r1, r2
 8000762:	469a      	mov	sl, r3
 8000764:	4653      	mov	r3, sl
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	d400      	bmi.n	800076c <__aeabi_dadd+0xa0>
 800076a:	e0d4      	b.n	8000916 <__aeabi_dadd+0x24a>
 800076c:	4653      	mov	r3, sl
 800076e:	025a      	lsls	r2, r3, #9
 8000770:	0a53      	lsrs	r3, r2, #9
 8000772:	469a      	mov	sl, r3
 8000774:	4653      	mov	r3, sl
 8000776:	2b00      	cmp	r3, #0
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0xb0>
 800077a:	e104      	b.n	8000986 <__aeabi_dadd+0x2ba>
 800077c:	4650      	mov	r0, sl
 800077e:	f000 fef1 	bl	8001564 <__clzsi2>
 8000782:	0003      	movs	r3, r0
 8000784:	3b08      	subs	r3, #8
 8000786:	2220      	movs	r2, #32
 8000788:	0020      	movs	r0, r4
 800078a:	1ad2      	subs	r2, r2, r3
 800078c:	4651      	mov	r1, sl
 800078e:	40d0      	lsrs	r0, r2
 8000790:	4099      	lsls	r1, r3
 8000792:	0002      	movs	r2, r0
 8000794:	409c      	lsls	r4, r3
 8000796:	430a      	orrs	r2, r1
 8000798:	42b3      	cmp	r3, r6
 800079a:	da00      	bge.n	800079e <__aeabi_dadd+0xd2>
 800079c:	e102      	b.n	80009a4 <__aeabi_dadd+0x2d8>
 800079e:	1b9b      	subs	r3, r3, r6
 80007a0:	1c59      	adds	r1, r3, #1
 80007a2:	291f      	cmp	r1, #31
 80007a4:	dd00      	ble.n	80007a8 <__aeabi_dadd+0xdc>
 80007a6:	e0a7      	b.n	80008f8 <__aeabi_dadd+0x22c>
 80007a8:	2320      	movs	r3, #32
 80007aa:	0010      	movs	r0, r2
 80007ac:	0026      	movs	r6, r4
 80007ae:	1a5b      	subs	r3, r3, r1
 80007b0:	409c      	lsls	r4, r3
 80007b2:	4098      	lsls	r0, r3
 80007b4:	40ce      	lsrs	r6, r1
 80007b6:	40ca      	lsrs	r2, r1
 80007b8:	1e63      	subs	r3, r4, #1
 80007ba:	419c      	sbcs	r4, r3
 80007bc:	4330      	orrs	r0, r6
 80007be:	4692      	mov	sl, r2
 80007c0:	2600      	movs	r6, #0
 80007c2:	4304      	orrs	r4, r0
 80007c4:	0763      	lsls	r3, r4, #29
 80007c6:	d009      	beq.n	80007dc <__aeabi_dadd+0x110>
 80007c8:	230f      	movs	r3, #15
 80007ca:	4023      	ands	r3, r4
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	d005      	beq.n	80007dc <__aeabi_dadd+0x110>
 80007d0:	1d23      	adds	r3, r4, #4
 80007d2:	42a3      	cmp	r3, r4
 80007d4:	41a4      	sbcs	r4, r4
 80007d6:	4264      	negs	r4, r4
 80007d8:	44a2      	add	sl, r4
 80007da:	001c      	movs	r4, r3
 80007dc:	4653      	mov	r3, sl
 80007de:	021b      	lsls	r3, r3, #8
 80007e0:	d400      	bmi.n	80007e4 <__aeabi_dadd+0x118>
 80007e2:	e09b      	b.n	800091c <__aeabi_dadd+0x250>
 80007e4:	4b94      	ldr	r3, [pc, #592]	; (8000a38 <__aeabi_dadd+0x36c>)
 80007e6:	3601      	adds	r6, #1
 80007e8:	429e      	cmp	r6, r3
 80007ea:	d100      	bne.n	80007ee <__aeabi_dadd+0x122>
 80007ec:	e0b8      	b.n	8000960 <__aeabi_dadd+0x294>
 80007ee:	4653      	mov	r3, sl
 80007f0:	4992      	ldr	r1, [pc, #584]	; (8000a3c <__aeabi_dadd+0x370>)
 80007f2:	08e4      	lsrs	r4, r4, #3
 80007f4:	400b      	ands	r3, r1
 80007f6:	0019      	movs	r1, r3
 80007f8:	075b      	lsls	r3, r3, #29
 80007fa:	4323      	orrs	r3, r4
 80007fc:	0572      	lsls	r2, r6, #21
 80007fe:	024c      	lsls	r4, r1, #9
 8000800:	0b24      	lsrs	r4, r4, #12
 8000802:	0d52      	lsrs	r2, r2, #21
 8000804:	0512      	lsls	r2, r2, #20
 8000806:	07ed      	lsls	r5, r5, #31
 8000808:	4322      	orrs	r2, r4
 800080a:	432a      	orrs	r2, r5
 800080c:	0018      	movs	r0, r3
 800080e:	0011      	movs	r1, r2
 8000810:	bce0      	pop	{r5, r6, r7}
 8000812:	46ba      	mov	sl, r7
 8000814:	46b1      	mov	r9, r6
 8000816:	46a8      	mov	r8, r5
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081a:	2f00      	cmp	r7, #0
 800081c:	d048      	beq.n	80008b0 <__aeabi_dadd+0x1e4>
 800081e:	1b97      	subs	r7, r2, r6
 8000820:	2e00      	cmp	r6, #0
 8000822:	d000      	beq.n	8000826 <__aeabi_dadd+0x15a>
 8000824:	e10e      	b.n	8000a44 <__aeabi_dadd+0x378>
 8000826:	000c      	movs	r4, r1
 8000828:	431c      	orrs	r4, r3
 800082a:	d100      	bne.n	800082e <__aeabi_dadd+0x162>
 800082c:	e1b7      	b.n	8000b9e <__aeabi_dadd+0x4d2>
 800082e:	1e7c      	subs	r4, r7, #1
 8000830:	2f01      	cmp	r7, #1
 8000832:	d100      	bne.n	8000836 <__aeabi_dadd+0x16a>
 8000834:	e226      	b.n	8000c84 <__aeabi_dadd+0x5b8>
 8000836:	4d80      	ldr	r5, [pc, #512]	; (8000a38 <__aeabi_dadd+0x36c>)
 8000838:	42af      	cmp	r7, r5
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x172>
 800083c:	e1d5      	b.n	8000bea <__aeabi_dadd+0x51e>
 800083e:	0027      	movs	r7, r4
 8000840:	e107      	b.n	8000a52 <__aeabi_dadd+0x386>
 8000842:	2f00      	cmp	r7, #0
 8000844:	dc00      	bgt.n	8000848 <__aeabi_dadd+0x17c>
 8000846:	e0b2      	b.n	80009ae <__aeabi_dadd+0x2e2>
 8000848:	2a00      	cmp	r2, #0
 800084a:	d047      	beq.n	80008dc <__aeabi_dadd+0x210>
 800084c:	4a7a      	ldr	r2, [pc, #488]	; (8000a38 <__aeabi_dadd+0x36c>)
 800084e:	4296      	cmp	r6, r2
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x188>
 8000852:	e089      	b.n	8000968 <__aeabi_dadd+0x29c>
 8000854:	2280      	movs	r2, #128	; 0x80
 8000856:	464c      	mov	r4, r9
 8000858:	0412      	lsls	r2, r2, #16
 800085a:	4314      	orrs	r4, r2
 800085c:	46a1      	mov	r9, r4
 800085e:	2f38      	cmp	r7, #56	; 0x38
 8000860:	dc6b      	bgt.n	800093a <__aeabi_dadd+0x26e>
 8000862:	2f1f      	cmp	r7, #31
 8000864:	dc00      	bgt.n	8000868 <__aeabi_dadd+0x19c>
 8000866:	e16e      	b.n	8000b46 <__aeabi_dadd+0x47a>
 8000868:	003a      	movs	r2, r7
 800086a:	4648      	mov	r0, r9
 800086c:	3a20      	subs	r2, #32
 800086e:	40d0      	lsrs	r0, r2
 8000870:	4684      	mov	ip, r0
 8000872:	2f20      	cmp	r7, #32
 8000874:	d007      	beq.n	8000886 <__aeabi_dadd+0x1ba>
 8000876:	2240      	movs	r2, #64	; 0x40
 8000878:	4648      	mov	r0, r9
 800087a:	1bd2      	subs	r2, r2, r7
 800087c:	4090      	lsls	r0, r2
 800087e:	0002      	movs	r2, r0
 8000880:	4640      	mov	r0, r8
 8000882:	4310      	orrs	r0, r2
 8000884:	4680      	mov	r8, r0
 8000886:	4640      	mov	r0, r8
 8000888:	1e42      	subs	r2, r0, #1
 800088a:	4190      	sbcs	r0, r2
 800088c:	4662      	mov	r2, ip
 800088e:	0004      	movs	r4, r0
 8000890:	4314      	orrs	r4, r2
 8000892:	e057      	b.n	8000944 <__aeabi_dadd+0x278>
 8000894:	464a      	mov	r2, r9
 8000896:	4302      	orrs	r2, r0
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x1d0>
 800089a:	e103      	b.n	8000aa4 <__aeabi_dadd+0x3d8>
 800089c:	1e7a      	subs	r2, r7, #1
 800089e:	2f01      	cmp	r7, #1
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x1d8>
 80008a2:	e193      	b.n	8000bcc <__aeabi_dadd+0x500>
 80008a4:	4c64      	ldr	r4, [pc, #400]	; (8000a38 <__aeabi_dadd+0x36c>)
 80008a6:	42a7      	cmp	r7, r4
 80008a8:	d100      	bne.n	80008ac <__aeabi_dadd+0x1e0>
 80008aa:	e18a      	b.n	8000bc2 <__aeabi_dadd+0x4f6>
 80008ac:	0017      	movs	r7, r2
 80008ae:	e73b      	b.n	8000728 <__aeabi_dadd+0x5c>
 80008b0:	4c63      	ldr	r4, [pc, #396]	; (8000a40 <__aeabi_dadd+0x374>)
 80008b2:	1c72      	adds	r2, r6, #1
 80008b4:	4222      	tst	r2, r4
 80008b6:	d000      	beq.n	80008ba <__aeabi_dadd+0x1ee>
 80008b8:	e0e0      	b.n	8000a7c <__aeabi_dadd+0x3b0>
 80008ba:	000a      	movs	r2, r1
 80008bc:	431a      	orrs	r2, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d000      	beq.n	80008c4 <__aeabi_dadd+0x1f8>
 80008c2:	e174      	b.n	8000bae <__aeabi_dadd+0x4e2>
 80008c4:	2a00      	cmp	r2, #0
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1fe>
 80008c8:	e1d0      	b.n	8000c6c <__aeabi_dadd+0x5a0>
 80008ca:	464a      	mov	r2, r9
 80008cc:	4302      	orrs	r2, r0
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x206>
 80008d0:	e1e3      	b.n	8000c9a <__aeabi_dadd+0x5ce>
 80008d2:	074a      	lsls	r2, r1, #29
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	4313      	orrs	r3, r2
 80008d8:	08c9      	lsrs	r1, r1, #3
 80008da:	e029      	b.n	8000930 <__aeabi_dadd+0x264>
 80008dc:	464a      	mov	r2, r9
 80008de:	4302      	orrs	r2, r0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_dadd+0x218>
 80008e2:	e17d      	b.n	8000be0 <__aeabi_dadd+0x514>
 80008e4:	1e7a      	subs	r2, r7, #1
 80008e6:	2f01      	cmp	r7, #1
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x220>
 80008ea:	e0e0      	b.n	8000aae <__aeabi_dadd+0x3e2>
 80008ec:	4c52      	ldr	r4, [pc, #328]	; (8000a38 <__aeabi_dadd+0x36c>)
 80008ee:	42a7      	cmp	r7, r4
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dadd+0x228>
 80008f2:	e166      	b.n	8000bc2 <__aeabi_dadd+0x4f6>
 80008f4:	0017      	movs	r7, r2
 80008f6:	e7b2      	b.n	800085e <__aeabi_dadd+0x192>
 80008f8:	0010      	movs	r0, r2
 80008fa:	3b1f      	subs	r3, #31
 80008fc:	40d8      	lsrs	r0, r3
 80008fe:	2920      	cmp	r1, #32
 8000900:	d003      	beq.n	800090a <__aeabi_dadd+0x23e>
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	1a5b      	subs	r3, r3, r1
 8000906:	409a      	lsls	r2, r3
 8000908:	4314      	orrs	r4, r2
 800090a:	1e63      	subs	r3, r4, #1
 800090c:	419c      	sbcs	r4, r3
 800090e:	2300      	movs	r3, #0
 8000910:	2600      	movs	r6, #0
 8000912:	469a      	mov	sl, r3
 8000914:	4304      	orrs	r4, r0
 8000916:	0763      	lsls	r3, r4, #29
 8000918:	d000      	beq.n	800091c <__aeabi_dadd+0x250>
 800091a:	e755      	b.n	80007c8 <__aeabi_dadd+0xfc>
 800091c:	4652      	mov	r2, sl
 800091e:	08e3      	lsrs	r3, r4, #3
 8000920:	0752      	lsls	r2, r2, #29
 8000922:	4313      	orrs	r3, r2
 8000924:	4652      	mov	r2, sl
 8000926:	0037      	movs	r7, r6
 8000928:	08d1      	lsrs	r1, r2, #3
 800092a:	4a43      	ldr	r2, [pc, #268]	; (8000a38 <__aeabi_dadd+0x36c>)
 800092c:	4297      	cmp	r7, r2
 800092e:	d01f      	beq.n	8000970 <__aeabi_dadd+0x2a4>
 8000930:	0309      	lsls	r1, r1, #12
 8000932:	057a      	lsls	r2, r7, #21
 8000934:	0b0c      	lsrs	r4, r1, #12
 8000936:	0d52      	lsrs	r2, r2, #21
 8000938:	e764      	b.n	8000804 <__aeabi_dadd+0x138>
 800093a:	4642      	mov	r2, r8
 800093c:	464c      	mov	r4, r9
 800093e:	4314      	orrs	r4, r2
 8000940:	1e62      	subs	r2, r4, #1
 8000942:	4194      	sbcs	r4, r2
 8000944:	18e4      	adds	r4, r4, r3
 8000946:	429c      	cmp	r4, r3
 8000948:	4192      	sbcs	r2, r2
 800094a:	4252      	negs	r2, r2
 800094c:	4692      	mov	sl, r2
 800094e:	448a      	add	sl, r1
 8000950:	4653      	mov	r3, sl
 8000952:	021b      	lsls	r3, r3, #8
 8000954:	d5df      	bpl.n	8000916 <__aeabi_dadd+0x24a>
 8000956:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <__aeabi_dadd+0x36c>)
 8000958:	3601      	adds	r6, #1
 800095a:	429e      	cmp	r6, r3
 800095c:	d000      	beq.n	8000960 <__aeabi_dadd+0x294>
 800095e:	e0b3      	b.n	8000ac8 <__aeabi_dadd+0x3fc>
 8000960:	0032      	movs	r2, r6
 8000962:	2400      	movs	r4, #0
 8000964:	2300      	movs	r3, #0
 8000966:	e74d      	b.n	8000804 <__aeabi_dadd+0x138>
 8000968:	074a      	lsls	r2, r1, #29
 800096a:	08db      	lsrs	r3, r3, #3
 800096c:	4313      	orrs	r3, r2
 800096e:	08c9      	lsrs	r1, r1, #3
 8000970:	001a      	movs	r2, r3
 8000972:	430a      	orrs	r2, r1
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x2ac>
 8000976:	e200      	b.n	8000d7a <__aeabi_dadd+0x6ae>
 8000978:	2480      	movs	r4, #128	; 0x80
 800097a:	0324      	lsls	r4, r4, #12
 800097c:	430c      	orrs	r4, r1
 800097e:	0324      	lsls	r4, r4, #12
 8000980:	4a2d      	ldr	r2, [pc, #180]	; (8000a38 <__aeabi_dadd+0x36c>)
 8000982:	0b24      	lsrs	r4, r4, #12
 8000984:	e73e      	b.n	8000804 <__aeabi_dadd+0x138>
 8000986:	0020      	movs	r0, r4
 8000988:	f000 fdec 	bl	8001564 <__clzsi2>
 800098c:	0003      	movs	r3, r0
 800098e:	3318      	adds	r3, #24
 8000990:	2b1f      	cmp	r3, #31
 8000992:	dc00      	bgt.n	8000996 <__aeabi_dadd+0x2ca>
 8000994:	e6f7      	b.n	8000786 <__aeabi_dadd+0xba>
 8000996:	0022      	movs	r2, r4
 8000998:	3808      	subs	r0, #8
 800099a:	4082      	lsls	r2, r0
 800099c:	2400      	movs	r4, #0
 800099e:	42b3      	cmp	r3, r6
 80009a0:	db00      	blt.n	80009a4 <__aeabi_dadd+0x2d8>
 80009a2:	e6fc      	b.n	800079e <__aeabi_dadd+0xd2>
 80009a4:	1af6      	subs	r6, r6, r3
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <__aeabi_dadd+0x370>)
 80009a8:	401a      	ands	r2, r3
 80009aa:	4692      	mov	sl, r2
 80009ac:	e70a      	b.n	80007c4 <__aeabi_dadd+0xf8>
 80009ae:	2f00      	cmp	r7, #0
 80009b0:	d02b      	beq.n	8000a0a <__aeabi_dadd+0x33e>
 80009b2:	1b97      	subs	r7, r2, r6
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	d100      	bne.n	80009ba <__aeabi_dadd+0x2ee>
 80009b8:	e0b8      	b.n	8000b2c <__aeabi_dadd+0x460>
 80009ba:	4c1f      	ldr	r4, [pc, #124]	; (8000a38 <__aeabi_dadd+0x36c>)
 80009bc:	42a2      	cmp	r2, r4
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x2f6>
 80009c0:	e11c      	b.n	8000bfc <__aeabi_dadd+0x530>
 80009c2:	2480      	movs	r4, #128	; 0x80
 80009c4:	0424      	lsls	r4, r4, #16
 80009c6:	4321      	orrs	r1, r4
 80009c8:	2f38      	cmp	r7, #56	; 0x38
 80009ca:	dd00      	ble.n	80009ce <__aeabi_dadd+0x302>
 80009cc:	e11e      	b.n	8000c0c <__aeabi_dadd+0x540>
 80009ce:	2f1f      	cmp	r7, #31
 80009d0:	dd00      	ble.n	80009d4 <__aeabi_dadd+0x308>
 80009d2:	e19e      	b.n	8000d12 <__aeabi_dadd+0x646>
 80009d4:	2620      	movs	r6, #32
 80009d6:	000c      	movs	r4, r1
 80009d8:	1bf6      	subs	r6, r6, r7
 80009da:	0018      	movs	r0, r3
 80009dc:	40b3      	lsls	r3, r6
 80009de:	40b4      	lsls	r4, r6
 80009e0:	40f8      	lsrs	r0, r7
 80009e2:	1e5e      	subs	r6, r3, #1
 80009e4:	41b3      	sbcs	r3, r6
 80009e6:	40f9      	lsrs	r1, r7
 80009e8:	4304      	orrs	r4, r0
 80009ea:	431c      	orrs	r4, r3
 80009ec:	4489      	add	r9, r1
 80009ee:	4444      	add	r4, r8
 80009f0:	4544      	cmp	r4, r8
 80009f2:	419b      	sbcs	r3, r3
 80009f4:	425b      	negs	r3, r3
 80009f6:	444b      	add	r3, r9
 80009f8:	469a      	mov	sl, r3
 80009fa:	0016      	movs	r6, r2
 80009fc:	e7a8      	b.n	8000950 <__aeabi_dadd+0x284>
 80009fe:	4642      	mov	r2, r8
 8000a00:	464c      	mov	r4, r9
 8000a02:	4314      	orrs	r4, r2
 8000a04:	1e62      	subs	r2, r4, #1
 8000a06:	4194      	sbcs	r4, r2
 8000a08:	e6a6      	b.n	8000758 <__aeabi_dadd+0x8c>
 8000a0a:	4c0d      	ldr	r4, [pc, #52]	; (8000a40 <__aeabi_dadd+0x374>)
 8000a0c:	1c72      	adds	r2, r6, #1
 8000a0e:	4222      	tst	r2, r4
 8000a10:	d000      	beq.n	8000a14 <__aeabi_dadd+0x348>
 8000a12:	e0a8      	b.n	8000b66 <__aeabi_dadd+0x49a>
 8000a14:	000a      	movs	r2, r1
 8000a16:	431a      	orrs	r2, r3
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_dadd+0x352>
 8000a1c:	e10a      	b.n	8000c34 <__aeabi_dadd+0x568>
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dadd+0x358>
 8000a22:	e15e      	b.n	8000ce2 <__aeabi_dadd+0x616>
 8000a24:	464a      	mov	r2, r9
 8000a26:	4302      	orrs	r2, r0
 8000a28:	d000      	beq.n	8000a2c <__aeabi_dadd+0x360>
 8000a2a:	e161      	b.n	8000cf0 <__aeabi_dadd+0x624>
 8000a2c:	074a      	lsls	r2, r1, #29
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	4313      	orrs	r3, r2
 8000a32:	08c9      	lsrs	r1, r1, #3
 8000a34:	e77c      	b.n	8000930 <__aeabi_dadd+0x264>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	000007ff 	.word	0x000007ff
 8000a3c:	ff7fffff 	.word	0xff7fffff
 8000a40:	000007fe 	.word	0x000007fe
 8000a44:	4ccf      	ldr	r4, [pc, #828]	; (8000d84 <__aeabi_dadd+0x6b8>)
 8000a46:	42a2      	cmp	r2, r4
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x380>
 8000a4a:	e0ce      	b.n	8000bea <__aeabi_dadd+0x51e>
 8000a4c:	2480      	movs	r4, #128	; 0x80
 8000a4e:	0424      	lsls	r4, r4, #16
 8000a50:	4321      	orrs	r1, r4
 8000a52:	2f38      	cmp	r7, #56	; 0x38
 8000a54:	dc5b      	bgt.n	8000b0e <__aeabi_dadd+0x442>
 8000a56:	2f1f      	cmp	r7, #31
 8000a58:	dd00      	ble.n	8000a5c <__aeabi_dadd+0x390>
 8000a5a:	e0dc      	b.n	8000c16 <__aeabi_dadd+0x54a>
 8000a5c:	2520      	movs	r5, #32
 8000a5e:	000c      	movs	r4, r1
 8000a60:	1bed      	subs	r5, r5, r7
 8000a62:	001e      	movs	r6, r3
 8000a64:	40ab      	lsls	r3, r5
 8000a66:	40ac      	lsls	r4, r5
 8000a68:	40fe      	lsrs	r6, r7
 8000a6a:	1e5d      	subs	r5, r3, #1
 8000a6c:	41ab      	sbcs	r3, r5
 8000a6e:	4334      	orrs	r4, r6
 8000a70:	40f9      	lsrs	r1, r7
 8000a72:	431c      	orrs	r4, r3
 8000a74:	464b      	mov	r3, r9
 8000a76:	1a5b      	subs	r3, r3, r1
 8000a78:	4699      	mov	r9, r3
 8000a7a:	e04c      	b.n	8000b16 <__aeabi_dadd+0x44a>
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	1a1c      	subs	r4, r3, r0
 8000a80:	1a88      	subs	r0, r1, r2
 8000a82:	42a3      	cmp	r3, r4
 8000a84:	4192      	sbcs	r2, r2
 8000a86:	4252      	negs	r2, r2
 8000a88:	4692      	mov	sl, r2
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	4650      	mov	r0, sl
 8000a8e:	1a12      	subs	r2, r2, r0
 8000a90:	4692      	mov	sl, r2
 8000a92:	0212      	lsls	r2, r2, #8
 8000a94:	d478      	bmi.n	8000b88 <__aeabi_dadd+0x4bc>
 8000a96:	4653      	mov	r3, sl
 8000a98:	4323      	orrs	r3, r4
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_dadd+0x3d2>
 8000a9c:	e66a      	b.n	8000774 <__aeabi_dadd+0xa8>
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2500      	movs	r5, #0
 8000aa2:	e745      	b.n	8000930 <__aeabi_dadd+0x264>
 8000aa4:	074a      	lsls	r2, r1, #29
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	08c9      	lsrs	r1, r1, #3
 8000aac:	e73d      	b.n	800092a <__aeabi_dadd+0x25e>
 8000aae:	181c      	adds	r4, r3, r0
 8000ab0:	429c      	cmp	r4, r3
 8000ab2:	419b      	sbcs	r3, r3
 8000ab4:	4449      	add	r1, r9
 8000ab6:	468a      	mov	sl, r1
 8000ab8:	425b      	negs	r3, r3
 8000aba:	449a      	add	sl, r3
 8000abc:	4653      	mov	r3, sl
 8000abe:	2601      	movs	r6, #1
 8000ac0:	021b      	lsls	r3, r3, #8
 8000ac2:	d400      	bmi.n	8000ac6 <__aeabi_dadd+0x3fa>
 8000ac4:	e727      	b.n	8000916 <__aeabi_dadd+0x24a>
 8000ac6:	2602      	movs	r6, #2
 8000ac8:	4652      	mov	r2, sl
 8000aca:	4baf      	ldr	r3, [pc, #700]	; (8000d88 <__aeabi_dadd+0x6bc>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	401a      	ands	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	4021      	ands	r1, r4
 8000ad4:	0862      	lsrs	r2, r4, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	07dc      	lsls	r4, r3, #31
 8000ada:	085b      	lsrs	r3, r3, #1
 8000adc:	469a      	mov	sl, r3
 8000ade:	4314      	orrs	r4, r2
 8000ae0:	e670      	b.n	80007c4 <__aeabi_dadd+0xf8>
 8000ae2:	003a      	movs	r2, r7
 8000ae4:	464c      	mov	r4, r9
 8000ae6:	3a20      	subs	r2, #32
 8000ae8:	40d4      	lsrs	r4, r2
 8000aea:	46a4      	mov	ip, r4
 8000aec:	2f20      	cmp	r7, #32
 8000aee:	d007      	beq.n	8000b00 <__aeabi_dadd+0x434>
 8000af0:	2240      	movs	r2, #64	; 0x40
 8000af2:	4648      	mov	r0, r9
 8000af4:	1bd2      	subs	r2, r2, r7
 8000af6:	4090      	lsls	r0, r2
 8000af8:	0002      	movs	r2, r0
 8000afa:	4640      	mov	r0, r8
 8000afc:	4310      	orrs	r0, r2
 8000afe:	4680      	mov	r8, r0
 8000b00:	4640      	mov	r0, r8
 8000b02:	1e42      	subs	r2, r0, #1
 8000b04:	4190      	sbcs	r0, r2
 8000b06:	4662      	mov	r2, ip
 8000b08:	0004      	movs	r4, r0
 8000b0a:	4314      	orrs	r4, r2
 8000b0c:	e624      	b.n	8000758 <__aeabi_dadd+0x8c>
 8000b0e:	4319      	orrs	r1, r3
 8000b10:	000c      	movs	r4, r1
 8000b12:	1e63      	subs	r3, r4, #1
 8000b14:	419c      	sbcs	r4, r3
 8000b16:	4643      	mov	r3, r8
 8000b18:	1b1c      	subs	r4, r3, r4
 8000b1a:	45a0      	cmp	r8, r4
 8000b1c:	419b      	sbcs	r3, r3
 8000b1e:	4649      	mov	r1, r9
 8000b20:	425b      	negs	r3, r3
 8000b22:	1acb      	subs	r3, r1, r3
 8000b24:	469a      	mov	sl, r3
 8000b26:	4665      	mov	r5, ip
 8000b28:	0016      	movs	r6, r2
 8000b2a:	e61b      	b.n	8000764 <__aeabi_dadd+0x98>
 8000b2c:	000c      	movs	r4, r1
 8000b2e:	431c      	orrs	r4, r3
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x468>
 8000b32:	e0c7      	b.n	8000cc4 <__aeabi_dadd+0x5f8>
 8000b34:	1e7c      	subs	r4, r7, #1
 8000b36:	2f01      	cmp	r7, #1
 8000b38:	d100      	bne.n	8000b3c <__aeabi_dadd+0x470>
 8000b3a:	e0f9      	b.n	8000d30 <__aeabi_dadd+0x664>
 8000b3c:	4e91      	ldr	r6, [pc, #580]	; (8000d84 <__aeabi_dadd+0x6b8>)
 8000b3e:	42b7      	cmp	r7, r6
 8000b40:	d05c      	beq.n	8000bfc <__aeabi_dadd+0x530>
 8000b42:	0027      	movs	r7, r4
 8000b44:	e740      	b.n	80009c8 <__aeabi_dadd+0x2fc>
 8000b46:	2220      	movs	r2, #32
 8000b48:	464c      	mov	r4, r9
 8000b4a:	4640      	mov	r0, r8
 8000b4c:	1bd2      	subs	r2, r2, r7
 8000b4e:	4094      	lsls	r4, r2
 8000b50:	40f8      	lsrs	r0, r7
 8000b52:	4304      	orrs	r4, r0
 8000b54:	4640      	mov	r0, r8
 8000b56:	4090      	lsls	r0, r2
 8000b58:	1e42      	subs	r2, r0, #1
 8000b5a:	4190      	sbcs	r0, r2
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	40fa      	lsrs	r2, r7
 8000b60:	4304      	orrs	r4, r0
 8000b62:	1889      	adds	r1, r1, r2
 8000b64:	e6ee      	b.n	8000944 <__aeabi_dadd+0x278>
 8000b66:	4c87      	ldr	r4, [pc, #540]	; (8000d84 <__aeabi_dadd+0x6b8>)
 8000b68:	42a2      	cmp	r2, r4
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dadd+0x4a2>
 8000b6c:	e6f9      	b.n	8000962 <__aeabi_dadd+0x296>
 8000b6e:	1818      	adds	r0, r3, r0
 8000b70:	4298      	cmp	r0, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4449      	add	r1, r9
 8000b76:	425b      	negs	r3, r3
 8000b78:	18cb      	adds	r3, r1, r3
 8000b7a:	07dc      	lsls	r4, r3, #31
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	085b      	lsrs	r3, r3, #1
 8000b80:	469a      	mov	sl, r3
 8000b82:	0016      	movs	r6, r2
 8000b84:	4304      	orrs	r4, r0
 8000b86:	e6c6      	b.n	8000916 <__aeabi_dadd+0x24a>
 8000b88:	4642      	mov	r2, r8
 8000b8a:	1ad4      	subs	r4, r2, r3
 8000b8c:	45a0      	cmp	r8, r4
 8000b8e:	4180      	sbcs	r0, r0
 8000b90:	464b      	mov	r3, r9
 8000b92:	4240      	negs	r0, r0
 8000b94:	1a59      	subs	r1, r3, r1
 8000b96:	1a0b      	subs	r3, r1, r0
 8000b98:	469a      	mov	sl, r3
 8000b9a:	4665      	mov	r5, ip
 8000b9c:	e5ea      	b.n	8000774 <__aeabi_dadd+0xa8>
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	08c0      	lsrs	r0, r0, #3
 8000ba4:	075b      	lsls	r3, r3, #29
 8000ba6:	4665      	mov	r5, ip
 8000ba8:	4303      	orrs	r3, r0
 8000baa:	08d1      	lsrs	r1, r2, #3
 8000bac:	e6bd      	b.n	800092a <__aeabi_dadd+0x25e>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_dadd+0x4e8>
 8000bb2:	e08e      	b.n	8000cd2 <__aeabi_dadd+0x606>
 8000bb4:	464b      	mov	r3, r9
 8000bb6:	4303      	orrs	r3, r0
 8000bb8:	d117      	bne.n	8000bea <__aeabi_dadd+0x51e>
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	0309      	lsls	r1, r1, #12
 8000bc0:	e6da      	b.n	8000978 <__aeabi_dadd+0x2ac>
 8000bc2:	074a      	lsls	r2, r1, #29
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	08c9      	lsrs	r1, r1, #3
 8000bca:	e6d1      	b.n	8000970 <__aeabi_dadd+0x2a4>
 8000bcc:	1a1c      	subs	r4, r3, r0
 8000bce:	464a      	mov	r2, r9
 8000bd0:	42a3      	cmp	r3, r4
 8000bd2:	419b      	sbcs	r3, r3
 8000bd4:	1a89      	subs	r1, r1, r2
 8000bd6:	425b      	negs	r3, r3
 8000bd8:	1acb      	subs	r3, r1, r3
 8000bda:	469a      	mov	sl, r3
 8000bdc:	2601      	movs	r6, #1
 8000bde:	e5c1      	b.n	8000764 <__aeabi_dadd+0x98>
 8000be0:	074a      	lsls	r2, r1, #29
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	08c9      	lsrs	r1, r1, #3
 8000be8:	e69f      	b.n	800092a <__aeabi_dadd+0x25e>
 8000bea:	4643      	mov	r3, r8
 8000bec:	08d8      	lsrs	r0, r3, #3
 8000bee:	464b      	mov	r3, r9
 8000bf0:	464a      	mov	r2, r9
 8000bf2:	075b      	lsls	r3, r3, #29
 8000bf4:	4665      	mov	r5, ip
 8000bf6:	4303      	orrs	r3, r0
 8000bf8:	08d1      	lsrs	r1, r2, #3
 8000bfa:	e6b9      	b.n	8000970 <__aeabi_dadd+0x2a4>
 8000bfc:	4643      	mov	r3, r8
 8000bfe:	08d8      	lsrs	r0, r3, #3
 8000c00:	464b      	mov	r3, r9
 8000c02:	464a      	mov	r2, r9
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	4303      	orrs	r3, r0
 8000c08:	08d1      	lsrs	r1, r2, #3
 8000c0a:	e6b1      	b.n	8000970 <__aeabi_dadd+0x2a4>
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	000c      	movs	r4, r1
 8000c10:	1e63      	subs	r3, r4, #1
 8000c12:	419c      	sbcs	r4, r3
 8000c14:	e6eb      	b.n	80009ee <__aeabi_dadd+0x322>
 8000c16:	003c      	movs	r4, r7
 8000c18:	000d      	movs	r5, r1
 8000c1a:	3c20      	subs	r4, #32
 8000c1c:	40e5      	lsrs	r5, r4
 8000c1e:	2f20      	cmp	r7, #32
 8000c20:	d003      	beq.n	8000c2a <__aeabi_dadd+0x55e>
 8000c22:	2440      	movs	r4, #64	; 0x40
 8000c24:	1be4      	subs	r4, r4, r7
 8000c26:	40a1      	lsls	r1, r4
 8000c28:	430b      	orrs	r3, r1
 8000c2a:	001c      	movs	r4, r3
 8000c2c:	1e63      	subs	r3, r4, #1
 8000c2e:	419c      	sbcs	r4, r3
 8000c30:	432c      	orrs	r4, r5
 8000c32:	e770      	b.n	8000b16 <__aeabi_dadd+0x44a>
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	d0e1      	beq.n	8000bfc <__aeabi_dadd+0x530>
 8000c38:	464a      	mov	r2, r9
 8000c3a:	4302      	orrs	r2, r0
 8000c3c:	d0c1      	beq.n	8000bc2 <__aeabi_dadd+0x4f6>
 8000c3e:	074a      	lsls	r2, r1, #29
 8000c40:	08db      	lsrs	r3, r3, #3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	08c9      	lsrs	r1, r1, #3
 8000c48:	0312      	lsls	r2, r2, #12
 8000c4a:	4211      	tst	r1, r2
 8000c4c:	d008      	beq.n	8000c60 <__aeabi_dadd+0x594>
 8000c4e:	4648      	mov	r0, r9
 8000c50:	08c4      	lsrs	r4, r0, #3
 8000c52:	4214      	tst	r4, r2
 8000c54:	d104      	bne.n	8000c60 <__aeabi_dadd+0x594>
 8000c56:	4643      	mov	r3, r8
 8000c58:	0021      	movs	r1, r4
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	0742      	lsls	r2, r0, #29
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	0f5a      	lsrs	r2, r3, #29
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	0752      	lsls	r2, r2, #29
 8000c66:	08db      	lsrs	r3, r3, #3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	e681      	b.n	8000970 <__aeabi_dadd+0x2a4>
 8000c6c:	464b      	mov	r3, r9
 8000c6e:	4303      	orrs	r3, r0
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dadd+0x5a8>
 8000c72:	e714      	b.n	8000a9e <__aeabi_dadd+0x3d2>
 8000c74:	464b      	mov	r3, r9
 8000c76:	464a      	mov	r2, r9
 8000c78:	08c0      	lsrs	r0, r0, #3
 8000c7a:	075b      	lsls	r3, r3, #29
 8000c7c:	4665      	mov	r5, ip
 8000c7e:	4303      	orrs	r3, r0
 8000c80:	08d1      	lsrs	r1, r2, #3
 8000c82:	e655      	b.n	8000930 <__aeabi_dadd+0x264>
 8000c84:	1ac4      	subs	r4, r0, r3
 8000c86:	45a0      	cmp	r8, r4
 8000c88:	4180      	sbcs	r0, r0
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	4240      	negs	r0, r0
 8000c8e:	1a59      	subs	r1, r3, r1
 8000c90:	1a0b      	subs	r3, r1, r0
 8000c92:	469a      	mov	sl, r3
 8000c94:	4665      	mov	r5, ip
 8000c96:	2601      	movs	r6, #1
 8000c98:	e564      	b.n	8000764 <__aeabi_dadd+0x98>
 8000c9a:	1a1c      	subs	r4, r3, r0
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	4180      	sbcs	r0, r0
 8000ca2:	1a8a      	subs	r2, r1, r2
 8000ca4:	4240      	negs	r0, r0
 8000ca6:	1a12      	subs	r2, r2, r0
 8000ca8:	4692      	mov	sl, r2
 8000caa:	0212      	lsls	r2, r2, #8
 8000cac:	d549      	bpl.n	8000d42 <__aeabi_dadd+0x676>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	1ad4      	subs	r4, r2, r3
 8000cb2:	45a0      	cmp	r8, r4
 8000cb4:	4180      	sbcs	r0, r0
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	4240      	negs	r0, r0
 8000cba:	1a59      	subs	r1, r3, r1
 8000cbc:	1a0b      	subs	r3, r1, r0
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	4665      	mov	r5, ip
 8000cc2:	e57f      	b.n	80007c4 <__aeabi_dadd+0xf8>
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	08c0      	lsrs	r0, r0, #3
 8000cca:	075b      	lsls	r3, r3, #29
 8000ccc:	4303      	orrs	r3, r0
 8000cce:	08d1      	lsrs	r1, r2, #3
 8000cd0:	e62b      	b.n	800092a <__aeabi_dadd+0x25e>
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	08db      	lsrs	r3, r3, #3
 8000cd6:	4302      	orrs	r2, r0
 8000cd8:	d138      	bne.n	8000d4c <__aeabi_dadd+0x680>
 8000cda:	074a      	lsls	r2, r1, #29
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	08c9      	lsrs	r1, r1, #3
 8000ce0:	e646      	b.n	8000970 <__aeabi_dadd+0x2a4>
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	464a      	mov	r2, r9
 8000ce6:	08c0      	lsrs	r0, r0, #3
 8000ce8:	075b      	lsls	r3, r3, #29
 8000cea:	4303      	orrs	r3, r0
 8000cec:	08d1      	lsrs	r1, r2, #3
 8000cee:	e61f      	b.n	8000930 <__aeabi_dadd+0x264>
 8000cf0:	181c      	adds	r4, r3, r0
 8000cf2:	429c      	cmp	r4, r3
 8000cf4:	419b      	sbcs	r3, r3
 8000cf6:	4449      	add	r1, r9
 8000cf8:	468a      	mov	sl, r1
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	449a      	add	sl, r3
 8000cfe:	4653      	mov	r3, sl
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	d400      	bmi.n	8000d06 <__aeabi_dadd+0x63a>
 8000d04:	e607      	b.n	8000916 <__aeabi_dadd+0x24a>
 8000d06:	4652      	mov	r2, sl
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <__aeabi_dadd+0x6bc>)
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	4692      	mov	sl, r2
 8000d10:	e601      	b.n	8000916 <__aeabi_dadd+0x24a>
 8000d12:	003c      	movs	r4, r7
 8000d14:	000e      	movs	r6, r1
 8000d16:	3c20      	subs	r4, #32
 8000d18:	40e6      	lsrs	r6, r4
 8000d1a:	2f20      	cmp	r7, #32
 8000d1c:	d003      	beq.n	8000d26 <__aeabi_dadd+0x65a>
 8000d1e:	2440      	movs	r4, #64	; 0x40
 8000d20:	1be4      	subs	r4, r4, r7
 8000d22:	40a1      	lsls	r1, r4
 8000d24:	430b      	orrs	r3, r1
 8000d26:	001c      	movs	r4, r3
 8000d28:	1e63      	subs	r3, r4, #1
 8000d2a:	419c      	sbcs	r4, r3
 8000d2c:	4334      	orrs	r4, r6
 8000d2e:	e65e      	b.n	80009ee <__aeabi_dadd+0x322>
 8000d30:	4443      	add	r3, r8
 8000d32:	4283      	cmp	r3, r0
 8000d34:	4180      	sbcs	r0, r0
 8000d36:	4449      	add	r1, r9
 8000d38:	468a      	mov	sl, r1
 8000d3a:	4240      	negs	r0, r0
 8000d3c:	001c      	movs	r4, r3
 8000d3e:	4482      	add	sl, r0
 8000d40:	e6bc      	b.n	8000abc <__aeabi_dadd+0x3f0>
 8000d42:	4653      	mov	r3, sl
 8000d44:	4323      	orrs	r3, r4
 8000d46:	d100      	bne.n	8000d4a <__aeabi_dadd+0x67e>
 8000d48:	e6a9      	b.n	8000a9e <__aeabi_dadd+0x3d2>
 8000d4a:	e5e4      	b.n	8000916 <__aeabi_dadd+0x24a>
 8000d4c:	074a      	lsls	r2, r1, #29
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	08c9      	lsrs	r1, r1, #3
 8000d54:	0312      	lsls	r2, r2, #12
 8000d56:	4211      	tst	r1, r2
 8000d58:	d009      	beq.n	8000d6e <__aeabi_dadd+0x6a2>
 8000d5a:	4648      	mov	r0, r9
 8000d5c:	08c4      	lsrs	r4, r0, #3
 8000d5e:	4214      	tst	r4, r2
 8000d60:	d105      	bne.n	8000d6e <__aeabi_dadd+0x6a2>
 8000d62:	4643      	mov	r3, r8
 8000d64:	4665      	mov	r5, ip
 8000d66:	0021      	movs	r1, r4
 8000d68:	08db      	lsrs	r3, r3, #3
 8000d6a:	0742      	lsls	r2, r0, #29
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	0f5a      	lsrs	r2, r3, #29
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	08db      	lsrs	r3, r3, #3
 8000d74:	0752      	lsls	r2, r2, #29
 8000d76:	4313      	orrs	r3, r2
 8000d78:	e5fa      	b.n	8000970 <__aeabi_dadd+0x2a4>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	4a01      	ldr	r2, [pc, #4]	; (8000d84 <__aeabi_dadd+0x6b8>)
 8000d7e:	001c      	movs	r4, r3
 8000d80:	e540      	b.n	8000804 <__aeabi_dadd+0x138>
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	000007ff 	.word	0x000007ff
 8000d88:	ff7fffff 	.word	0xff7fffff

08000d8c <__aeabi_ddiv>:
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	4657      	mov	r7, sl
 8000d90:	464e      	mov	r6, r9
 8000d92:	4645      	mov	r5, r8
 8000d94:	46de      	mov	lr, fp
 8000d96:	b5e0      	push	{r5, r6, r7, lr}
 8000d98:	030c      	lsls	r4, r1, #12
 8000d9a:	001f      	movs	r7, r3
 8000d9c:	004b      	lsls	r3, r1, #1
 8000d9e:	4681      	mov	r9, r0
 8000da0:	4692      	mov	sl, r2
 8000da2:	0005      	movs	r5, r0
 8000da4:	b085      	sub	sp, #20
 8000da6:	0b24      	lsrs	r4, r4, #12
 8000da8:	0d5b      	lsrs	r3, r3, #21
 8000daa:	0fce      	lsrs	r6, r1, #31
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_ddiv+0x26>
 8000db0:	e152      	b.n	8001058 <__aeabi_ddiv+0x2cc>
 8000db2:	4ad2      	ldr	r2, [pc, #840]	; (80010fc <__aeabi_ddiv+0x370>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d100      	bne.n	8000dba <__aeabi_ddiv+0x2e>
 8000db8:	e16e      	b.n	8001098 <__aeabi_ddiv+0x30c>
 8000dba:	0f42      	lsrs	r2, r0, #29
 8000dbc:	00e4      	lsls	r4, r4, #3
 8000dbe:	4314      	orrs	r4, r2
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	0412      	lsls	r2, r2, #16
 8000dc4:	4322      	orrs	r2, r4
 8000dc6:	4690      	mov	r8, r2
 8000dc8:	4acd      	ldr	r2, [pc, #820]	; (8001100 <__aeabi_ddiv+0x374>)
 8000dca:	00c5      	lsls	r5, r0, #3
 8000dcc:	4693      	mov	fp, r2
 8000dce:	449b      	add	fp, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	033c      	lsls	r4, r7, #12
 8000dd8:	007b      	lsls	r3, r7, #1
 8000dda:	4650      	mov	r0, sl
 8000ddc:	0b24      	lsrs	r4, r4, #12
 8000dde:	0d5b      	lsrs	r3, r3, #21
 8000de0:	0fff      	lsrs	r7, r7, #31
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x5c>
 8000de6:	e11a      	b.n	800101e <__aeabi_ddiv+0x292>
 8000de8:	4ac4      	ldr	r2, [pc, #784]	; (80010fc <__aeabi_ddiv+0x370>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d100      	bne.n	8000df0 <__aeabi_ddiv+0x64>
 8000dee:	e15e      	b.n	80010ae <__aeabi_ddiv+0x322>
 8000df0:	0f42      	lsrs	r2, r0, #29
 8000df2:	00e4      	lsls	r4, r4, #3
 8000df4:	4322      	orrs	r2, r4
 8000df6:	2480      	movs	r4, #128	; 0x80
 8000df8:	0424      	lsls	r4, r4, #16
 8000dfa:	4314      	orrs	r4, r2
 8000dfc:	4ac0      	ldr	r2, [pc, #768]	; (8001100 <__aeabi_ddiv+0x374>)
 8000dfe:	00c1      	lsls	r1, r0, #3
 8000e00:	4694      	mov	ip, r2
 8000e02:	465a      	mov	r2, fp
 8000e04:	4463      	add	r3, ip
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	469b      	mov	fp, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	0033      	movs	r3, r6
 8000e0e:	407b      	eors	r3, r7
 8000e10:	469a      	mov	sl, r3
 8000e12:	464b      	mov	r3, r9
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d827      	bhi.n	8000e68 <__aeabi_ddiv+0xdc>
 8000e18:	4aba      	ldr	r2, [pc, #744]	; (8001104 <__aeabi_ddiv+0x378>)
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	58d3      	ldr	r3, [r2, r3]
 8000e1e:	469f      	mov	pc, r3
 8000e20:	46b2      	mov	sl, r6
 8000e22:	9b00      	ldr	r3, [sp, #0]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d016      	beq.n	8000e56 <__aeabi_ddiv+0xca>
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d100      	bne.n	8000e2e <__aeabi_ddiv+0xa2>
 8000e2c:	e287      	b.n	800133e <__aeabi_ddiv+0x5b2>
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d000      	beq.n	8000e34 <__aeabi_ddiv+0xa8>
 8000e32:	e0d5      	b.n	8000fe0 <__aeabi_ddiv+0x254>
 8000e34:	2300      	movs	r3, #0
 8000e36:	2200      	movs	r2, #0
 8000e38:	2500      	movs	r5, #0
 8000e3a:	051b      	lsls	r3, r3, #20
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	4652      	mov	r2, sl
 8000e40:	07d2      	lsls	r2, r2, #31
 8000e42:	4313      	orrs	r3, r2
 8000e44:	0028      	movs	r0, r5
 8000e46:	0019      	movs	r1, r3
 8000e48:	b005      	add	sp, #20
 8000e4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e4c:	46bb      	mov	fp, r7
 8000e4e:	46b2      	mov	sl, r6
 8000e50:	46a9      	mov	r9, r5
 8000e52:	46a0      	mov	r8, r4
 8000e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e56:	2200      	movs	r2, #0
 8000e58:	2500      	movs	r5, #0
 8000e5a:	4ba8      	ldr	r3, [pc, #672]	; (80010fc <__aeabi_ddiv+0x370>)
 8000e5c:	e7ed      	b.n	8000e3a <__aeabi_ddiv+0xae>
 8000e5e:	46ba      	mov	sl, r7
 8000e60:	46a0      	mov	r8, r4
 8000e62:	000d      	movs	r5, r1
 8000e64:	9000      	str	r0, [sp, #0]
 8000e66:	e7dc      	b.n	8000e22 <__aeabi_ddiv+0x96>
 8000e68:	4544      	cmp	r4, r8
 8000e6a:	d200      	bcs.n	8000e6e <__aeabi_ddiv+0xe2>
 8000e6c:	e1c4      	b.n	80011f8 <__aeabi_ddiv+0x46c>
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0xe6>
 8000e70:	e1bf      	b.n	80011f2 <__aeabi_ddiv+0x466>
 8000e72:	2301      	movs	r3, #1
 8000e74:	425b      	negs	r3, r3
 8000e76:	469c      	mov	ip, r3
 8000e78:	002e      	movs	r6, r5
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	44e3      	add	fp, ip
 8000e80:	0223      	lsls	r3, r4, #8
 8000e82:	0e0c      	lsrs	r4, r1, #24
 8000e84:	431c      	orrs	r4, r3
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	4699      	mov	r9, r3
 8000e8a:	0423      	lsls	r3, r4, #16
 8000e8c:	020a      	lsls	r2, r1, #8
 8000e8e:	0c1f      	lsrs	r7, r3, #16
 8000e90:	4649      	mov	r1, r9
 8000e92:	9200      	str	r2, [sp, #0]
 8000e94:	9701      	str	r7, [sp, #4]
 8000e96:	f7ff f9bd 	bl	8000214 <__aeabi_uidivmod>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	437a      	muls	r2, r7
 8000e9e:	040b      	lsls	r3, r1, #16
 8000ea0:	0c31      	lsrs	r1, r6, #16
 8000ea2:	4680      	mov	r8, r0
 8000ea4:	4319      	orrs	r1, r3
 8000ea6:	428a      	cmp	r2, r1
 8000ea8:	d907      	bls.n	8000eba <__aeabi_ddiv+0x12e>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	425b      	negs	r3, r3
 8000eae:	469c      	mov	ip, r3
 8000eb0:	1909      	adds	r1, r1, r4
 8000eb2:	44e0      	add	r8, ip
 8000eb4:	428c      	cmp	r4, r1
 8000eb6:	d800      	bhi.n	8000eba <__aeabi_ddiv+0x12e>
 8000eb8:	e201      	b.n	80012be <__aeabi_ddiv+0x532>
 8000eba:	1a88      	subs	r0, r1, r2
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	f7ff f9a9 	bl	8000214 <__aeabi_uidivmod>
 8000ec2:	9a01      	ldr	r2, [sp, #4]
 8000ec4:	0436      	lsls	r6, r6, #16
 8000ec6:	4342      	muls	r2, r0
 8000ec8:	0409      	lsls	r1, r1, #16
 8000eca:	0c36      	lsrs	r6, r6, #16
 8000ecc:	0003      	movs	r3, r0
 8000ece:	430e      	orrs	r6, r1
 8000ed0:	42b2      	cmp	r2, r6
 8000ed2:	d904      	bls.n	8000ede <__aeabi_ddiv+0x152>
 8000ed4:	1936      	adds	r6, r6, r4
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	42b4      	cmp	r4, r6
 8000eda:	d800      	bhi.n	8000ede <__aeabi_ddiv+0x152>
 8000edc:	e1e9      	b.n	80012b2 <__aeabi_ddiv+0x526>
 8000ede:	1ab0      	subs	r0, r6, r2
 8000ee0:	4642      	mov	r2, r8
 8000ee2:	9e00      	ldr	r6, [sp, #0]
 8000ee4:	0412      	lsls	r2, r2, #16
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	0c33      	lsrs	r3, r6, #16
 8000eea:	001f      	movs	r7, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	4690      	mov	r8, r2
 8000ef0:	9302      	str	r3, [sp, #8]
 8000ef2:	0413      	lsls	r3, r2, #16
 8000ef4:	0432      	lsls	r2, r6, #16
 8000ef6:	0c16      	lsrs	r6, r2, #16
 8000ef8:	0032      	movs	r2, r6
 8000efa:	0c1b      	lsrs	r3, r3, #16
 8000efc:	435a      	muls	r2, r3
 8000efe:	9603      	str	r6, [sp, #12]
 8000f00:	437b      	muls	r3, r7
 8000f02:	434e      	muls	r6, r1
 8000f04:	4379      	muls	r1, r7
 8000f06:	0c17      	lsrs	r7, r2, #16
 8000f08:	46bc      	mov	ip, r7
 8000f0a:	199b      	adds	r3, r3, r6
 8000f0c:	4463      	add	r3, ip
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	d903      	bls.n	8000f1a <__aeabi_ddiv+0x18e>
 8000f12:	2680      	movs	r6, #128	; 0x80
 8000f14:	0276      	lsls	r6, r6, #9
 8000f16:	46b4      	mov	ip, r6
 8000f18:	4461      	add	r1, ip
 8000f1a:	0c1e      	lsrs	r6, r3, #16
 8000f1c:	1871      	adds	r1, r6, r1
 8000f1e:	0416      	lsls	r6, r2, #16
 8000f20:	041b      	lsls	r3, r3, #16
 8000f22:	0c36      	lsrs	r6, r6, #16
 8000f24:	199e      	adds	r6, r3, r6
 8000f26:	4288      	cmp	r0, r1
 8000f28:	d302      	bcc.n	8000f30 <__aeabi_ddiv+0x1a4>
 8000f2a:	d112      	bne.n	8000f52 <__aeabi_ddiv+0x1c6>
 8000f2c:	42b5      	cmp	r5, r6
 8000f2e:	d210      	bcs.n	8000f52 <__aeabi_ddiv+0x1c6>
 8000f30:	4643      	mov	r3, r8
 8000f32:	1e5a      	subs	r2, r3, #1
 8000f34:	9b00      	ldr	r3, [sp, #0]
 8000f36:	469c      	mov	ip, r3
 8000f38:	4465      	add	r5, ip
 8000f3a:	001f      	movs	r7, r3
 8000f3c:	429d      	cmp	r5, r3
 8000f3e:	419b      	sbcs	r3, r3
 8000f40:	425b      	negs	r3, r3
 8000f42:	191b      	adds	r3, r3, r4
 8000f44:	18c0      	adds	r0, r0, r3
 8000f46:	4284      	cmp	r4, r0
 8000f48:	d200      	bcs.n	8000f4c <__aeabi_ddiv+0x1c0>
 8000f4a:	e19e      	b.n	800128a <__aeabi_ddiv+0x4fe>
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_ddiv+0x1c4>
 8000f4e:	e199      	b.n	8001284 <__aeabi_ddiv+0x4f8>
 8000f50:	4690      	mov	r8, r2
 8000f52:	1bae      	subs	r6, r5, r6
 8000f54:	42b5      	cmp	r5, r6
 8000f56:	41ad      	sbcs	r5, r5
 8000f58:	1a40      	subs	r0, r0, r1
 8000f5a:	426d      	negs	r5, r5
 8000f5c:	1b40      	subs	r0, r0, r5
 8000f5e:	4284      	cmp	r4, r0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x1d8>
 8000f62:	e1d2      	b.n	800130a <__aeabi_ddiv+0x57e>
 8000f64:	4649      	mov	r1, r9
 8000f66:	f7ff f955 	bl	8000214 <__aeabi_uidivmod>
 8000f6a:	9a01      	ldr	r2, [sp, #4]
 8000f6c:	040b      	lsls	r3, r1, #16
 8000f6e:	4342      	muls	r2, r0
 8000f70:	0c31      	lsrs	r1, r6, #16
 8000f72:	0005      	movs	r5, r0
 8000f74:	4319      	orrs	r1, r3
 8000f76:	428a      	cmp	r2, r1
 8000f78:	d900      	bls.n	8000f7c <__aeabi_ddiv+0x1f0>
 8000f7a:	e16c      	b.n	8001256 <__aeabi_ddiv+0x4ca>
 8000f7c:	1a88      	subs	r0, r1, r2
 8000f7e:	4649      	mov	r1, r9
 8000f80:	f7ff f948 	bl	8000214 <__aeabi_uidivmod>
 8000f84:	9a01      	ldr	r2, [sp, #4]
 8000f86:	0436      	lsls	r6, r6, #16
 8000f88:	4342      	muls	r2, r0
 8000f8a:	0409      	lsls	r1, r1, #16
 8000f8c:	0c36      	lsrs	r6, r6, #16
 8000f8e:	0003      	movs	r3, r0
 8000f90:	430e      	orrs	r6, r1
 8000f92:	42b2      	cmp	r2, r6
 8000f94:	d900      	bls.n	8000f98 <__aeabi_ddiv+0x20c>
 8000f96:	e153      	b.n	8001240 <__aeabi_ddiv+0x4b4>
 8000f98:	9803      	ldr	r0, [sp, #12]
 8000f9a:	1ab6      	subs	r6, r6, r2
 8000f9c:	0002      	movs	r2, r0
 8000f9e:	042d      	lsls	r5, r5, #16
 8000fa0:	431d      	orrs	r5, r3
 8000fa2:	9f02      	ldr	r7, [sp, #8]
 8000fa4:	042b      	lsls	r3, r5, #16
 8000fa6:	0c1b      	lsrs	r3, r3, #16
 8000fa8:	435a      	muls	r2, r3
 8000faa:	437b      	muls	r3, r7
 8000fac:	469c      	mov	ip, r3
 8000fae:	0c29      	lsrs	r1, r5, #16
 8000fb0:	4348      	muls	r0, r1
 8000fb2:	0c13      	lsrs	r3, r2, #16
 8000fb4:	4484      	add	ip, r0
 8000fb6:	4463      	add	r3, ip
 8000fb8:	4379      	muls	r1, r7
 8000fba:	4298      	cmp	r0, r3
 8000fbc:	d903      	bls.n	8000fc6 <__aeabi_ddiv+0x23a>
 8000fbe:	2080      	movs	r0, #128	; 0x80
 8000fc0:	0240      	lsls	r0, r0, #9
 8000fc2:	4684      	mov	ip, r0
 8000fc4:	4461      	add	r1, ip
 8000fc6:	0c18      	lsrs	r0, r3, #16
 8000fc8:	0412      	lsls	r2, r2, #16
 8000fca:	041b      	lsls	r3, r3, #16
 8000fcc:	0c12      	lsrs	r2, r2, #16
 8000fce:	1840      	adds	r0, r0, r1
 8000fd0:	189b      	adds	r3, r3, r2
 8000fd2:	4286      	cmp	r6, r0
 8000fd4:	d200      	bcs.n	8000fd8 <__aeabi_ddiv+0x24c>
 8000fd6:	e100      	b.n	80011da <__aeabi_ddiv+0x44e>
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_ddiv+0x250>
 8000fda:	e0fb      	b.n	80011d4 <__aeabi_ddiv+0x448>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	431d      	orrs	r5, r3
 8000fe0:	4b49      	ldr	r3, [pc, #292]	; (8001108 <__aeabi_ddiv+0x37c>)
 8000fe2:	445b      	add	r3, fp
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dc00      	bgt.n	8000fea <__aeabi_ddiv+0x25e>
 8000fe8:	e0aa      	b.n	8001140 <__aeabi_ddiv+0x3b4>
 8000fea:	076a      	lsls	r2, r5, #29
 8000fec:	d000      	beq.n	8000ff0 <__aeabi_ddiv+0x264>
 8000fee:	e13d      	b.n	800126c <__aeabi_ddiv+0x4e0>
 8000ff0:	08e9      	lsrs	r1, r5, #3
 8000ff2:	4642      	mov	r2, r8
 8000ff4:	01d2      	lsls	r2, r2, #7
 8000ff6:	d506      	bpl.n	8001006 <__aeabi_ddiv+0x27a>
 8000ff8:	4642      	mov	r2, r8
 8000ffa:	4b44      	ldr	r3, [pc, #272]	; (800110c <__aeabi_ddiv+0x380>)
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	4690      	mov	r8, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	445b      	add	r3, fp
 8001006:	4a42      	ldr	r2, [pc, #264]	; (8001110 <__aeabi_ddiv+0x384>)
 8001008:	4293      	cmp	r3, r2
 800100a:	dd00      	ble.n	800100e <__aeabi_ddiv+0x282>
 800100c:	e723      	b.n	8000e56 <__aeabi_ddiv+0xca>
 800100e:	4642      	mov	r2, r8
 8001010:	055b      	lsls	r3, r3, #21
 8001012:	0755      	lsls	r5, r2, #29
 8001014:	0252      	lsls	r2, r2, #9
 8001016:	430d      	orrs	r5, r1
 8001018:	0b12      	lsrs	r2, r2, #12
 800101a:	0d5b      	lsrs	r3, r3, #21
 800101c:	e70d      	b.n	8000e3a <__aeabi_ddiv+0xae>
 800101e:	4651      	mov	r1, sl
 8001020:	4321      	orrs	r1, r4
 8001022:	d100      	bne.n	8001026 <__aeabi_ddiv+0x29a>
 8001024:	e07c      	b.n	8001120 <__aeabi_ddiv+0x394>
 8001026:	2c00      	cmp	r4, #0
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x2a0>
 800102a:	e0fb      	b.n	8001224 <__aeabi_ddiv+0x498>
 800102c:	0020      	movs	r0, r4
 800102e:	f000 fa99 	bl	8001564 <__clzsi2>
 8001032:	0002      	movs	r2, r0
 8001034:	3a0b      	subs	r2, #11
 8001036:	231d      	movs	r3, #29
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	4652      	mov	r2, sl
 800103c:	0001      	movs	r1, r0
 800103e:	40da      	lsrs	r2, r3
 8001040:	4653      	mov	r3, sl
 8001042:	3908      	subs	r1, #8
 8001044:	408b      	lsls	r3, r1
 8001046:	408c      	lsls	r4, r1
 8001048:	0019      	movs	r1, r3
 800104a:	4314      	orrs	r4, r2
 800104c:	4b31      	ldr	r3, [pc, #196]	; (8001114 <__aeabi_ddiv+0x388>)
 800104e:	4458      	add	r0, fp
 8001050:	469b      	mov	fp, r3
 8001052:	4483      	add	fp, r0
 8001054:	2000      	movs	r0, #0
 8001056:	e6d9      	b.n	8000e0c <__aeabi_ddiv+0x80>
 8001058:	0003      	movs	r3, r0
 800105a:	4323      	orrs	r3, r4
 800105c:	4698      	mov	r8, r3
 800105e:	d044      	beq.n	80010ea <__aeabi_ddiv+0x35e>
 8001060:	2c00      	cmp	r4, #0
 8001062:	d100      	bne.n	8001066 <__aeabi_ddiv+0x2da>
 8001064:	e0cf      	b.n	8001206 <__aeabi_ddiv+0x47a>
 8001066:	0020      	movs	r0, r4
 8001068:	f000 fa7c 	bl	8001564 <__clzsi2>
 800106c:	0001      	movs	r1, r0
 800106e:	0002      	movs	r2, r0
 8001070:	390b      	subs	r1, #11
 8001072:	231d      	movs	r3, #29
 8001074:	1a5b      	subs	r3, r3, r1
 8001076:	4649      	mov	r1, r9
 8001078:	0010      	movs	r0, r2
 800107a:	40d9      	lsrs	r1, r3
 800107c:	3808      	subs	r0, #8
 800107e:	4084      	lsls	r4, r0
 8001080:	000b      	movs	r3, r1
 8001082:	464d      	mov	r5, r9
 8001084:	4323      	orrs	r3, r4
 8001086:	4698      	mov	r8, r3
 8001088:	4085      	lsls	r5, r0
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <__aeabi_ddiv+0x38c>)
 800108c:	1a9b      	subs	r3, r3, r2
 800108e:	469b      	mov	fp, r3
 8001090:	2300      	movs	r3, #0
 8001092:	4699      	mov	r9, r3
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	e69e      	b.n	8000dd6 <__aeabi_ddiv+0x4a>
 8001098:	0002      	movs	r2, r0
 800109a:	4322      	orrs	r2, r4
 800109c:	4690      	mov	r8, r2
 800109e:	d11d      	bne.n	80010dc <__aeabi_ddiv+0x350>
 80010a0:	2208      	movs	r2, #8
 80010a2:	469b      	mov	fp, r3
 80010a4:	2302      	movs	r3, #2
 80010a6:	2500      	movs	r5, #0
 80010a8:	4691      	mov	r9, r2
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	e693      	b.n	8000dd6 <__aeabi_ddiv+0x4a>
 80010ae:	4651      	mov	r1, sl
 80010b0:	4321      	orrs	r1, r4
 80010b2:	d109      	bne.n	80010c8 <__aeabi_ddiv+0x33c>
 80010b4:	2302      	movs	r3, #2
 80010b6:	464a      	mov	r2, r9
 80010b8:	431a      	orrs	r2, r3
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <__aeabi_ddiv+0x390>)
 80010bc:	4691      	mov	r9, r2
 80010be:	469c      	mov	ip, r3
 80010c0:	2400      	movs	r4, #0
 80010c2:	2002      	movs	r0, #2
 80010c4:	44e3      	add	fp, ip
 80010c6:	e6a1      	b.n	8000e0c <__aeabi_ddiv+0x80>
 80010c8:	2303      	movs	r3, #3
 80010ca:	464a      	mov	r2, r9
 80010cc:	431a      	orrs	r2, r3
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <__aeabi_ddiv+0x390>)
 80010d0:	4691      	mov	r9, r2
 80010d2:	469c      	mov	ip, r3
 80010d4:	4651      	mov	r1, sl
 80010d6:	2003      	movs	r0, #3
 80010d8:	44e3      	add	fp, ip
 80010da:	e697      	b.n	8000e0c <__aeabi_ddiv+0x80>
 80010dc:	220c      	movs	r2, #12
 80010de:	469b      	mov	fp, r3
 80010e0:	2303      	movs	r3, #3
 80010e2:	46a0      	mov	r8, r4
 80010e4:	4691      	mov	r9, r2
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	e675      	b.n	8000dd6 <__aeabi_ddiv+0x4a>
 80010ea:	2304      	movs	r3, #4
 80010ec:	4699      	mov	r9, r3
 80010ee:	2300      	movs	r3, #0
 80010f0:	469b      	mov	fp, r3
 80010f2:	3301      	adds	r3, #1
 80010f4:	2500      	movs	r5, #0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	e66d      	b.n	8000dd6 <__aeabi_ddiv+0x4a>
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	fffffc01 	.word	0xfffffc01
 8001104:	08005418 	.word	0x08005418
 8001108:	000003ff 	.word	0x000003ff
 800110c:	feffffff 	.word	0xfeffffff
 8001110:	000007fe 	.word	0x000007fe
 8001114:	000003f3 	.word	0x000003f3
 8001118:	fffffc0d 	.word	0xfffffc0d
 800111c:	fffff801 	.word	0xfffff801
 8001120:	464a      	mov	r2, r9
 8001122:	2301      	movs	r3, #1
 8001124:	431a      	orrs	r2, r3
 8001126:	4691      	mov	r9, r2
 8001128:	2400      	movs	r4, #0
 800112a:	2001      	movs	r0, #1
 800112c:	e66e      	b.n	8000e0c <__aeabi_ddiv+0x80>
 800112e:	2300      	movs	r3, #0
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	469a      	mov	sl, r3
 8001134:	2500      	movs	r5, #0
 8001136:	4b88      	ldr	r3, [pc, #544]	; (8001358 <__aeabi_ddiv+0x5cc>)
 8001138:	0312      	lsls	r2, r2, #12
 800113a:	e67e      	b.n	8000e3a <__aeabi_ddiv+0xae>
 800113c:	2501      	movs	r5, #1
 800113e:	426d      	negs	r5, r5
 8001140:	2201      	movs	r2, #1
 8001142:	1ad2      	subs	r2, r2, r3
 8001144:	2a38      	cmp	r2, #56	; 0x38
 8001146:	dd00      	ble.n	800114a <__aeabi_ddiv+0x3be>
 8001148:	e674      	b.n	8000e34 <__aeabi_ddiv+0xa8>
 800114a:	2a1f      	cmp	r2, #31
 800114c:	dc00      	bgt.n	8001150 <__aeabi_ddiv+0x3c4>
 800114e:	e0bd      	b.n	80012cc <__aeabi_ddiv+0x540>
 8001150:	211f      	movs	r1, #31
 8001152:	4249      	negs	r1, r1
 8001154:	1acb      	subs	r3, r1, r3
 8001156:	4641      	mov	r1, r8
 8001158:	40d9      	lsrs	r1, r3
 800115a:	000b      	movs	r3, r1
 800115c:	2a20      	cmp	r2, #32
 800115e:	d004      	beq.n	800116a <__aeabi_ddiv+0x3de>
 8001160:	4641      	mov	r1, r8
 8001162:	4a7e      	ldr	r2, [pc, #504]	; (800135c <__aeabi_ddiv+0x5d0>)
 8001164:	445a      	add	r2, fp
 8001166:	4091      	lsls	r1, r2
 8001168:	430d      	orrs	r5, r1
 800116a:	0029      	movs	r1, r5
 800116c:	1e4a      	subs	r2, r1, #1
 800116e:	4191      	sbcs	r1, r2
 8001170:	4319      	orrs	r1, r3
 8001172:	2307      	movs	r3, #7
 8001174:	001d      	movs	r5, r3
 8001176:	2200      	movs	r2, #0
 8001178:	400d      	ands	r5, r1
 800117a:	420b      	tst	r3, r1
 800117c:	d100      	bne.n	8001180 <__aeabi_ddiv+0x3f4>
 800117e:	e0d0      	b.n	8001322 <__aeabi_ddiv+0x596>
 8001180:	220f      	movs	r2, #15
 8001182:	2300      	movs	r3, #0
 8001184:	400a      	ands	r2, r1
 8001186:	2a04      	cmp	r2, #4
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x400>
 800118a:	e0c7      	b.n	800131c <__aeabi_ddiv+0x590>
 800118c:	1d0a      	adds	r2, r1, #4
 800118e:	428a      	cmp	r2, r1
 8001190:	4189      	sbcs	r1, r1
 8001192:	4249      	negs	r1, r1
 8001194:	185b      	adds	r3, r3, r1
 8001196:	0011      	movs	r1, r2
 8001198:	021a      	lsls	r2, r3, #8
 800119a:	d400      	bmi.n	800119e <__aeabi_ddiv+0x412>
 800119c:	e0be      	b.n	800131c <__aeabi_ddiv+0x590>
 800119e:	2301      	movs	r3, #1
 80011a0:	2200      	movs	r2, #0
 80011a2:	2500      	movs	r5, #0
 80011a4:	e649      	b.n	8000e3a <__aeabi_ddiv+0xae>
 80011a6:	2280      	movs	r2, #128	; 0x80
 80011a8:	4643      	mov	r3, r8
 80011aa:	0312      	lsls	r2, r2, #12
 80011ac:	4213      	tst	r3, r2
 80011ae:	d008      	beq.n	80011c2 <__aeabi_ddiv+0x436>
 80011b0:	4214      	tst	r4, r2
 80011b2:	d106      	bne.n	80011c2 <__aeabi_ddiv+0x436>
 80011b4:	4322      	orrs	r2, r4
 80011b6:	0312      	lsls	r2, r2, #12
 80011b8:	46ba      	mov	sl, r7
 80011ba:	000d      	movs	r5, r1
 80011bc:	4b66      	ldr	r3, [pc, #408]	; (8001358 <__aeabi_ddiv+0x5cc>)
 80011be:	0b12      	lsrs	r2, r2, #12
 80011c0:	e63b      	b.n	8000e3a <__aeabi_ddiv+0xae>
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	4643      	mov	r3, r8
 80011c6:	0312      	lsls	r2, r2, #12
 80011c8:	431a      	orrs	r2, r3
 80011ca:	0312      	lsls	r2, r2, #12
 80011cc:	46b2      	mov	sl, r6
 80011ce:	4b62      	ldr	r3, [pc, #392]	; (8001358 <__aeabi_ddiv+0x5cc>)
 80011d0:	0b12      	lsrs	r2, r2, #12
 80011d2:	e632      	b.n	8000e3a <__aeabi_ddiv+0xae>
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0x44e>
 80011d8:	e702      	b.n	8000fe0 <__aeabi_ddiv+0x254>
 80011da:	19a6      	adds	r6, r4, r6
 80011dc:	1e6a      	subs	r2, r5, #1
 80011de:	42a6      	cmp	r6, r4
 80011e0:	d200      	bcs.n	80011e4 <__aeabi_ddiv+0x458>
 80011e2:	e089      	b.n	80012f8 <__aeabi_ddiv+0x56c>
 80011e4:	4286      	cmp	r6, r0
 80011e6:	d200      	bcs.n	80011ea <__aeabi_ddiv+0x45e>
 80011e8:	e09f      	b.n	800132a <__aeabi_ddiv+0x59e>
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x462>
 80011ec:	e0af      	b.n	800134e <__aeabi_ddiv+0x5c2>
 80011ee:	0015      	movs	r5, r2
 80011f0:	e6f4      	b.n	8000fdc <__aeabi_ddiv+0x250>
 80011f2:	42a9      	cmp	r1, r5
 80011f4:	d900      	bls.n	80011f8 <__aeabi_ddiv+0x46c>
 80011f6:	e63c      	b.n	8000e72 <__aeabi_ddiv+0xe6>
 80011f8:	4643      	mov	r3, r8
 80011fa:	07de      	lsls	r6, r3, #31
 80011fc:	0858      	lsrs	r0, r3, #1
 80011fe:	086b      	lsrs	r3, r5, #1
 8001200:	431e      	orrs	r6, r3
 8001202:	07ed      	lsls	r5, r5, #31
 8001204:	e63c      	b.n	8000e80 <__aeabi_ddiv+0xf4>
 8001206:	f000 f9ad 	bl	8001564 <__clzsi2>
 800120a:	0001      	movs	r1, r0
 800120c:	0002      	movs	r2, r0
 800120e:	3115      	adds	r1, #21
 8001210:	3220      	adds	r2, #32
 8001212:	291c      	cmp	r1, #28
 8001214:	dc00      	bgt.n	8001218 <__aeabi_ddiv+0x48c>
 8001216:	e72c      	b.n	8001072 <__aeabi_ddiv+0x2e6>
 8001218:	464b      	mov	r3, r9
 800121a:	3808      	subs	r0, #8
 800121c:	4083      	lsls	r3, r0
 800121e:	2500      	movs	r5, #0
 8001220:	4698      	mov	r8, r3
 8001222:	e732      	b.n	800108a <__aeabi_ddiv+0x2fe>
 8001224:	f000 f99e 	bl	8001564 <__clzsi2>
 8001228:	0003      	movs	r3, r0
 800122a:	001a      	movs	r2, r3
 800122c:	3215      	adds	r2, #21
 800122e:	3020      	adds	r0, #32
 8001230:	2a1c      	cmp	r2, #28
 8001232:	dc00      	bgt.n	8001236 <__aeabi_ddiv+0x4aa>
 8001234:	e6ff      	b.n	8001036 <__aeabi_ddiv+0x2aa>
 8001236:	4654      	mov	r4, sl
 8001238:	3b08      	subs	r3, #8
 800123a:	2100      	movs	r1, #0
 800123c:	409c      	lsls	r4, r3
 800123e:	e705      	b.n	800104c <__aeabi_ddiv+0x2c0>
 8001240:	1936      	adds	r6, r6, r4
 8001242:	3b01      	subs	r3, #1
 8001244:	42b4      	cmp	r4, r6
 8001246:	d900      	bls.n	800124a <__aeabi_ddiv+0x4be>
 8001248:	e6a6      	b.n	8000f98 <__aeabi_ddiv+0x20c>
 800124a:	42b2      	cmp	r2, r6
 800124c:	d800      	bhi.n	8001250 <__aeabi_ddiv+0x4c4>
 800124e:	e6a3      	b.n	8000f98 <__aeabi_ddiv+0x20c>
 8001250:	1e83      	subs	r3, r0, #2
 8001252:	1936      	adds	r6, r6, r4
 8001254:	e6a0      	b.n	8000f98 <__aeabi_ddiv+0x20c>
 8001256:	1909      	adds	r1, r1, r4
 8001258:	3d01      	subs	r5, #1
 800125a:	428c      	cmp	r4, r1
 800125c:	d900      	bls.n	8001260 <__aeabi_ddiv+0x4d4>
 800125e:	e68d      	b.n	8000f7c <__aeabi_ddiv+0x1f0>
 8001260:	428a      	cmp	r2, r1
 8001262:	d800      	bhi.n	8001266 <__aeabi_ddiv+0x4da>
 8001264:	e68a      	b.n	8000f7c <__aeabi_ddiv+0x1f0>
 8001266:	1e85      	subs	r5, r0, #2
 8001268:	1909      	adds	r1, r1, r4
 800126a:	e687      	b.n	8000f7c <__aeabi_ddiv+0x1f0>
 800126c:	220f      	movs	r2, #15
 800126e:	402a      	ands	r2, r5
 8001270:	2a04      	cmp	r2, #4
 8001272:	d100      	bne.n	8001276 <__aeabi_ddiv+0x4ea>
 8001274:	e6bc      	b.n	8000ff0 <__aeabi_ddiv+0x264>
 8001276:	1d29      	adds	r1, r5, #4
 8001278:	42a9      	cmp	r1, r5
 800127a:	41ad      	sbcs	r5, r5
 800127c:	426d      	negs	r5, r5
 800127e:	08c9      	lsrs	r1, r1, #3
 8001280:	44a8      	add	r8, r5
 8001282:	e6b6      	b.n	8000ff2 <__aeabi_ddiv+0x266>
 8001284:	42af      	cmp	r7, r5
 8001286:	d900      	bls.n	800128a <__aeabi_ddiv+0x4fe>
 8001288:	e662      	b.n	8000f50 <__aeabi_ddiv+0x1c4>
 800128a:	4281      	cmp	r1, r0
 800128c:	d804      	bhi.n	8001298 <__aeabi_ddiv+0x50c>
 800128e:	d000      	beq.n	8001292 <__aeabi_ddiv+0x506>
 8001290:	e65e      	b.n	8000f50 <__aeabi_ddiv+0x1c4>
 8001292:	42ae      	cmp	r6, r5
 8001294:	d800      	bhi.n	8001298 <__aeabi_ddiv+0x50c>
 8001296:	e65b      	b.n	8000f50 <__aeabi_ddiv+0x1c4>
 8001298:	2302      	movs	r3, #2
 800129a:	425b      	negs	r3, r3
 800129c:	469c      	mov	ip, r3
 800129e:	9b00      	ldr	r3, [sp, #0]
 80012a0:	44e0      	add	r8, ip
 80012a2:	469c      	mov	ip, r3
 80012a4:	4465      	add	r5, ip
 80012a6:	429d      	cmp	r5, r3
 80012a8:	419b      	sbcs	r3, r3
 80012aa:	425b      	negs	r3, r3
 80012ac:	191b      	adds	r3, r3, r4
 80012ae:	18c0      	adds	r0, r0, r3
 80012b0:	e64f      	b.n	8000f52 <__aeabi_ddiv+0x1c6>
 80012b2:	42b2      	cmp	r2, r6
 80012b4:	d800      	bhi.n	80012b8 <__aeabi_ddiv+0x52c>
 80012b6:	e612      	b.n	8000ede <__aeabi_ddiv+0x152>
 80012b8:	1e83      	subs	r3, r0, #2
 80012ba:	1936      	adds	r6, r6, r4
 80012bc:	e60f      	b.n	8000ede <__aeabi_ddiv+0x152>
 80012be:	428a      	cmp	r2, r1
 80012c0:	d800      	bhi.n	80012c4 <__aeabi_ddiv+0x538>
 80012c2:	e5fa      	b.n	8000eba <__aeabi_ddiv+0x12e>
 80012c4:	1e83      	subs	r3, r0, #2
 80012c6:	4698      	mov	r8, r3
 80012c8:	1909      	adds	r1, r1, r4
 80012ca:	e5f6      	b.n	8000eba <__aeabi_ddiv+0x12e>
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <__aeabi_ddiv+0x5d4>)
 80012ce:	0028      	movs	r0, r5
 80012d0:	445b      	add	r3, fp
 80012d2:	4641      	mov	r1, r8
 80012d4:	409d      	lsls	r5, r3
 80012d6:	4099      	lsls	r1, r3
 80012d8:	40d0      	lsrs	r0, r2
 80012da:	1e6b      	subs	r3, r5, #1
 80012dc:	419d      	sbcs	r5, r3
 80012de:	4643      	mov	r3, r8
 80012e0:	4301      	orrs	r1, r0
 80012e2:	4329      	orrs	r1, r5
 80012e4:	40d3      	lsrs	r3, r2
 80012e6:	074a      	lsls	r2, r1, #29
 80012e8:	d100      	bne.n	80012ec <__aeabi_ddiv+0x560>
 80012ea:	e755      	b.n	8001198 <__aeabi_ddiv+0x40c>
 80012ec:	220f      	movs	r2, #15
 80012ee:	400a      	ands	r2, r1
 80012f0:	2a04      	cmp	r2, #4
 80012f2:	d000      	beq.n	80012f6 <__aeabi_ddiv+0x56a>
 80012f4:	e74a      	b.n	800118c <__aeabi_ddiv+0x400>
 80012f6:	e74f      	b.n	8001198 <__aeabi_ddiv+0x40c>
 80012f8:	0015      	movs	r5, r2
 80012fa:	4286      	cmp	r6, r0
 80012fc:	d000      	beq.n	8001300 <__aeabi_ddiv+0x574>
 80012fe:	e66d      	b.n	8000fdc <__aeabi_ddiv+0x250>
 8001300:	9a00      	ldr	r2, [sp, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d000      	beq.n	8001308 <__aeabi_ddiv+0x57c>
 8001306:	e669      	b.n	8000fdc <__aeabi_ddiv+0x250>
 8001308:	e66a      	b.n	8000fe0 <__aeabi_ddiv+0x254>
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <__aeabi_ddiv+0x5d8>)
 800130c:	445b      	add	r3, fp
 800130e:	2b00      	cmp	r3, #0
 8001310:	dc00      	bgt.n	8001314 <__aeabi_ddiv+0x588>
 8001312:	e713      	b.n	800113c <__aeabi_ddiv+0x3b0>
 8001314:	2501      	movs	r5, #1
 8001316:	2100      	movs	r1, #0
 8001318:	44a8      	add	r8, r5
 800131a:	e66a      	b.n	8000ff2 <__aeabi_ddiv+0x266>
 800131c:	075d      	lsls	r5, r3, #29
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	0b1a      	lsrs	r2, r3, #12
 8001322:	08c9      	lsrs	r1, r1, #3
 8001324:	2300      	movs	r3, #0
 8001326:	430d      	orrs	r5, r1
 8001328:	e587      	b.n	8000e3a <__aeabi_ddiv+0xae>
 800132a:	9900      	ldr	r1, [sp, #0]
 800132c:	3d02      	subs	r5, #2
 800132e:	004a      	lsls	r2, r1, #1
 8001330:	428a      	cmp	r2, r1
 8001332:	41bf      	sbcs	r7, r7
 8001334:	427f      	negs	r7, r7
 8001336:	193f      	adds	r7, r7, r4
 8001338:	19f6      	adds	r6, r6, r7
 800133a:	9200      	str	r2, [sp, #0]
 800133c:	e7dd      	b.n	80012fa <__aeabi_ddiv+0x56e>
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	4643      	mov	r3, r8
 8001342:	0312      	lsls	r2, r2, #12
 8001344:	431a      	orrs	r2, r3
 8001346:	0312      	lsls	r2, r2, #12
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <__aeabi_ddiv+0x5cc>)
 800134a:	0b12      	lsrs	r2, r2, #12
 800134c:	e575      	b.n	8000e3a <__aeabi_ddiv+0xae>
 800134e:	9900      	ldr	r1, [sp, #0]
 8001350:	4299      	cmp	r1, r3
 8001352:	d3ea      	bcc.n	800132a <__aeabi_ddiv+0x59e>
 8001354:	0015      	movs	r5, r2
 8001356:	e7d3      	b.n	8001300 <__aeabi_ddiv+0x574>
 8001358:	000007ff 	.word	0x000007ff
 800135c:	0000043e 	.word	0x0000043e
 8001360:	0000041e 	.word	0x0000041e
 8001364:	000003ff 	.word	0x000003ff

08001368 <__aeabi_i2d>:
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	2800      	cmp	r0, #0
 800136c:	d016      	beq.n	800139c <__aeabi_i2d+0x34>
 800136e:	17c3      	asrs	r3, r0, #31
 8001370:	18c5      	adds	r5, r0, r3
 8001372:	405d      	eors	r5, r3
 8001374:	0fc4      	lsrs	r4, r0, #31
 8001376:	0028      	movs	r0, r5
 8001378:	f000 f8f4 	bl	8001564 <__clzsi2>
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <__aeabi_i2d+0x5c>)
 800137e:	1a1b      	subs	r3, r3, r0
 8001380:	280a      	cmp	r0, #10
 8001382:	dc16      	bgt.n	80013b2 <__aeabi_i2d+0x4a>
 8001384:	0002      	movs	r2, r0
 8001386:	002e      	movs	r6, r5
 8001388:	3215      	adds	r2, #21
 800138a:	4096      	lsls	r6, r2
 800138c:	220b      	movs	r2, #11
 800138e:	1a12      	subs	r2, r2, r0
 8001390:	40d5      	lsrs	r5, r2
 8001392:	055b      	lsls	r3, r3, #21
 8001394:	032d      	lsls	r5, r5, #12
 8001396:	0b2d      	lsrs	r5, r5, #12
 8001398:	0d5b      	lsrs	r3, r3, #21
 800139a:	e003      	b.n	80013a4 <__aeabi_i2d+0x3c>
 800139c:	2400      	movs	r4, #0
 800139e:	2300      	movs	r3, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	2600      	movs	r6, #0
 80013a4:	051b      	lsls	r3, r3, #20
 80013a6:	432b      	orrs	r3, r5
 80013a8:	07e4      	lsls	r4, r4, #31
 80013aa:	4323      	orrs	r3, r4
 80013ac:	0030      	movs	r0, r6
 80013ae:	0019      	movs	r1, r3
 80013b0:	bd70      	pop	{r4, r5, r6, pc}
 80013b2:	380b      	subs	r0, #11
 80013b4:	4085      	lsls	r5, r0
 80013b6:	055b      	lsls	r3, r3, #21
 80013b8:	032d      	lsls	r5, r5, #12
 80013ba:	2600      	movs	r6, #0
 80013bc:	0b2d      	lsrs	r5, r5, #12
 80013be:	0d5b      	lsrs	r3, r3, #21
 80013c0:	e7f0      	b.n	80013a4 <__aeabi_i2d+0x3c>
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	0000041e 	.word	0x0000041e

080013c8 <__aeabi_f2d>:
 80013c8:	b570      	push	{r4, r5, r6, lr}
 80013ca:	0242      	lsls	r2, r0, #9
 80013cc:	0043      	lsls	r3, r0, #1
 80013ce:	0fc4      	lsrs	r4, r0, #31
 80013d0:	20fe      	movs	r0, #254	; 0xfe
 80013d2:	0e1b      	lsrs	r3, r3, #24
 80013d4:	1c59      	adds	r1, r3, #1
 80013d6:	0a55      	lsrs	r5, r2, #9
 80013d8:	4208      	tst	r0, r1
 80013da:	d00c      	beq.n	80013f6 <__aeabi_f2d+0x2e>
 80013dc:	21e0      	movs	r1, #224	; 0xe0
 80013de:	0089      	lsls	r1, r1, #2
 80013e0:	468c      	mov	ip, r1
 80013e2:	076d      	lsls	r5, r5, #29
 80013e4:	0b12      	lsrs	r2, r2, #12
 80013e6:	4463      	add	r3, ip
 80013e8:	051b      	lsls	r3, r3, #20
 80013ea:	4313      	orrs	r3, r2
 80013ec:	07e4      	lsls	r4, r4, #31
 80013ee:	4323      	orrs	r3, r4
 80013f0:	0028      	movs	r0, r5
 80013f2:	0019      	movs	r1, r3
 80013f4:	bd70      	pop	{r4, r5, r6, pc}
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d114      	bne.n	8001424 <__aeabi_f2d+0x5c>
 80013fa:	2d00      	cmp	r5, #0
 80013fc:	d01b      	beq.n	8001436 <__aeabi_f2d+0x6e>
 80013fe:	0028      	movs	r0, r5
 8001400:	f000 f8b0 	bl	8001564 <__clzsi2>
 8001404:	280a      	cmp	r0, #10
 8001406:	dc1c      	bgt.n	8001442 <__aeabi_f2d+0x7a>
 8001408:	230b      	movs	r3, #11
 800140a:	002a      	movs	r2, r5
 800140c:	1a1b      	subs	r3, r3, r0
 800140e:	40da      	lsrs	r2, r3
 8001410:	0003      	movs	r3, r0
 8001412:	3315      	adds	r3, #21
 8001414:	409d      	lsls	r5, r3
 8001416:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <__aeabi_f2d+0x88>)
 8001418:	0312      	lsls	r2, r2, #12
 800141a:	1a1b      	subs	r3, r3, r0
 800141c:	055b      	lsls	r3, r3, #21
 800141e:	0b12      	lsrs	r2, r2, #12
 8001420:	0d5b      	lsrs	r3, r3, #21
 8001422:	e7e1      	b.n	80013e8 <__aeabi_f2d+0x20>
 8001424:	2d00      	cmp	r5, #0
 8001426:	d009      	beq.n	800143c <__aeabi_f2d+0x74>
 8001428:	0b13      	lsrs	r3, r2, #12
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	0312      	lsls	r2, r2, #12
 800142e:	431a      	orrs	r2, r3
 8001430:	076d      	lsls	r5, r5, #29
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <__aeabi_f2d+0x8c>)
 8001434:	e7d8      	b.n	80013e8 <__aeabi_f2d+0x20>
 8001436:	2300      	movs	r3, #0
 8001438:	2200      	movs	r2, #0
 800143a:	e7d5      	b.n	80013e8 <__aeabi_f2d+0x20>
 800143c:	2200      	movs	r2, #0
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <__aeabi_f2d+0x8c>)
 8001440:	e7d2      	b.n	80013e8 <__aeabi_f2d+0x20>
 8001442:	0003      	movs	r3, r0
 8001444:	002a      	movs	r2, r5
 8001446:	3b0b      	subs	r3, #11
 8001448:	409a      	lsls	r2, r3
 800144a:	2500      	movs	r5, #0
 800144c:	e7e3      	b.n	8001416 <__aeabi_f2d+0x4e>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	00000389 	.word	0x00000389
 8001454:	000007ff 	.word	0x000007ff

08001458 <__aeabi_d2f>:
 8001458:	0002      	movs	r2, r0
 800145a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145c:	004b      	lsls	r3, r1, #1
 800145e:	030d      	lsls	r5, r1, #12
 8001460:	0f40      	lsrs	r0, r0, #29
 8001462:	0d5b      	lsrs	r3, r3, #21
 8001464:	0fcc      	lsrs	r4, r1, #31
 8001466:	0a6d      	lsrs	r5, r5, #9
 8001468:	493a      	ldr	r1, [pc, #232]	; (8001554 <__aeabi_d2f+0xfc>)
 800146a:	4305      	orrs	r5, r0
 800146c:	1c58      	adds	r0, r3, #1
 800146e:	00d7      	lsls	r7, r2, #3
 8001470:	4208      	tst	r0, r1
 8001472:	d00a      	beq.n	800148a <__aeabi_d2f+0x32>
 8001474:	4938      	ldr	r1, [pc, #224]	; (8001558 <__aeabi_d2f+0x100>)
 8001476:	1859      	adds	r1, r3, r1
 8001478:	29fe      	cmp	r1, #254	; 0xfe
 800147a:	dd16      	ble.n	80014aa <__aeabi_d2f+0x52>
 800147c:	20ff      	movs	r0, #255	; 0xff
 800147e:	2200      	movs	r2, #0
 8001480:	05c0      	lsls	r0, r0, #23
 8001482:	4310      	orrs	r0, r2
 8001484:	07e4      	lsls	r4, r4, #31
 8001486:	4320      	orrs	r0, r4
 8001488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <__aeabi_d2f+0x44>
 800148e:	433d      	orrs	r5, r7
 8001490:	d026      	beq.n	80014e0 <__aeabi_d2f+0x88>
 8001492:	2205      	movs	r2, #5
 8001494:	0192      	lsls	r2, r2, #6
 8001496:	0a52      	lsrs	r2, r2, #9
 8001498:	b2d8      	uxtb	r0, r3
 800149a:	e7f1      	b.n	8001480 <__aeabi_d2f+0x28>
 800149c:	432f      	orrs	r7, r5
 800149e:	d0ed      	beq.n	800147c <__aeabi_d2f+0x24>
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	03d2      	lsls	r2, r2, #15
 80014a4:	20ff      	movs	r0, #255	; 0xff
 80014a6:	432a      	orrs	r2, r5
 80014a8:	e7ea      	b.n	8001480 <__aeabi_d2f+0x28>
 80014aa:	2900      	cmp	r1, #0
 80014ac:	dd1b      	ble.n	80014e6 <__aeabi_d2f+0x8e>
 80014ae:	0192      	lsls	r2, r2, #6
 80014b0:	1e50      	subs	r0, r2, #1
 80014b2:	4182      	sbcs	r2, r0
 80014b4:	00ed      	lsls	r5, r5, #3
 80014b6:	0f7f      	lsrs	r7, r7, #29
 80014b8:	432a      	orrs	r2, r5
 80014ba:	433a      	orrs	r2, r7
 80014bc:	0753      	lsls	r3, r2, #29
 80014be:	d047      	beq.n	8001550 <__aeabi_d2f+0xf8>
 80014c0:	230f      	movs	r3, #15
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d000      	beq.n	80014ca <__aeabi_d2f+0x72>
 80014c8:	3204      	adds	r2, #4
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	04db      	lsls	r3, r3, #19
 80014ce:	4013      	ands	r3, r2
 80014d0:	d03e      	beq.n	8001550 <__aeabi_d2f+0xf8>
 80014d2:	1c48      	adds	r0, r1, #1
 80014d4:	29fe      	cmp	r1, #254	; 0xfe
 80014d6:	d0d1      	beq.n	800147c <__aeabi_d2f+0x24>
 80014d8:	0192      	lsls	r2, r2, #6
 80014da:	0a52      	lsrs	r2, r2, #9
 80014dc:	b2c0      	uxtb	r0, r0
 80014de:	e7cf      	b.n	8001480 <__aeabi_d2f+0x28>
 80014e0:	2000      	movs	r0, #0
 80014e2:	2200      	movs	r2, #0
 80014e4:	e7cc      	b.n	8001480 <__aeabi_d2f+0x28>
 80014e6:	000a      	movs	r2, r1
 80014e8:	3217      	adds	r2, #23
 80014ea:	db2f      	blt.n	800154c <__aeabi_d2f+0xf4>
 80014ec:	2680      	movs	r6, #128	; 0x80
 80014ee:	0436      	lsls	r6, r6, #16
 80014f0:	432e      	orrs	r6, r5
 80014f2:	251e      	movs	r5, #30
 80014f4:	1a6d      	subs	r5, r5, r1
 80014f6:	2d1f      	cmp	r5, #31
 80014f8:	dd11      	ble.n	800151e <__aeabi_d2f+0xc6>
 80014fa:	2202      	movs	r2, #2
 80014fc:	4252      	negs	r2, r2
 80014fe:	1a52      	subs	r2, r2, r1
 8001500:	0031      	movs	r1, r6
 8001502:	40d1      	lsrs	r1, r2
 8001504:	2d20      	cmp	r5, #32
 8001506:	d004      	beq.n	8001512 <__aeabi_d2f+0xba>
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <__aeabi_d2f+0x104>)
 800150a:	4694      	mov	ip, r2
 800150c:	4463      	add	r3, ip
 800150e:	409e      	lsls	r6, r3
 8001510:	4337      	orrs	r7, r6
 8001512:	003a      	movs	r2, r7
 8001514:	1e53      	subs	r3, r2, #1
 8001516:	419a      	sbcs	r2, r3
 8001518:	430a      	orrs	r2, r1
 800151a:	2100      	movs	r1, #0
 800151c:	e7ce      	b.n	80014bc <__aeabi_d2f+0x64>
 800151e:	4a10      	ldr	r2, [pc, #64]	; (8001560 <__aeabi_d2f+0x108>)
 8001520:	0038      	movs	r0, r7
 8001522:	4694      	mov	ip, r2
 8001524:	4463      	add	r3, ip
 8001526:	4098      	lsls	r0, r3
 8001528:	003a      	movs	r2, r7
 800152a:	1e41      	subs	r1, r0, #1
 800152c:	4188      	sbcs	r0, r1
 800152e:	409e      	lsls	r6, r3
 8001530:	40ea      	lsrs	r2, r5
 8001532:	4330      	orrs	r0, r6
 8001534:	4302      	orrs	r2, r0
 8001536:	2100      	movs	r1, #0
 8001538:	0753      	lsls	r3, r2, #29
 800153a:	d1c1      	bne.n	80014c0 <__aeabi_d2f+0x68>
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	0013      	movs	r3, r2
 8001540:	04c9      	lsls	r1, r1, #19
 8001542:	2001      	movs	r0, #1
 8001544:	400b      	ands	r3, r1
 8001546:	420a      	tst	r2, r1
 8001548:	d1c6      	bne.n	80014d8 <__aeabi_d2f+0x80>
 800154a:	e7a3      	b.n	8001494 <__aeabi_d2f+0x3c>
 800154c:	2300      	movs	r3, #0
 800154e:	e7a0      	b.n	8001492 <__aeabi_d2f+0x3a>
 8001550:	000b      	movs	r3, r1
 8001552:	e79f      	b.n	8001494 <__aeabi_d2f+0x3c>
 8001554:	000007fe 	.word	0x000007fe
 8001558:	fffffc80 	.word	0xfffffc80
 800155c:	fffffca2 	.word	0xfffffca2
 8001560:	fffffc82 	.word	0xfffffc82

08001564 <__clzsi2>:
 8001564:	211c      	movs	r1, #28
 8001566:	2301      	movs	r3, #1
 8001568:	041b      	lsls	r3, r3, #16
 800156a:	4298      	cmp	r0, r3
 800156c:	d301      	bcc.n	8001572 <__clzsi2+0xe>
 800156e:	0c00      	lsrs	r0, r0, #16
 8001570:	3910      	subs	r1, #16
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	4298      	cmp	r0, r3
 8001576:	d301      	bcc.n	800157c <__clzsi2+0x18>
 8001578:	0a00      	lsrs	r0, r0, #8
 800157a:	3908      	subs	r1, #8
 800157c:	091b      	lsrs	r3, r3, #4
 800157e:	4298      	cmp	r0, r3
 8001580:	d301      	bcc.n	8001586 <__clzsi2+0x22>
 8001582:	0900      	lsrs	r0, r0, #4
 8001584:	3904      	subs	r1, #4
 8001586:	a202      	add	r2, pc, #8	; (adr r2, 8001590 <__clzsi2+0x2c>)
 8001588:	5c10      	ldrb	r0, [r2, r0]
 800158a:	1840      	adds	r0, r0, r1
 800158c:	4770      	bx	lr
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	02020304 	.word	0x02020304
 8001594:	01010101 	.word	0x01010101
	...

080015a0 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <BMP180_Init+0x18>)
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	20000034 	.word	0x20000034

080015bc <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	701a      	strb	r2, [r3, #0]
	_bmp180_oss = oss;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <BMP180_SetOversampling+0x1c>)
 80015ca:	1dfa      	adds	r2, r7, #7
 80015cc:	7812      	ldrb	r2, [r2, #0]
 80015ce:	701a      	strb	r2, [r3, #0]
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000004e 	.word	0x2000004e

080015dc <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 80015e0:	23aa      	movs	r3, #170	; 0xaa
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f8e2 	bl	80017ac <BMP180_ReadReg>
 80015e8:	0003      	movs	r3, r0
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21c      	sxth	r4, r3
 80015ee:	23ab      	movs	r3, #171	; 0xab
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 f8db 	bl	80017ac <BMP180_ReadReg>
 80015f6:	0003      	movs	r3, r0
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4323      	orrs	r3, r4
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b59      	ldr	r3, [pc, #356]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 8001600:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8001602:	23ac      	movs	r3, #172	; 0xac
 8001604:	0018      	movs	r0, r3
 8001606:	f000 f8d1 	bl	80017ac <BMP180_ReadReg>
 800160a:	0003      	movs	r3, r0
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	b21c      	sxth	r4, r3
 8001610:	23ad      	movs	r3, #173	; 0xad
 8001612:	0018      	movs	r0, r3
 8001614:	f000 f8ca 	bl	80017ac <BMP180_ReadReg>
 8001618:	0003      	movs	r3, r0
 800161a:	b21b      	sxth	r3, r3
 800161c:	4323      	orrs	r3, r4
 800161e:	b21a      	sxth	r2, r3
 8001620:	4b50      	ldr	r3, [pc, #320]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 8001622:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8001624:	23ae      	movs	r3, #174	; 0xae
 8001626:	0018      	movs	r0, r3
 8001628:	f000 f8c0 	bl	80017ac <BMP180_ReadReg>
 800162c:	0003      	movs	r3, r0
 800162e:	021b      	lsls	r3, r3, #8
 8001630:	b21c      	sxth	r4, r3
 8001632:	23af      	movs	r3, #175	; 0xaf
 8001634:	0018      	movs	r0, r3
 8001636:	f000 f8b9 	bl	80017ac <BMP180_ReadReg>
 800163a:	0003      	movs	r3, r0
 800163c:	b21b      	sxth	r3, r3
 800163e:	4323      	orrs	r3, r4
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b48      	ldr	r3, [pc, #288]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 8001644:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8001646:	23b0      	movs	r3, #176	; 0xb0
 8001648:	0018      	movs	r0, r3
 800164a:	f000 f8af 	bl	80017ac <BMP180_ReadReg>
 800164e:	0003      	movs	r3, r0
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21c      	sxth	r4, r3
 8001654:	23b1      	movs	r3, #177	; 0xb1
 8001656:	0018      	movs	r0, r3
 8001658:	f000 f8a8 	bl	80017ac <BMP180_ReadReg>
 800165c:	0003      	movs	r3, r0
 800165e:	b21b      	sxth	r3, r3
 8001660:	4323      	orrs	r3, r4
 8001662:	b21b      	sxth	r3, r3
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b3f      	ldr	r3, [pc, #252]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 8001668:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 800166a:	23b2      	movs	r3, #178	; 0xb2
 800166c:	0018      	movs	r0, r3
 800166e:	f000 f89d 	bl	80017ac <BMP180_ReadReg>
 8001672:	0003      	movs	r3, r0
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	b21c      	sxth	r4, r3
 8001678:	23b3      	movs	r3, #179	; 0xb3
 800167a:	0018      	movs	r0, r3
 800167c:	f000 f896 	bl	80017ac <BMP180_ReadReg>
 8001680:	0003      	movs	r3, r0
 8001682:	b21b      	sxth	r3, r3
 8001684:	4323      	orrs	r3, r4
 8001686:	b21b      	sxth	r3, r3
 8001688:	b29a      	uxth	r2, r3
 800168a:	4b36      	ldr	r3, [pc, #216]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 800168c:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 800168e:	23b4      	movs	r3, #180	; 0xb4
 8001690:	0018      	movs	r0, r3
 8001692:	f000 f88b 	bl	80017ac <BMP180_ReadReg>
 8001696:	0003      	movs	r3, r0
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21c      	sxth	r4, r3
 800169c:	23b5      	movs	r3, #181	; 0xb5
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 f884 	bl	80017ac <BMP180_ReadReg>
 80016a4:	0003      	movs	r3, r0
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4323      	orrs	r3, r4
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 80016b0:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 80016b2:	23b6      	movs	r3, #182	; 0xb6
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 f879 	bl	80017ac <BMP180_ReadReg>
 80016ba:	0003      	movs	r3, r0
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b21c      	sxth	r4, r3
 80016c0:	23b7      	movs	r3, #183	; 0xb7
 80016c2:	0018      	movs	r0, r3
 80016c4:	f000 f872 	bl	80017ac <BMP180_ReadReg>
 80016c8:	0003      	movs	r3, r0
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	4323      	orrs	r3, r4
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 80016d2:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 80016d4:	23b8      	movs	r3, #184	; 0xb8
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 f868 	bl	80017ac <BMP180_ReadReg>
 80016dc:	0003      	movs	r3, r0
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21c      	sxth	r4, r3
 80016e2:	23b9      	movs	r3, #185	; 0xb9
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 f861 	bl	80017ac <BMP180_ReadReg>
 80016ea:	0003      	movs	r3, r0
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	4323      	orrs	r3, r4
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 80016f4:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 80016f6:	23ba      	movs	r3, #186	; 0xba
 80016f8:	0018      	movs	r0, r3
 80016fa:	f000 f857 	bl	80017ac <BMP180_ReadReg>
 80016fe:	0003      	movs	r3, r0
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21c      	sxth	r4, r3
 8001704:	23bb      	movs	r3, #187	; 0xbb
 8001706:	0018      	movs	r0, r3
 8001708:	f000 f850 	bl	80017ac <BMP180_ReadReg>
 800170c:	0003      	movs	r3, r0
 800170e:	b21b      	sxth	r3, r3
 8001710:	4323      	orrs	r3, r4
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 8001716:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8001718:	23bc      	movs	r3, #188	; 0xbc
 800171a:	0018      	movs	r0, r3
 800171c:	f000 f846 	bl	80017ac <BMP180_ReadReg>
 8001720:	0003      	movs	r3, r0
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21c      	sxth	r4, r3
 8001726:	23bd      	movs	r3, #189	; 0xbd
 8001728:	0018      	movs	r0, r3
 800172a:	f000 f83f 	bl	80017ac <BMP180_ReadReg>
 800172e:	0003      	movs	r3, r0
 8001730:	b21b      	sxth	r3, r3
 8001732:	4323      	orrs	r3, r4
 8001734:	b21a      	sxth	r2, r3
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 8001738:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 800173a:	23be      	movs	r3, #190	; 0xbe
 800173c:	0018      	movs	r0, r3
 800173e:	f000 f835 	bl	80017ac <BMP180_ReadReg>
 8001742:	0003      	movs	r3, r0
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	b21c      	sxth	r4, r3
 8001748:	23bf      	movs	r3, #191	; 0xbf
 800174a:	0018      	movs	r0, r3
 800174c:	f000 f82e 	bl	80017ac <BMP180_ReadReg>
 8001750:	0003      	movs	r3, r0
 8001752:	b21b      	sxth	r3, r3
 8001754:	4323      	orrs	r3, r4
 8001756:	b21a      	sxth	r2, r3
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <BMP180_UpdateCalibrationData+0x188>)
 800175a:	829a      	strh	r2, [r3, #20]
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bdb0      	pop	{r4, r5, r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	20000038 	.word	0x20000038

08001768 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af02      	add	r7, sp, #8
 800176e:	0002      	movs	r2, r0
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	1dbb      	adds	r3, r7, #6
 8001776:	1c0a      	adds	r2, r1, #0
 8001778:	701a      	strb	r2, [r3, #0]
	uint8_t arr[2] = { reg, cmd };
 800177a:	210c      	movs	r1, #12
 800177c:	187b      	adds	r3, r7, r1
 800177e:	1dfa      	adds	r2, r7, #7
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	187b      	adds	r3, r7, r1
 8001786:	1dba      	adds	r2, r7, #6
 8001788:	7812      	ldrb	r2, [r2, #0]
 800178a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <BMP180_WriteReg+0x40>)
 800178e:	6818      	ldr	r0, [r3, #0]
 8001790:	187a      	adds	r2, r7, r1
 8001792:	23fa      	movs	r3, #250	; 0xfa
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	2302      	movs	r3, #2
 800179a:	21ee      	movs	r1, #238	; 0xee
 800179c:	f002 fa8c 	bl	8003cb8 <HAL_I2C_Master_Transmit>
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b004      	add	sp, #16
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000034 	.word	0x20000034

080017ac <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	0002      	movs	r2, r0
 80017b4:	1dfb      	adds	r3, r7, #7
 80017b6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <BMP180_ReadReg+0x44>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	1dfa      	adds	r2, r7, #7
 80017be:	23fa      	movs	r3, #250	; 0xfa
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	21ee      	movs	r1, #238	; 0xee
 80017c8:	f002 fa76 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <BMP180_ReadReg+0x44>)
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	240f      	movs	r4, #15
 80017d2:	193a      	adds	r2, r7, r4
 80017d4:	23fa      	movs	r3, #250	; 0xfa
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	2301      	movs	r3, #1
 80017dc:	21ee      	movs	r1, #238	; 0xee
 80017de:	f002 fb73 	bl	8003ec8 <HAL_I2C_Master_Receive>
	return result;
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	781b      	ldrb	r3, [r3, #0]
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b005      	add	sp, #20
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	20000034 	.word	0x20000034

080017f4 <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80017fa:	232e      	movs	r3, #46	; 0x2e
 80017fc:	0019      	movs	r1, r3
 80017fe:	20f4      	movs	r0, #244	; 0xf4
 8001800:	f7ff ffb2 	bl	8001768 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8001804:	2305      	movs	r3, #5
 8001806:	0018      	movs	r0, r3
 8001808:	f001 f88e 	bl	8002928 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 800180c:	20f6      	movs	r0, #246	; 0xf6
 800180e:	f7ff ffcd 	bl	80017ac <BMP180_ReadReg>
 8001812:	0003      	movs	r3, r0
 8001814:	021c      	lsls	r4, r3, #8
 8001816:	20f7      	movs	r0, #247	; 0xf7
 8001818:	f7ff ffc8 	bl	80017ac <BMP180_ReadReg>
 800181c:	0003      	movs	r3, r0
 800181e:	4323      	orrs	r3, r4
 8001820:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <BMP180_GetRawTemperature+0x88>)
 8001824:	895b      	ldrh	r3, [r3, #10]
 8001826:	001a      	movs	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	4a13      	ldr	r2, [pc, #76]	; (800187c <BMP180_GetRawTemperature+0x88>)
 800182e:	8912      	ldrh	r2, [r2, #8]
 8001830:	4353      	muls	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	da02      	bge.n	800183c <BMP180_GetRawTemperature+0x48>
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <BMP180_GetRawTemperature+0x8c>)
 8001838:	4694      	mov	ip, r2
 800183a:	4463      	add	r3, ip
 800183c:	13db      	asrs	r3, r3, #15
 800183e:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <BMP180_GetRawTemperature+0x88>)
 8001842:	2212      	movs	r2, #18
 8001844:	5e9b      	ldrsh	r3, [r3, r2]
 8001846:	02da      	lsls	r2, r3, #11
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <BMP180_GetRawTemperature+0x88>)
 800184a:	2114      	movs	r1, #20
 800184c:	5e5b      	ldrsh	r3, [r3, r1]
 800184e:	0019      	movs	r1, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	18cb      	adds	r3, r1, r3
 8001854:	0019      	movs	r1, r3
 8001856:	0010      	movs	r0, r2
 8001858:	f7fe fce0 	bl	800021c <__divsi3>
 800185c:	0003      	movs	r3, r0
 800185e:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8001860:	68ba      	ldr	r2, [r7, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	18d3      	adds	r3, r2, r3
 8001866:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	3308      	adds	r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	da00      	bge.n	8001872 <BMP180_GetRawTemperature+0x7e>
 8001870:	330f      	adds	r3, #15
 8001872:	111b      	asrs	r3, r3, #4
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b005      	add	sp, #20
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	20000038 	.word	0x20000038
 8001880:	00007fff 	.word	0x00007fff

08001884 <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 800188a:	f7ff ffb3 	bl	80017f4 <BMP180_GetRawTemperature>
 800188e:	0003      	movs	r3, r0
 8001890:	607b      	str	r3, [r7, #4]
	return temp / 10.0;
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff fd68 	bl	8001368 <__aeabi_i2d>
 8001898:	2200      	movs	r2, #0
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <BMP180_GetTemperature+0x34>)
 800189c:	f7ff fa76 	bl	8000d8c <__aeabi_ddiv>
 80018a0:	0002      	movs	r2, r0
 80018a2:	000b      	movs	r3, r1
 80018a4:	0010      	movs	r0, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	f7ff fdd6 	bl	8001458 <__aeabi_d2f>
 80018ac:	1c03      	adds	r3, r0, #0
}
 80018ae:	1c18      	adds	r0, r3, #0
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40240000 	.word	0x40240000

080018bc <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 80018c2:	232e      	movs	r3, #46	; 0x2e
 80018c4:	0019      	movs	r1, r3
 80018c6:	20f4      	movs	r0, #244	; 0xf4
 80018c8:	f7ff ff4e 	bl	8001768 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 80018cc:	2305      	movs	r3, #5
 80018ce:	0018      	movs	r0, r3
 80018d0:	f001 f82a 	bl	8002928 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 80018d4:	f000 f91c 	bl	8001b10 <BMP180_GetUT>
 80018d8:	0003      	movs	r3, r0
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 80018dc:	4b7f      	ldr	r3, [pc, #508]	; (8001adc <BMP180_GetPressure+0x220>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	001a      	movs	r2, r3
 80018e2:	4b7f      	ldr	r3, [pc, #508]	; (8001ae0 <BMP180_GetPressure+0x224>)
 80018e4:	5c9b      	ldrb	r3, [r3, r2]
 80018e6:	0019      	movs	r1, r3
 80018e8:	20f4      	movs	r0, #244	; 0xf4
 80018ea:	f7ff ff3d 	bl	8001768 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 80018ee:	4b7b      	ldr	r3, [pc, #492]	; (8001adc <BMP180_GetPressure+0x220>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	001a      	movs	r2, r3
 80018f4:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <BMP180_GetPressure+0x228>)
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f001 f815 	bl	8002928 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 80018fe:	f000 f917 	bl	8001b30 <BMP180_GetUP>
 8001902:	0003      	movs	r3, r0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8001906:	4b78      	ldr	r3, [pc, #480]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 8001908:	895b      	ldrh	r3, [r3, #10]
 800190a:	001a      	movs	r2, r3
 800190c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190e:	1a9b      	subs	r3, r3, r2
 8001910:	4a75      	ldr	r2, [pc, #468]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 8001912:	8912      	ldrh	r2, [r2, #8]
 8001914:	4353      	muls	r3, r2
 8001916:	2b00      	cmp	r3, #0
 8001918:	da02      	bge.n	8001920 <BMP180_GetPressure+0x64>
 800191a:	4a74      	ldr	r2, [pc, #464]	; (8001aec <BMP180_GetPressure+0x230>)
 800191c:	4694      	mov	ip, r2
 800191e:	4463      	add	r3, ip
 8001920:	13db      	asrs	r3, r3, #15
 8001922:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8001924:	4b70      	ldr	r3, [pc, #448]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 8001926:	2212      	movs	r2, #18
 8001928:	5e9b      	ldrsh	r3, [r3, r2]
 800192a:	02da      	lsls	r2, r3, #11
 800192c:	4b6e      	ldr	r3, [pc, #440]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 800192e:	2114      	movs	r1, #20
 8001930:	5e5b      	ldrsh	r3, [r3, r1]
 8001932:	0019      	movs	r1, r3
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	18cb      	adds	r3, r1, r3
 8001938:	0019      	movs	r1, r3
 800193a:	0010      	movs	r0, r2
 800193c:	f7fe fc6e 	bl	800021c <__divsi3>
 8001940:	0003      	movs	r3, r0
 8001942:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8001944:	6a3a      	ldr	r2, [r7, #32]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	18d3      	adds	r3, r2, r3
 800194a:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4a68      	ldr	r2, [pc, #416]	; (8001af0 <BMP180_GetPressure+0x234>)
 8001950:	4694      	mov	ip, r2
 8001952:	4463      	add	r3, ip
 8001954:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8001956:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 8001958:	220e      	movs	r2, #14
 800195a:	5e9b      	ldrsh	r3, [r3, r2]
 800195c:	001a      	movs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	435b      	muls	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	da02      	bge.n	800196c <BMP180_GetPressure+0xb0>
 8001966:	4963      	ldr	r1, [pc, #396]	; (8001af4 <BMP180_GetPressure+0x238>)
 8001968:	468c      	mov	ip, r1
 800196a:	4463      	add	r3, ip
 800196c:	131b      	asrs	r3, r3, #12
 800196e:	4353      	muls	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	da02      	bge.n	800197a <BMP180_GetPressure+0xbe>
 8001974:	4a60      	ldr	r2, [pc, #384]	; (8001af8 <BMP180_GetPressure+0x23c>)
 8001976:	4694      	mov	ip, r2
 8001978:	4463      	add	r3, ip
 800197a:	12db      	asrs	r3, r3, #11
 800197c:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 800197e:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 8001980:	2202      	movs	r2, #2
 8001982:	5e9b      	ldrsh	r3, [r3, r2]
 8001984:	001a      	movs	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4353      	muls	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	da02      	bge.n	8001994 <BMP180_GetPressure+0xd8>
 800198e:	4a5a      	ldr	r2, [pc, #360]	; (8001af8 <BMP180_GetPressure+0x23c>)
 8001990:	4694      	mov	ip, r2
 8001992:	4463      	add	r3, ip
 8001994:	12db      	asrs	r3, r3, #11
 8001996:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8001998:	6a3a      	ldr	r2, [r7, #32]
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	18d3      	adds	r3, r2, r3
 800199e:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 80019a0:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	5e9b      	ldrsh	r3, [r3, r2]
 80019a6:	009a      	lsls	r2, r3, #2
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	18d3      	adds	r3, r2, r3
 80019ac:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <BMP180_GetPressure+0x220>)
 80019ae:	7812      	ldrb	r2, [r2, #0]
 80019b0:	4093      	lsls	r3, r2
 80019b2:	3302      	adds	r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	da00      	bge.n	80019ba <BMP180_GetPressure+0xfe>
 80019b8:	3303      	adds	r3, #3
 80019ba:	109b      	asrs	r3, r3, #2
 80019bc:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 80019be:	4b4a      	ldr	r3, [pc, #296]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 80019c0:	2204      	movs	r2, #4
 80019c2:	5e9b      	ldrsh	r3, [r3, r2]
 80019c4:	001a      	movs	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	4353      	muls	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da02      	bge.n	80019d4 <BMP180_GetPressure+0x118>
 80019ce:	4a4b      	ldr	r2, [pc, #300]	; (8001afc <BMP180_GetPressure+0x240>)
 80019d0:	4694      	mov	ip, r2
 80019d2:	4463      	add	r3, ip
 80019d4:	135b      	asrs	r3, r3, #13
 80019d6:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 80019d8:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 80019da:	220c      	movs	r2, #12
 80019dc:	5e9b      	ldrsh	r3, [r3, r2]
 80019de:	001a      	movs	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	435b      	muls	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da02      	bge.n	80019ee <BMP180_GetPressure+0x132>
 80019e8:	4942      	ldr	r1, [pc, #264]	; (8001af4 <BMP180_GetPressure+0x238>)
 80019ea:	468c      	mov	ip, r1
 80019ec:	4463      	add	r3, ip
 80019ee:	131b      	asrs	r3, r3, #12
 80019f0:	4353      	muls	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da02      	bge.n	80019fc <BMP180_GetPressure+0x140>
 80019f6:	4a42      	ldr	r2, [pc, #264]	; (8001b00 <BMP180_GetPressure+0x244>)
 80019f8:	4694      	mov	ip, r2
 80019fa:	4463      	add	r3, ip
 80019fc:	141b      	asrs	r3, r3, #16
 80019fe:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8001a00:	6a3a      	ldr	r2, [r7, #32]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	18d3      	adds	r3, r2, r3
 8001a06:	3302      	adds	r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	da00      	bge.n	8001a0e <BMP180_GetPressure+0x152>
 8001a0c:	3303      	adds	r3, #3
 8001a0e:	109b      	asrs	r3, r3, #2
 8001a10:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8001a12:	4b35      	ldr	r3, [pc, #212]	; (8001ae8 <BMP180_GetPressure+0x22c>)
 8001a14:	88db      	ldrh	r3, [r3, #6]
 8001a16:	001a      	movs	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	0209      	lsls	r1, r1, #8
 8001a1e:	468c      	mov	ip, r1
 8001a20:	4463      	add	r3, ip
 8001a22:	4353      	muls	r3, r2
 8001a24:	0bdb      	lsrs	r3, r3, #15
 8001a26:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a2b      	ldr	r2, [pc, #172]	; (8001adc <BMP180_GetPressure+0x220>)
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	0011      	movs	r1, r2
 8001a34:	4a33      	ldr	r2, [pc, #204]	; (8001b04 <BMP180_GetPressure+0x248>)
 8001a36:	410a      	asrs	r2, r1
 8001a38:	4353      	muls	r3, r2
 8001a3a:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db08      	blt.n	8001a54 <BMP180_GetPressure+0x198>
		p = (b7 * 2) / b4;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7fe fb5d 	bl	8000108 <__udivsi3>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a52:	e006      	b.n	8001a62 <BMP180_GetPressure+0x1a6>
	else
		p = (b7 / b4) * 2;
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe fb56 	bl	8000108 <__udivsi3>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <BMP180_GetPressure+0x1ae>
 8001a68:	33ff      	adds	r3, #255	; 0xff
 8001a6a:	121b      	asrs	r3, r3, #8
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	da00      	bge.n	8001a76 <BMP180_GetPressure+0x1ba>
 8001a74:	33ff      	adds	r3, #255	; 0xff
 8001a76:	121b      	asrs	r3, r3, #8
 8001a78:	4353      	muls	r3, r2
 8001a7a:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	4a22      	ldr	r2, [pc, #136]	; (8001b08 <BMP180_GetPressure+0x24c>)
 8001a80:	4353      	muls	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da02      	bge.n	8001a8c <BMP180_GetPressure+0x1d0>
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <BMP180_GetPressure+0x244>)
 8001a88:	4694      	mov	ip, r2
 8001a8a:	4463      	add	r3, ip
 8001a8c:	141b      	asrs	r3, r3, #16
 8001a8e:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a92:	0013      	movs	r3, r2
 8001a94:	015b      	lsls	r3, r3, #5
 8001a96:	189b      	adds	r3, r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	1a9b      	subs	r3, r3, r2
 8001aa0:	00da      	lsls	r2, r3, #3
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	425b      	negs	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da02      	bge.n	8001ab0 <BMP180_GetPressure+0x1f4>
 8001aaa:	4a15      	ldr	r2, [pc, #84]	; (8001b00 <BMP180_GetPressure+0x244>)
 8001aac:	4694      	mov	ip, r2
 8001aae:	4463      	add	r3, ip
 8001ab0:	141b      	asrs	r3, r3, #16
 8001ab2:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 8001ab4:	6a3a      	ldr	r2, [r7, #32]
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	18d3      	adds	r3, r2, r3
 8001aba:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <BMP180_GetPressure+0x250>)
 8001abc:	4694      	mov	ip, r2
 8001abe:	4463      	add	r3, ip
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	da00      	bge.n	8001ac6 <BMP180_GetPressure+0x20a>
 8001ac4:	330f      	adds	r3, #15
 8001ac6:	111b      	asrs	r3, r3, #4
 8001ac8:	001a      	movs	r2, r3
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	189b      	adds	r3, r3, r2
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 8001ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b00c      	add	sp, #48	; 0x30
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	2000004e 	.word	0x2000004e
 8001ae0:	08005458 	.word	0x08005458
 8001ae4:	0800545c 	.word	0x0800545c
 8001ae8:	20000038 	.word	0x20000038
 8001aec:	00007fff 	.word	0x00007fff
 8001af0:	fffff060 	.word	0xfffff060
 8001af4:	00000fff 	.word	0x00000fff
 8001af8:	000007ff 	.word	0x000007ff
 8001afc:	00001fff 	.word	0x00001fff
 8001b00:	0000ffff 	.word	0x0000ffff
 8001b04:	0000c350 	.word	0x0000c350
 8001b08:	00000bde 	.word	0x00000bde
 8001b0c:	00000ecf 	.word	0x00000ecf

08001b10 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8001b14:	20f6      	movs	r0, #246	; 0xf6
 8001b16:	f7ff fe49 	bl	80017ac <BMP180_ReadReg>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	021c      	lsls	r4, r3, #8
 8001b1e:	20f7      	movs	r0, #247	; 0xf7
 8001b20:	f7ff fe44 	bl	80017ac <BMP180_ReadReg>
 8001b24:	0003      	movs	r3, r0
 8001b26:	4323      	orrs	r3, r4
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b30 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 8001b34:	20f6      	movs	r0, #246	; 0xf6
 8001b36:	f7ff fe39 	bl	80017ac <BMP180_ReadReg>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	041c      	lsls	r4, r3, #16
 8001b3e:	20f7      	movs	r0, #247	; 0xf7
 8001b40:	f7ff fe34 	bl	80017ac <BMP180_ReadReg>
 8001b44:	0003      	movs	r3, r0
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	431c      	orrs	r4, r3
 8001b4a:	20f8      	movs	r0, #248	; 0xf8
 8001b4c:	f7ff fe2e 	bl	80017ac <BMP180_ReadReg>
 8001b50:	0003      	movs	r3, r0
 8001b52:	0022      	movs	r2, r4
 8001b54:	431a      	orrs	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <BMP180_GetUP+0x3c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	1a5b      	subs	r3, r3, r1
 8001b60:	411a      	asrs	r2, r3
 8001b62:	0013      	movs	r3, r2
}
 8001b64:	0018      	movs	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	2000004e 	.word	0x2000004e

08001b70 <BMP180_check>:

uint8_t BMP180_check(void){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	return BMP180_ReadReg(BMP180_CONTROL_REG);
 8001b74:	20f4      	movs	r0, #244	; 0xf4
 8001b76:	f7ff fe19 	bl	80017ac <BMP180_ReadReg>
 8001b7a:	0003      	movs	r3, r0
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <CAN_send_receive_state>:
								CAN_TxHeaderTypeDef* TxHeader,
								uint8_t* buffer,
								uint8_t buffer_len	);

static void CAN_send_receive_state(CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* TxHeader)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	CAN_send_packet(hcan, TxHeader, receive_state_packet, CAN_PACKET_LEN);
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <CAN_send_receive_state+0x20>)
 8001b90:	6839      	ldr	r1, [r7, #0]
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	2308      	movs	r3, #8
 8001b96:	f000 fa67 	bl	8002068 <CAN_send_packet>
}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b002      	add	sp, #8
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001baa:	b0a3      	sub	sp, #140	; 0x8c
 8001bac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bae:	f000 fe57 	bl	8002860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb2:	f000 f903 	bl	8001dbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb6:	f000 fa01 	bl	8001fbc <MX_GPIO_Init>
  MX_CAN_Init();
 8001bba:	f000 f965 	bl	8001e88 <MX_CAN_Init>
  MX_I2C1_Init();
 8001bbe:	f000 f9bd 	bl	8001f3c <MX_I2C1_Init>
  // sensors
  //############################################################################################################

  // initialise i2c sensors
  struct MPU6050 mpu6050;
  MPU6050Init(&hi2c1, &mpu6050, 1, 1, 1, 1);
 8001bc2:	2330      	movs	r3, #48	; 0x30
 8001bc4:	2218      	movs	r2, #24
 8001bc6:	189b      	adds	r3, r3, r2
 8001bc8:	19d9      	adds	r1, r3, r7
 8001bca:	4879      	ldr	r0, [pc, #484]	; (8001db0 <main+0x208>)
 8001bcc:	2301      	movs	r3, #1
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f000 fb00 	bl	80021dc <MPU6050Init>

  BMP180_Init(&hi2c1);
 8001bdc:	4b74      	ldr	r3, [pc, #464]	; (8001db0 <main+0x208>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7ff fcde 	bl	80015a0 <BMP180_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 8001be4:	2003      	movs	r0, #3
 8001be6:	f7ff fce9 	bl	80015bc <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 8001bea:	f7ff fcf7 	bl	80015dc <BMP180_UpdateCalibrationData>

  //############################################################################################################

  // Start the CAN peripheral
  //############################################################################################################
  HAL_CAN_Start(&hcan);
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <main+0x20c>)
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f001 f8ad 	bl	8002d50 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <main+0x20c>)
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f001 fb12 	bl	8003224 <HAL_CAN_ActivateNotification>
 8001c00:	1e03      	subs	r3, r0, #0
 8001c02:	d001      	beq.n	8001c08 <main+0x60>
  {
	  Error_Handler();
 8001c04:	f000 fae4 	bl	80021d0 <Error_Handler>
  }
  CAN_TxHeaderTypeDef TxHeader;
  TxHeader.IDE = CAN_ID_STD;
 8001c08:	2110      	movs	r1, #16
 8001c0a:	2018      	movs	r0, #24
 8001c0c:	180b      	adds	r3, r1, r0
 8001c0e:	19db      	adds	r3, r3, r7
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = SENSOR_NODE_CAN_ID;
 8001c14:	180b      	adds	r3, r1, r0
 8001c16:	19db      	adds	r3, r3, r7
 8001c18:	2220      	movs	r2, #32
 8001c1a:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0;
 8001c1c:	180b      	adds	r3, r1, r0
 8001c1e:	19db      	adds	r3, r3, r7
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8001c24:	180b      	adds	r3, r1, r0
 8001c26:	19db      	adds	r3, r3, r7
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 8001c2c:	180b      	adds	r3, r1, r0
 8001c2e:	19db      	adds	r3, r3, r7
 8001c30:	2208      	movs	r2, #8
 8001c32:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8001c34:	180b      	adds	r3, r1, r0
 8001c36:	19db      	adds	r3, r3, r7
 8001c38:	2200      	movs	r2, #0
 8001c3a:	751a      	strb	r2, [r3, #20]
  //############################################################################################################

  // set up test data
  // ############################################################################################################
  mpu6050_data mpu6050_buf;
  size_t mpu6050_buf_len = sizeof(mpu6050_buf);
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  // test data
  bmp180_buf.pressure = 6006;
  bmp180_buf.temperature = 98;
  */

  size_t bmp180_buf_len = sizeof(bmp180_buf);
 8001c40:	2308      	movs	r3, #8
 8001c42:	67bb      	str	r3, [r7, #120]	; 0x78
  size_t data_buf_len = mpu6050_buf_len + bmp180_buf_len;
 8001c44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c48:	18d3      	adds	r3, r2, r3
 8001c4a:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t bmp180_status;
  uint8_t test_data_buffer[data_buf_len];
 8001c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c4e:	001a      	movs	r2, r3
 8001c50:	3a01      	subs	r2, #1
 8001c52:	673a      	str	r2, [r7, #112]	; 0x70
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	60fa      	str	r2, [r7, #12]
 8001c5a:	68b8      	ldr	r0, [r7, #8]
 8001c5c:	68f9      	ldr	r1, [r7, #12]
 8001c5e:	0002      	movs	r2, r0
 8001c60:	0f52      	lsrs	r2, r2, #29
 8001c62:	000e      	movs	r6, r1
 8001c64:	00f6      	lsls	r6, r6, #3
 8001c66:	617e      	str	r6, [r7, #20]
 8001c68:	697e      	ldr	r6, [r7, #20]
 8001c6a:	4316      	orrs	r6, r2
 8001c6c:	617e      	str	r6, [r7, #20]
 8001c6e:	0002      	movs	r2, r0
 8001c70:	00d2      	lsls	r2, r2, #3
 8001c72:	613a      	str	r2, [r7, #16]
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	0002      	movs	r2, r0
 8001c80:	0f52      	lsrs	r2, r2, #29
 8001c82:	000e      	movs	r6, r1
 8001c84:	00f5      	lsls	r5, r6, #3
 8001c86:	4315      	orrs	r5, r2
 8001c88:	0002      	movs	r2, r0
 8001c8a:	00d4      	lsls	r4, r2, #3
 8001c8c:	3307      	adds	r3, #7
 8001c8e:	08db      	lsrs	r3, r3, #3
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	466a      	mov	r2, sp
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	469d      	mov	sp, r3
 8001c98:	ab02      	add	r3, sp, #8
 8001c9a:	3300      	adds	r3, #0
 8001c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    /* USER CODE BEGIN 3 */

	  // gather i2c sensor data and package for CAN
	  //############################################################################################################
	  // read sensor values
	  MPU6050UpdateAccel();
 8001c9e:	f000 fb2b 	bl	80022f8 <MPU6050UpdateAccel>
	  MPU6050UpdateGyro();
 8001ca2:	f000 fba1 	bl	80023e8 <MPU6050UpdateGyro>
	  MPU6050UpdateTemp();
 8001ca6:	f000 fb5f 	bl	8002368 <MPU6050UpdateTemp>

	  mpu6050_buf.accelX = mpu6050.accelX;
 8001caa:	2130      	movs	r1, #48	; 0x30
 8001cac:	2518      	movs	r5, #24
 8001cae:	194b      	adds	r3, r1, r5
 8001cb0:	19db      	adds	r3, r3, r7
 8001cb2:	2206      	movs	r2, #6
 8001cb4:	5e9a      	ldrsh	r2, [r3, r2]
 8001cb6:	197b      	adds	r3, r7, r5
 8001cb8:	801a      	strh	r2, [r3, #0]
	  mpu6050_buf.accelY = mpu6050.accelY;
 8001cba:	194b      	adds	r3, r1, r5
 8001cbc:	19db      	adds	r3, r3, r7
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	5e9a      	ldrsh	r2, [r3, r2]
 8001cc2:	197b      	adds	r3, r7, r5
 8001cc4:	805a      	strh	r2, [r3, #2]
	  mpu6050_buf.accelZ = mpu6050.accelZ;
 8001cc6:	194b      	adds	r3, r1, r5
 8001cc8:	19db      	adds	r3, r3, r7
 8001cca:	220a      	movs	r2, #10
 8001ccc:	5e9a      	ldrsh	r2, [r3, r2]
 8001cce:	197b      	adds	r3, r7, r5
 8001cd0:	809a      	strh	r2, [r3, #4]
	  mpu6050_buf.gyroX = mpu6050.gyroX;
 8001cd2:	194b      	adds	r3, r1, r5
 8001cd4:	19db      	adds	r3, r3, r7
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	5e9a      	ldrsh	r2, [r3, r2]
 8001cda:	197b      	adds	r3, r7, r5
 8001cdc:	80da      	strh	r2, [r3, #6]
	  mpu6050_buf.gyroY = mpu6050.gyroY;
 8001cde:	194b      	adds	r3, r1, r5
 8001ce0:	19db      	adds	r3, r3, r7
 8001ce2:	220e      	movs	r2, #14
 8001ce4:	5e9a      	ldrsh	r2, [r3, r2]
 8001ce6:	197b      	adds	r3, r7, r5
 8001ce8:	811a      	strh	r2, [r3, #8]
	  mpu6050_buf.accelZ = mpu6050.accelZ;
 8001cea:	194b      	adds	r3, r1, r5
 8001cec:	19db      	adds	r3, r3, r7
 8001cee:	220a      	movs	r2, #10
 8001cf0:	5e9a      	ldrsh	r2, [r3, r2]
 8001cf2:	197b      	adds	r3, r7, r5
 8001cf4:	809a      	strh	r2, [r3, #4]
	  mpu6050_buf.temp = mpu6050.temp;
 8001cf6:	194b      	adds	r3, r1, r5
 8001cf8:	19db      	adds	r3, r3, r7
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	197b      	adds	r3, r7, r5
 8001cfe:	60da      	str	r2, [r3, #12]

	  bmp180_buf.pressure = BMP180_GetPressure();
 8001d00:	f7ff fddc 	bl	80018bc <BMP180_GetPressure>
 8001d04:	0002      	movs	r2, r0
 8001d06:	2428      	movs	r4, #40	; 0x28
 8001d08:	1963      	adds	r3, r4, r5
 8001d0a:	19db      	adds	r3, r3, r7
 8001d0c:	605a      	str	r2, [r3, #4]
	  bmp180_buf.temperature = BMP180_GetTemperature();
 8001d0e:	f7ff fdb9 	bl	8001884 <BMP180_GetTemperature>
 8001d12:	1c02      	adds	r2, r0, #0
 8001d14:	0021      	movs	r1, r4
 8001d16:	002c      	movs	r4, r5
 8001d18:	190b      	adds	r3, r1, r4
 8001d1a:	19db      	adds	r3, r3, r7
 8001d1c:	601a      	str	r2, [r3, #0]

	  // package sensor values into data buffer
	  memcpy(test_data_buffer, &bmp180_buf, bmp180_buf_len);
 8001d1e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d20:	190b      	adds	r3, r1, r4
 8001d22:	19d9      	adds	r1, r3, r7
 8001d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d26:	0018      	movs	r0, r3
 8001d28:	f003 fb20 	bl	800536c <memcpy>
	  memcpy(test_data_buffer+bmp180_buf_len, &mpu6050_buf, mpu6050_buf_len);
 8001d2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d30:	18d3      	adds	r3, r2, r3
 8001d32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001d34:	1939      	adds	r1, r7, r4
 8001d36:	0018      	movs	r0, r3
 8001d38:	f003 fb18 	bl	800536c <memcpy>
	  //############################################################################################################

	  // check sensor node state
	  if( sensor_node_state == SENSOR_NODE_TRANSMIT_STATE )
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <main+0x210>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10c      	bne.n	8001d60 <main+0x1b8>
	  {
		  // send buffer over CAN
		  CAN_send_buffer(&hcan, &TxHeader, test_data_buffer, data_buf_len);
 8001d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001d4c:	2110      	movs	r1, #16
 8001d4e:	1909      	adds	r1, r1, r4
 8001d50:	19c9      	adds	r1, r1, r7
 8001d52:	4818      	ldr	r0, [pc, #96]	; (8001db4 <main+0x20c>)
 8001d54:	f000 f9de 	bl	8002114 <CAN_send_buffer>
		  HAL_Delay(CAN_SEND_DELAY);
 8001d58:	20fa      	movs	r0, #250	; 0xfa
 8001d5a:	f000 fde5 	bl	8002928 <HAL_Delay>
 8001d5e:	e79e      	b.n	8001c9e <main+0xf6>
	  }
	  else if( sensor_node_state == SENSOR_NODE_RECEIVE_STATE )
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <main+0x210>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <main+0x1dc>
	  {
		  CAN_send_receive_state(&hcan, &TxHeader);
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	2218      	movs	r2, #24
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	19da      	adds	r2, r3, r7
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <main+0x20c>)
 8001d74:	0011      	movs	r1, r2
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff ff04 	bl	8001b84 <CAN_send_receive_state>
		  HAL_Delay(CAN_SEND_DELAY);
 8001d7c:	20fa      	movs	r0, #250	; 0xfa
 8001d7e:	f000 fdd3 	bl	8002928 <HAL_Delay>
 8001d82:	e78c      	b.n	8001c9e <main+0xf6>
	  }
	  else if( sensor_node_state == SENSOR_NODE_CONFIG_STATE )
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <main+0x210>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d187      	bne.n	8001c9e <main+0xf6>
	  {
		  // check what sensors have been connected
		  bmp180_status = BMP180_check();
 8001d8e:	2353      	movs	r3, #83	; 0x53
 8001d90:	2518      	movs	r5, #24
 8001d92:	195b      	adds	r3, r3, r5
 8001d94:	19dc      	adds	r4, r3, r7
 8001d96:	f7ff feeb 	bl	8001b70 <BMP180_check>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	7023      	strb	r3, [r4, #0]
		  mpu6050_status = MPU6050_check();
 8001d9e:	2352      	movs	r3, #82	; 0x52
 8001da0:	195b      	adds	r3, r3, r5
 8001da2:	19dc      	adds	r4, r3, r7
 8001da4:	f000 fc08 	bl	80025b8 <MPU6050_check>
 8001da8:	0003      	movs	r3, r0
 8001daa:	7023      	strb	r3, [r4, #0]
	  MPU6050UpdateAccel();
 8001dac:	e777      	b.n	8001c9e <main+0xf6>
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	20000050 	.word	0x20000050
 8001db4:	200000a4 	.word	0x200000a4
 8001db8:	20000008 	.word	0x20000008

08001dbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b099      	sub	sp, #100	; 0x64
 8001dc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc2:	242c      	movs	r4, #44	; 0x2c
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	2334      	movs	r3, #52	; 0x34
 8001dca:	001a      	movs	r2, r3
 8001dcc:	2100      	movs	r1, #0
 8001dce:	f003 faa1 	bl	8005314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd2:	231c      	movs	r3, #28
 8001dd4:	18fb      	adds	r3, r7, r3
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	2310      	movs	r3, #16
 8001dda:	001a      	movs	r2, r3
 8001ddc:	2100      	movs	r1, #0
 8001dde:	f003 fa99 	bl	8005314 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de2:	003b      	movs	r3, r7
 8001de4:	0018      	movs	r0, r3
 8001de6:	231c      	movs	r3, #28
 8001de8:	001a      	movs	r2, r3
 8001dea:	2100      	movs	r1, #0
 8001dec:	f003 fa92 	bl	8005314 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001df0:	0021      	movs	r1, r4
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	2203      	movs	r2, #3
 8001df6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	2201      	movs	r2, #1
 8001e02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	2210      	movs	r2, #16
 8001e08:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	0252      	lsls	r2, r2, #9
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001e18:	187b      	adds	r3, r7, r1
 8001e1a:	22a0      	movs	r2, #160	; 0xa0
 8001e1c:	0392      	lsls	r2, r2, #14
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	2201      	movs	r2, #1
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e26:	187b      	adds	r3, r7, r1
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f002 fca3 	bl	8004774 <HAL_RCC_OscConfig>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001e32:	f000 f9cd 	bl	80021d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e36:	211c      	movs	r1, #28
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	2207      	movs	r2, #7
 8001e3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3e:	187b      	adds	r3, r7, r1
 8001e40:	2202      	movs	r2, #2
 8001e42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2101      	movs	r1, #1
 8001e54:	0018      	movs	r0, r3
 8001e56:	f003 f813 	bl	8004e80 <HAL_RCC_ClockConfig>
 8001e5a:	1e03      	subs	r3, r0, #0
 8001e5c:	d001      	beq.n	8001e62 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e5e:	f000 f9b7 	bl	80021d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e62:	003b      	movs	r3, r7
 8001e64:	2220      	movs	r2, #32
 8001e66:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001e68:	003b      	movs	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e6e:	003b      	movs	r3, r7
 8001e70:	0018      	movs	r0, r3
 8001e72:	f003 f951 	bl	8005118 <HAL_RCCEx_PeriphCLKConfig>
 8001e76:	1e03      	subs	r3, r0, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e7a:	f000 f9a9 	bl	80021d0 <Error_Handler>
  }
}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	46bd      	mov	sp, r7
 8001e82:	b019      	add	sp, #100	; 0x64
 8001e84:	bd90      	pop	{r4, r7, pc}
	...

08001e88 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001e8e:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <MX_CAN_Init+0xac>)
 8001e90:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <MX_CAN_Init+0xb0>)
 8001e92:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 150;
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <MX_CAN_Init+0xac>)
 8001e96:	2296      	movs	r2, #150	; 0x96
 8001e98:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <MX_CAN_Init+0xac>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <MX_CAN_Init+0xac>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001ea6:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <MX_CAN_Init+0xac>)
 8001ea8:	22c0      	movs	r2, #192	; 0xc0
 8001eaa:	0312      	lsls	r2, r2, #12
 8001eac:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001eae:	4b21      	ldr	r3, [pc, #132]	; (8001f34 <MX_CAN_Init+0xac>)
 8001eb0:	2280      	movs	r2, #128	; 0x80
 8001eb2:	0352      	lsls	r2, r2, #13
 8001eb4:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001eb6:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <MX_CAN_Init+0xac>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <MX_CAN_Init+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <MX_CAN_Init+0xac>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <MX_CAN_Init+0xac>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001ece:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <MX_CAN_Init+0xac>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_CAN_Init+0xac>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001eda:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <MX_CAN_Init+0xac>)
 8001edc:	0018      	movs	r0, r3
 8001ede:	f000 fd47 	bl	8002970 <HAL_CAN_Init>
 8001ee2:	1e03      	subs	r3, r0, #0
 8001ee4:	d001      	beq.n	8001eea <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8001ee6:	f000 f973 	bl	80021d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  // configure CAN filter to only accept commands from the sensor server
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterBank = (uint32_t)10;  // which filter bank to use from the assigned ones
 8001eea:	003b      	movs	r3, r7
 8001eec:	220a      	movs	r2, #10
 8001eee:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001ef0:	003b      	movs	r3, r7
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh = SERVER_CAN_ID<<5;
 8001ef6:	003b      	movs	r3, r7
 8001ef8:	2220      	movs	r2, #32
 8001efa:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow = SERVER_CAN_ID<<5;
 8001efc:	003b      	movs	r3, r7
 8001efe:	2220      	movs	r2, #32
 8001f00:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh = SERVER_CAN_ID<<5;
 8001f02:	003b      	movs	r3, r7
 8001f04:	2220      	movs	r2, #32
 8001f06:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow = SERVER_CAN_ID<<5;
 8001f08:	003b      	movs	r3, r7
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001f0e:	003b      	movs	r3, r7
 8001f10:	2201      	movs	r2, #1
 8001f12:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001f14:	003b      	movs	r3, r7
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001f1a:	003b      	movs	r3, r7
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001f20:	003a      	movs	r2, r7
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <MX_CAN_Init+0xac>)
 8001f24:	0011      	movs	r1, r2
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fe20 	bl	8002b6c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	b00a      	add	sp, #40	; 0x28
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200000a4 	.word	0x200000a4
 8001f38:	40006400 	.word	0x40006400

08001f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f42:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <MX_I2C1_Init+0x78>)
 8001f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f48:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <MX_I2C1_Init+0x7c>)
 8001f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f001 fe07 	bl	8003b8c <HAL_I2C_Init>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d001      	beq.n	8001f86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f82:	f000 f925 	bl	80021d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f88:	2100      	movs	r1, #0
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f002 fb5a 	bl	8004644 <HAL_I2CEx_ConfigAnalogFilter>
 8001f90:	1e03      	subs	r3, r0, #0
 8001f92:	d001      	beq.n	8001f98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f94:	f000 f91c 	bl	80021d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <MX_I2C1_Init+0x74>)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f002 fb9d 	bl	80046dc <HAL_I2CEx_ConfigDigitalFilter>
 8001fa2:	1e03      	subs	r3, r0, #0
 8001fa4:	d001      	beq.n	8001faa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fa6:	f000 f913 	bl	80021d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000050 	.word	0x20000050
 8001fb4:	40005400 	.word	0x40005400
 8001fb8:	2000090e 	.word	0x2000090e

08001fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc2:	240c      	movs	r4, #12
 8001fc4:	193b      	adds	r3, r7, r4
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	2314      	movs	r3, #20
 8001fca:	001a      	movs	r2, r3
 8001fcc:	2100      	movs	r1, #0
 8001fce:	f003 f9a1 	bl	8005314 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <MX_GPIO_Init+0xa8>)
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <MX_GPIO_Init+0xa8>)
 8001fd8:	2180      	movs	r1, #128	; 0x80
 8001fda:	03c9      	lsls	r1, r1, #15
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	615a      	str	r2, [r3, #20]
 8001fe0:	4b20      	ldr	r3, [pc, #128]	; (8002064 <MX_GPIO_Init+0xa8>)
 8001fe2:	695a      	ldr	r2, [r3, #20]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	03db      	lsls	r3, r3, #15
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <MX_GPIO_Init+0xa8>)
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <MX_GPIO_Init+0xa8>)
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0289      	lsls	r1, r1, #10
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	615a      	str	r2, [r3, #20]
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_GPIO_Init+0xa8>)
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	029b      	lsls	r3, r3, #10
 8002004:	4013      	ands	r3, r2
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <MX_GPIO_Init+0xa8>)
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <MX_GPIO_Init+0xa8>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	02c9      	lsls	r1, r1, #11
 8002014:	430a      	orrs	r2, r1
 8002016:	615a      	str	r2, [r3, #20]
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <MX_GPIO_Init+0xa8>)
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	02db      	lsls	r3, r3, #11
 8002020:	4013      	ands	r3, r2
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002026:	2390      	movs	r3, #144	; 0x90
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	2200      	movs	r2, #0
 800202c:	2120      	movs	r1, #32
 800202e:	0018      	movs	r0, r3
 8002030:	f001 fd8e 	bl	8003b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002034:	0021      	movs	r1, r4
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2220      	movs	r2, #32
 800203a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2201      	movs	r2, #1
 8002040:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	187b      	adds	r3, r7, r1
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	187b      	adds	r3, r7, r1
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800204e:	187a      	adds	r2, r7, r1
 8002050:	2390      	movs	r3, #144	; 0x90
 8002052:	05db      	lsls	r3, r3, #23
 8002054:	0011      	movs	r1, r2
 8002056:	0018      	movs	r0, r3
 8002058:	f001 fc02 	bl	8003860 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b009      	add	sp, #36	; 0x24
 8002062:	bd90      	pop	{r4, r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <CAN_send_packet>:

static void CAN_send_packet(	CAN_HandleTypeDef* hcan,
								CAN_TxHeaderTypeDef* TxHeader,
								uint8_t* TxData,
								uint8_t data_len	)
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	001a      	movs	r2, r3
 8002076:	1cfb      	adds	r3, r7, #3
 8002078:	701a      	strb	r2, [r3, #0]
	uint32_t TxMailbox;

	HAL_StatusTypeDef CAN_status;

	TxHeader->DLC = data_len;
 800207a:	1cfb      	adds	r3, r7, #3
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	611a      	str	r2, [r3, #16]

	CAN_status = HAL_CAN_AddTxMessage(hcan, TxHeader, TxData, &TxMailbox);
 8002082:	2317      	movs	r3, #23
 8002084:	18fc      	adds	r4, r7, r3
 8002086:	2310      	movs	r3, #16
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fea4 	bl	8002ddc <HAL_CAN_AddTxMessage>
 8002094:	0003      	movs	r3, r0
 8002096:	7023      	strb	r3, [r4, #0]

	// IMPORTANT - must wait for CAN bytes to be sent before sending next section of bytes
	while(HAL_CAN_IsTxMessagePending(hcan, TxMailbox));
 8002098:	46c0      	nop			; (mov r8, r8)
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0011      	movs	r1, r2
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 ff6d 	bl	8002f80 <HAL_CAN_IsTxMessagePending>
 80020a6:	1e03      	subs	r3, r0, #0
 80020a8:	d1f7      	bne.n	800209a <CAN_send_packet+0x32>

	if (CAN_status != HAL_OK)
 80020aa:	2317      	movs	r3, #23
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <CAN_send_packet+0x58>
	{
	HAL_CAN_GetError(hcan);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f001 faea 	bl	8003690 <HAL_CAN_GetError>
	Error_Handler();
 80020bc:	f000 f888 	bl	80021d0 <Error_Handler>
	}
}
 80020c0:	46c0      	nop			; (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b007      	add	sp, #28
 80020c6:	bd90      	pop	{r4, r7, pc}

080020c8 <CAN_send_start>:

static void CAN_send_start(CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* TxHeader)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	uint8_t TxData = 0xff;
 80020d2:	210f      	movs	r1, #15
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	22ff      	movs	r2, #255	; 0xff
 80020d8:	701a      	strb	r2, [r3, #0]
	CAN_send_packet(hcan, TxHeader, &TxData, START_MESSAGE_LEN);
 80020da:	187a      	adds	r2, r7, r1
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	2301      	movs	r3, #1
 80020e2:	f7ff ffc1 	bl	8002068 <CAN_send_packet>
}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	46bd      	mov	sp, r7
 80020ea:	b004      	add	sp, #16
 80020ec:	bd80      	pop	{r7, pc}

080020ee <CAN_send_stop>:

static void CAN_send_stop(CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* TxHeader)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
	uint8_t TxData = 0xaa;
 80020f8:	210f      	movs	r1, #15
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	22aa      	movs	r2, #170	; 0xaa
 80020fe:	701a      	strb	r2, [r3, #0]
	CAN_send_packet(hcan, TxHeader, &TxData, STOP_MESSAGE_LEN);
 8002100:	187a      	adds	r2, r7, r1
 8002102:	6839      	ldr	r1, [r7, #0]
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	2301      	movs	r3, #1
 8002108:	f7ff ffae 	bl	8002068 <CAN_send_packet>
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}

08002114 <CAN_send_buffer>:

static void CAN_send_buffer(	CAN_HandleTypeDef* hcan,
								CAN_TxHeaderTypeDef* TxHeader,
								uint8_t* buffer,
								uint8_t buffer_len)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	001a      	movs	r2, r3
 8002122:	1cfb      	adds	r3, r7, #3
 8002124:	701a      	strb	r2, [r3, #0]
	// iterate through bytes of data and send over CAN
	CAN_send_start(hcan, TxHeader);
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	0011      	movs	r1, r2
 800212c:	0018      	movs	r0, r3
 800212e:	f7ff ffcb 	bl	80020c8 <CAN_send_start>
	//############################################################################################################
	TxHeader->DLC = 8;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2208      	movs	r2, #8
 8002136:	611a      	str	r2, [r3, #16]
	for(int mem_offset = 0; mem_offset < buffer_len; mem_offset += CAN_PACKET_LEN)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e00a      	b.n	8002154 <CAN_send_buffer+0x40>
	{
	  CAN_send_packet(hcan, TxHeader, buffer+mem_offset, CAN_PACKET_LEN);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	18d2      	adds	r2, r2, r3
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	2308      	movs	r3, #8
 800214a:	f7ff ff8d 	bl	8002068 <CAN_send_packet>
	for(int mem_offset = 0; mem_offset < buffer_len; mem_offset += CAN_PACKET_LEN)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	3308      	adds	r3, #8
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	1cfb      	adds	r3, r7, #3
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	429a      	cmp	r2, r3
 800215c:	dbef      	blt.n	800213e <CAN_send_buffer+0x2a>
	}

	CAN_send_stop(hcan, TxHeader);
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	0011      	movs	r1, r2
 8002164:	0018      	movs	r0, r3
 8002166:	f7ff ffc2 	bl	80020ee <CAN_send_stop>
}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b006      	add	sp, #24
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_CAN_RxFifo0MsgPendingCallback>:
//-------------------------------------------------------------------------------------------------------------------------



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800217e:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	2100      	movs	r1, #0
 8002184:	f000 ff23 	bl	8002fce <HAL_CAN_GetRxMessage>
 8002188:	1e03      	subs	r3, r0, #0
 800218a:	d10e      	bne.n	80021aa <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
  {
	  if( rx_header.StdId == SERVER_CAN_ID) // check for messages from central server
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d10a      	bne.n	80021aa <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
	  {
		  if( rx_data[0] == SENSOR_NODE_CAN_ID )
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b20      	cmp	r3, #32
 800219a:	d103      	bne.n	80021a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
		  {
			  sensor_node_state = SENSOR_NODE_TRANSMIT_STATE;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
			  sensor_node_state = SENSOR_NODE_RECEIVE_STATE;
		  }

	  }
  }
}
 80021a2:	e002      	b.n	80021aa <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
			  sensor_node_state = SENSOR_NODE_RECEIVE_STATE;
 80021a4:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	200000e8 	.word	0x200000e8
 80021b8:	200000cc 	.word	0x200000cc
 80021bc:	20000008 	.word	0x20000008

080021c0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d4:	b672      	cpsid	i
}
 80021d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <Error_Handler+0x8>
	...

080021dc <MPU6050Init>:
#include "MPU6050.h"

I2C_HandleTypeDef *mpui2c;
struct MPU6050 *mpu;

uint32_t MPU6050Init(I2C_HandleTypeDef *i2cP, struct MPU6050 *mpuP, uint8_t dlpf_cfg, uint8_t fs_sel, uint8_t afs_sel, uint8_t clk_sel){
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	0019      	movs	r1, r3
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	1dbb      	adds	r3, r7, #6
 80021ee:	1c0a      	adds	r2, r1, #0
 80021f0:	701a      	strb	r2, [r3, #0]
	mpui2c = i2cP;
 80021f2:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <MPU6050Init+0xc4>)
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]
	mpu = mpuP;
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <MPU6050Init+0xc8>)
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	601a      	str	r2, [r3, #0]
	mpu->address = MPU6050_ADDRESS;
 80021fe:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <MPU6050Init+0xc8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	22d0      	movs	r2, #208	; 0xd0
 8002204:	701a      	strb	r2, [r3, #0]
	mpu->DLPF_CFG = dlpf_cfg & 0x07;
 8002206:	4b27      	ldr	r3, [pc, #156]	; (80022a4 <MPU6050Init+0xc8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1dfa      	adds	r2, r7, #7
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	2107      	movs	r1, #7
 8002210:	400a      	ands	r2, r1
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	705a      	strb	r2, [r3, #1]
	mpu->FS_SEL = fs_sel & 0x03;
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <MPU6050Init+0xc8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	1dba      	adds	r2, r7, #6
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	2103      	movs	r1, #3
 8002220:	400a      	ands	r2, r1
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	709a      	strb	r2, [r3, #2]
	mpu->AFS_SEL = afs_sel & 0x03;
 8002226:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <MPU6050Init+0xc8>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	2318      	movs	r3, #24
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2103      	movs	r1, #3
 8002232:	400b      	ands	r3, r1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	70d3      	strb	r3, [r2, #3]
	mpu->CLK_SEL = clk_sel & 0x07;
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <MPU6050Init+0xc8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	221c      	movs	r2, #28
 800223e:	18ba      	adds	r2, r7, r2
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	2107      	movs	r1, #7
 8002244:	400a      	ands	r2, r1
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	711a      	strb	r2, [r3, #4]
	mpu->check = 0;
 800224a:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <MPU6050Init+0xc8>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	715a      	strb	r2, [r3, #5]
	mpu->accelX = 0;
 8002252:	4b14      	ldr	r3, [pc, #80]	; (80022a4 <MPU6050Init+0xc8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	80da      	strh	r2, [r3, #6]
	mpu->accelY = 0;
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <MPU6050Init+0xc8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	811a      	strh	r2, [r3, #8]
	mpu->accelZ = 0;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <MPU6050Init+0xc8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2200      	movs	r2, #0
 8002268:	815a      	strh	r2, [r3, #10]
	mpu->gyroX = 0;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MPU6050Init+0xc8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	819a      	strh	r2, [r3, #12]
	mpu->gyroY = 0;
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MPU6050Init+0xc8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	81da      	strh	r2, [r3, #14]
	mpu->gyroZ = 0;
 800227a:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <MPU6050Init+0xc8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2200      	movs	r2, #0
 8002280:	821a      	strh	r2, [r3, #16]
	mpu->temp = 0.0;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MPU6050Init+0xc8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	615a      	str	r2, [r3, #20]
	MPU6050BufferReset();
 800228a:	f000 f947 	bl	800251c <MPU6050BufferReset>
	MPU6050Start();
 800228e:	f000 f80b 	bl	80022a8 <MPU6050Start>
	MPU6050Check();
 8002292:	f000 f95d 	bl	8002550 <MPU6050Check>
	return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	200000f0 	.word	0x200000f0
 80022a4:	200000f4 	.word	0x200000f4

080022a8 <MPU6050Start>:

void MPU6050Start(void){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	MPU6050WriteRegister(MPU6050_CONFIG, mpu->DLPF_CFG);
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MPU6050Start+0x4c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	785b      	ldrb	r3, [r3, #1]
 80022b2:	0019      	movs	r1, r3
 80022b4:	201a      	movs	r0, #26
 80022b6:	f000 f8cf 	bl	8002458 <MPU6050WriteRegister>
	MPU6050WriteRegister(MPU6050_GYRO_CONFIG, mpu->FS_SEL << 3);
 80022ba:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <MPU6050Start+0x4c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	789b      	ldrb	r3, [r3, #2]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	0019      	movs	r1, r3
 80022c6:	201b      	movs	r0, #27
 80022c8:	f000 f8c6 	bl	8002458 <MPU6050WriteRegister>
	MPU6050WriteRegister(MPU6050_ACCEL_CONFIG, mpu->AFS_SEL << 3);
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MPU6050Start+0x4c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	78db      	ldrb	r3, [r3, #3]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	0019      	movs	r1, r3
 80022d8:	201c      	movs	r0, #28
 80022da:	f000 f8bd 	bl	8002458 <MPU6050WriteRegister>
	MPU6050WriteRegister(MPU6050_PWR_MGMT_1, mpu->CLK_SEL);
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <MPU6050Start+0x4c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	791b      	ldrb	r3, [r3, #4]
 80022e4:	0019      	movs	r1, r3
 80022e6:	206b      	movs	r0, #107	; 0x6b
 80022e8:	f000 f8b6 	bl	8002458 <MPU6050WriteRegister>
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	200000f4 	.word	0x200000f4

080022f8 <MPU6050UpdateAccel>:

void MPU6050UpdateAccel(void){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	MPU6050ReadRegister(MPU6050_ACCEL_XOUT_H, 6);
 80022fc:	2106      	movs	r1, #6
 80022fe:	203b      	movs	r0, #59	; 0x3b
 8002300:	f000 f8d6 	bl	80024b0 <MPU6050ReadRegister>
	mpu->accelX = mpu->buff[0] << 8 | mpu->buff[1];
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	7e1b      	ldrb	r3, [r3, #24]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b219      	sxth	r1, r3
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	7e5b      	ldrb	r3, [r3, #25]
 8002314:	b21a      	sxth	r2, r3
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	b212      	sxth	r2, r2
 800231e:	80da      	strh	r2, [r3, #6]
	mpu->accelY = mpu->buff[2] << 8 | mpu->buff[3];
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	7e9b      	ldrb	r3, [r3, #26]
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	b219      	sxth	r1, r3
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	7edb      	ldrb	r3, [r3, #27]
 8002330:	b21a      	sxth	r2, r3
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	b212      	sxth	r2, r2
 800233a:	811a      	strh	r2, [r3, #8]
	mpu->accelZ = mpu->buff[4] << 8 | mpu->buff[5];
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	7f1b      	ldrb	r3, [r3, #28]
 8002342:	021b      	lsls	r3, r3, #8
 8002344:	b219      	sxth	r1, r3
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	7f5b      	ldrb	r3, [r3, #29]
 800234c:	b21a      	sxth	r2, r3
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <MPU6050UpdateAccel+0x6c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	b212      	sxth	r2, r2
 8002356:	815a      	strh	r2, [r3, #10]
	MPU6050BufferReset();
 8002358:	f000 f8e0 	bl	800251c <MPU6050BufferReset>
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	200000f4 	.word	0x200000f4

08002368 <MPU6050UpdateTemp>:

void MPU6050UpdateTemp(void){
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	af00      	add	r7, sp, #0
	MPU6050ReadRegister(MPU6050_TEMP_OUT_H, 2);
 800236c:	2102      	movs	r1, #2
 800236e:	2041      	movs	r0, #65	; 0x41
 8002370:	f000 f89e 	bl	80024b0 <MPU6050ReadRegister>
	mpu->temp = ((((float)(mpu->buff[0] << 8 | mpu->buff[1])) / 340) + 36.53) / 10;
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MPU6050UpdateTemp+0x6c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	7e1b      	ldrb	r3, [r3, #24]
 800237a:	021a      	lsls	r2, r3, #8
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MPU6050UpdateTemp+0x6c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	7e5b      	ldrb	r3, [r3, #25]
 8002382:	4313      	orrs	r3, r2
 8002384:	0018      	movs	r0, r3
 8002386:	f7fe f94f 	bl	8000628 <__aeabi_i2f>
 800238a:	1c03      	adds	r3, r0, #0
 800238c:	4912      	ldr	r1, [pc, #72]	; (80023d8 <MPU6050UpdateTemp+0x70>)
 800238e:	1c18      	adds	r0, r3, #0
 8002390:	f7fe f830 	bl	80003f4 <__aeabi_fdiv>
 8002394:	1c03      	adds	r3, r0, #0
 8002396:	1c18      	adds	r0, r3, #0
 8002398:	f7ff f816 	bl	80013c8 <__aeabi_f2d>
 800239c:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <MPU6050UpdateTemp+0x74>)
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <MPU6050UpdateTemp+0x78>)
 80023a0:	f7fe f994 	bl	80006cc <__aeabi_dadd>
 80023a4:	0002      	movs	r2, r0
 80023a6:	000b      	movs	r3, r1
 80023a8:	0010      	movs	r0, r2
 80023aa:	0019      	movs	r1, r3
 80023ac:	2200      	movs	r2, #0
 80023ae:	4b0d      	ldr	r3, [pc, #52]	; (80023e4 <MPU6050UpdateTemp+0x7c>)
 80023b0:	f7fe fcec 	bl	8000d8c <__aeabi_ddiv>
 80023b4:	0002      	movs	r2, r0
 80023b6:	000b      	movs	r3, r1
 80023b8:	4906      	ldr	r1, [pc, #24]	; (80023d4 <MPU6050UpdateTemp+0x6c>)
 80023ba:	680c      	ldr	r4, [r1, #0]
 80023bc:	0010      	movs	r0, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	f7ff f84a 	bl	8001458 <__aeabi_d2f>
 80023c4:	1c03      	adds	r3, r0, #0
 80023c6:	6163      	str	r3, [r4, #20]
	MPU6050BufferReset();
 80023c8:	f000 f8a8 	bl	800251c <MPU6050BufferReset>
}
 80023cc:	46c0      	nop			; (mov r8, r8)
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bdb0      	pop	{r4, r5, r7, pc}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	200000f4 	.word	0x200000f4
 80023d8:	43aa0000 	.word	0x43aa0000
 80023dc:	0a3d70a4 	.word	0x0a3d70a4
 80023e0:	404243d7 	.word	0x404243d7
 80023e4:	40240000 	.word	0x40240000

080023e8 <MPU6050UpdateGyro>:

void MPU6050UpdateGyro(void){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	MPU6050ReadRegister(MPU6050_GYRO_XOUT_H, 6);
 80023ec:	2106      	movs	r1, #6
 80023ee:	2043      	movs	r0, #67	; 0x43
 80023f0:	f000 f85e 	bl	80024b0 <MPU6050ReadRegister>
	mpu->gyroX = mpu->buff[0] << 8 | mpu->buff[1];
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	7e1b      	ldrb	r3, [r3, #24]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	b219      	sxth	r1, r3
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	7e5b      	ldrb	r3, [r3, #25]
 8002404:	b21a      	sxth	r2, r3
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	b212      	sxth	r2, r2
 800240e:	819a      	strh	r2, [r3, #12]
	mpu->gyroY = mpu->buff[2] << 8 | mpu->buff[3];
 8002410:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	7e9b      	ldrb	r3, [r3, #26]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	b219      	sxth	r1, r3
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	7edb      	ldrb	r3, [r3, #27]
 8002420:	b21a      	sxth	r2, r3
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	b212      	sxth	r2, r2
 800242a:	81da      	strh	r2, [r3, #14]
	mpu->gyroZ = mpu->buff[4] << 8 | mpu->buff[5];
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	7f1b      	ldrb	r3, [r3, #28]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	b219      	sxth	r1, r3
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	7f5b      	ldrb	r3, [r3, #29]
 800243c:	b21a      	sxth	r2, r3
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <MPU6050UpdateGyro+0x6c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	b212      	sxth	r2, r2
 8002446:	821a      	strh	r2, [r3, #16]
	MPU6050BufferReset();
 8002448:	f000 f868 	bl	800251c <MPU6050BufferReset>
}
 800244c:	46c0      	nop			; (mov r8, r8)
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	200000f4 	.word	0x200000f4

08002458 <MPU6050WriteRegister>:

void MPU6050WriteRegister(uint8_t address, uint8_t byte){
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af02      	add	r7, sp, #8
 800245e:	0002      	movs	r2, r0
 8002460:	1dfb      	adds	r3, r7, #7
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	1dbb      	adds	r3, r7, #6
 8002466:	1c0a      	adds	r2, r1, #0
 8002468:	701a      	strb	r2, [r3, #0]
	mpu->buff[0] = address;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MPU6050WriteRegister+0x50>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1dfa      	adds	r2, r7, #7
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	761a      	strb	r2, [r3, #24]
	mpu->buff[1] = byte;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MPU6050WriteRegister+0x50>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	1dba      	adds	r2, r7, #6
 800247a:	7812      	ldrb	r2, [r2, #0]
 800247c:	765a      	strb	r2, [r3, #25]
	HAL_I2C_Master_Transmit(mpui2c, mpu->address, mpu->buff, 2, 100);
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <MPU6050WriteRegister+0x54>)
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MPU6050WriteRegister+0x50>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b299      	uxth	r1, r3
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <MPU6050WriteRegister+0x50>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3318      	adds	r3, #24
 8002490:	001a      	movs	r2, r3
 8002492:	2364      	movs	r3, #100	; 0x64
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2302      	movs	r3, #2
 8002498:	f001 fc0e 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	MPU6050BufferReset();
 800249c:	f000 f83e 	bl	800251c <MPU6050BufferReset>
}
 80024a0:	46c0      	nop			; (mov r8, r8)
 80024a2:	46bd      	mov	sp, r7
 80024a4:	b002      	add	sp, #8
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	200000f4 	.word	0x200000f4
 80024ac:	200000f0 	.word	0x200000f0

080024b0 <MPU6050ReadRegister>:

void MPU6050ReadRegister(uint8_t address, uint16_t val){
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af02      	add	r7, sp, #8
 80024b6:	0002      	movs	r2, r0
 80024b8:	1dfb      	adds	r3, r7, #7
 80024ba:	701a      	strb	r2, [r3, #0]
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	1c0a      	adds	r2, r1, #0
 80024c0:	801a      	strh	r2, [r3, #0]
	mpu->buff[0] = address;
 80024c2:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MPU6050ReadRegister+0x64>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	1dfa      	adds	r2, r7, #7
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	761a      	strb	r2, [r3, #24]
	HAL_I2C_Master_Transmit(mpui2c, mpu->address, mpu->buff, 1, 100);
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <MPU6050ReadRegister+0x68>)
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <MPU6050ReadRegister+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b299      	uxth	r1, r3
 80024d8:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MPU6050ReadRegister+0x64>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	3318      	adds	r3, #24
 80024de:	001a      	movs	r2, r3
 80024e0:	2364      	movs	r3, #100	; 0x64
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2301      	movs	r3, #1
 80024e6:	f001 fbe7 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpui2c, mpu->address, mpu->buff, val, 100);
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MPU6050ReadRegister+0x68>)
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MPU6050ReadRegister+0x64>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b299      	uxth	r1, r3
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <MPU6050ReadRegister+0x64>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3318      	adds	r3, #24
 80024fc:	001a      	movs	r2, r3
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	2464      	movs	r4, #100	; 0x64
 8002504:	9400      	str	r4, [sp, #0]
 8002506:	f001 fcdf 	bl	8003ec8 <HAL_I2C_Master_Receive>
}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	46bd      	mov	sp, r7
 800250e:	b003      	add	sp, #12
 8002510:	bd90      	pop	{r4, r7, pc}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	200000f4 	.word	0x200000f4
 8002518:	200000f0 	.word	0x200000f0

0800251c <MPU6050BufferReset>:

void MPU6050BufferReset(void){
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	for(int i = 0; i < MPU6050_STRUCT_BUFFER_LEN; i++){
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	e009      	b.n	800253c <MPU6050BufferReset+0x20>
		mpu->buff[i] = 0;
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <MPU6050BufferReset+0x30>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	18d3      	adds	r3, r2, r3
 8002530:	3318      	adds	r3, #24
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < MPU6050_STRUCT_BUFFER_LEN; i++){
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3301      	adds	r3, #1
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b05      	cmp	r3, #5
 8002540:	ddf2      	ble.n	8002528 <MPU6050BufferReset+0xc>
	}
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200000f4 	.word	0x200000f4

08002550 <MPU6050Check>:

void MPU6050Check(void){
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af02      	add	r7, sp, #8
	mpu->buff[0] = MPU6050_WHO_AM_I;
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <MPU6050Check+0x60>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2275      	movs	r2, #117	; 0x75
 800255c:	761a      	strb	r2, [r3, #24]
	HAL_I2C_Master_Transmit(mpui2c, mpu->address, mpu->buff, 1, 100);
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <MPU6050Check+0x64>)
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <MPU6050Check+0x60>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b299      	uxth	r1, r3
 800256a:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <MPU6050Check+0x60>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3318      	adds	r3, #24
 8002570:	001a      	movs	r2, r3
 8002572:	2364      	movs	r3, #100	; 0x64
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	2301      	movs	r3, #1
 8002578:	f001 fb9e 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpui2c, mpu->address, mpu->buff, 1, 100);
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <MPU6050Check+0x64>)
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <MPU6050Check+0x60>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b299      	uxth	r1, r3
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <MPU6050Check+0x60>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3318      	adds	r3, #24
 800258e:	001a      	movs	r2, r3
 8002590:	2364      	movs	r3, #100	; 0x64
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2301      	movs	r3, #1
 8002596:	f001 fc97 	bl	8003ec8 <HAL_I2C_Master_Receive>
	mpu->check = mpu->buff[0];
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <MPU6050Check+0x60>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <MPU6050Check+0x60>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	7e12      	ldrb	r2, [r2, #24]
 80025a4:	715a      	strb	r2, [r3, #5]
	MPU6050BufferReset();
 80025a6:	f7ff ffb9 	bl	800251c <MPU6050BufferReset>
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200000f4 	.word	0x200000f4
 80025b4:	200000f0 	.word	0x200000f0

080025b8 <MPU6050_check>:

uint8_t MPU6050_check(void){
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af02      	add	r7, sp, #8
	mpu->buff[0] = MPU6050_CONFIG;
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <MPU6050_check+0x68>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	221a      	movs	r2, #26
 80025c4:	761a      	strb	r2, [r3, #24]
	HAL_I2C_Master_Transmit(mpui2c, mpu->address, mpu->buff, 1, 100);
 80025c6:	4b17      	ldr	r3, [pc, #92]	; (8002624 <MPU6050_check+0x6c>)
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MPU6050_check+0x68>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b299      	uxth	r1, r3
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <MPU6050_check+0x68>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3318      	adds	r3, #24
 80025d8:	001a      	movs	r2, r3
 80025da:	2364      	movs	r3, #100	; 0x64
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2301      	movs	r3, #1
 80025e0:	f001 fb6a 	bl	8003cb8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpui2c, mpu->address, mpu->buff, 1, 100);
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MPU6050_check+0x6c>)
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <MPU6050_check+0x68>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b299      	uxth	r1, r3
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <MPU6050_check+0x68>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	3318      	adds	r3, #24
 80025f6:	001a      	movs	r2, r3
 80025f8:	2364      	movs	r3, #100	; 0x64
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	f001 fc63 	bl	8003ec8 <HAL_I2C_Master_Receive>
	mpu->check = mpu->buff[0];
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <MPU6050_check+0x68>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <MPU6050_check+0x68>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	7e12      	ldrb	r2, [r2, #24]
 800260c:	715a      	strb	r2, [r3, #5]
	MPU6050BufferReset();
 800260e:	f7ff ff85 	bl	800251c <MPU6050BufferReset>
	return mpu->check;
 8002612:	4b03      	ldr	r3, [pc, #12]	; (8002620 <MPU6050_check+0x68>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	795b      	ldrb	r3, [r3, #5]
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	200000f4 	.word	0x200000f4
 8002624:	200000f0 	.word	0x200000f0

08002628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_MspInit+0x44>)
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_MspInit+0x44>)
 8002634:	2101      	movs	r1, #1
 8002636:	430a      	orrs	r2, r1
 8002638:	619a      	str	r2, [r3, #24]
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_MspInit+0x44>)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2201      	movs	r2, #1
 8002640:	4013      	ands	r3, r2
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_MspInit+0x44>)
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_MspInit+0x44>)
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	0549      	lsls	r1, r1, #21
 8002650:	430a      	orrs	r2, r1
 8002652:	61da      	str	r2, [r3, #28]
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_MspInit+0x44>)
 8002656:	69da      	ldr	r2, [r3, #28]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	055b      	lsls	r3, r3, #21
 800265c:	4013      	ands	r3, r2
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	46bd      	mov	sp, r7
 8002666:	b002      	add	sp, #8
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	40021000 	.word	0x40021000

08002670 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b08b      	sub	sp, #44	; 0x2c
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	2414      	movs	r4, #20
 800267a:	193b      	adds	r3, r7, r4
 800267c:	0018      	movs	r0, r3
 800267e:	2314      	movs	r3, #20
 8002680:	001a      	movs	r2, r3
 8002682:	2100      	movs	r1, #0
 8002684:	f002 fe46 	bl	8005314 <memset>
  if(hcan->Instance==CAN)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <HAL_CAN_MspInit+0xa0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d13a      	bne.n	8002708 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_CAN_MspInit+0xa4>)
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <HAL_CAN_MspInit+0xa4>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0489      	lsls	r1, r1, #18
 800269c:	430a      	orrs	r2, r1
 800269e:	61da      	str	r2, [r3, #28]
 80026a0:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <HAL_CAN_MspInit+0xa4>)
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	049b      	lsls	r3, r3, #18
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_CAN_MspInit+0xa4>)
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_CAN_MspInit+0xa4>)
 80026b4:	2180      	movs	r1, #128	; 0x80
 80026b6:	02c9      	lsls	r1, r1, #11
 80026b8:	430a      	orrs	r2, r1
 80026ba:	615a      	str	r2, [r3, #20]
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_CAN_MspInit+0xa4>)
 80026be:	695a      	ldr	r2, [r3, #20]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	02db      	lsls	r3, r3, #11
 80026c4:	4013      	ands	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026ca:	193b      	adds	r3, r7, r4
 80026cc:	22c0      	movs	r2, #192	; 0xc0
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	0021      	movs	r1, r4
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2202      	movs	r2, #2
 80026d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	2203      	movs	r2, #3
 80026e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80026e6:	187b      	adds	r3, r7, r1
 80026e8:	2204      	movs	r2, #4
 80026ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ec:	187b      	adds	r3, r7, r1
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_CAN_MspInit+0xa8>)
 80026f0:	0019      	movs	r1, r3
 80026f2:	0010      	movs	r0, r2
 80026f4:	f001 f8b4 	bl	8003860 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80026f8:	2200      	movs	r2, #0
 80026fa:	2100      	movs	r1, #0
 80026fc:	201e      	movs	r0, #30
 80026fe:	f001 f87d 	bl	80037fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002702:	201e      	movs	r0, #30
 8002704:	f001 f88f 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b00b      	add	sp, #44	; 0x2c
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	40006400 	.word	0x40006400
 8002714:	40021000 	.word	0x40021000
 8002718:	48000400 	.word	0x48000400

0800271c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b08b      	sub	sp, #44	; 0x2c
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	2414      	movs	r4, #20
 8002726:	193b      	adds	r3, r7, r4
 8002728:	0018      	movs	r0, r3
 800272a:	2314      	movs	r3, #20
 800272c:	001a      	movs	r2, r3
 800272e:	2100      	movs	r1, #0
 8002730:	f002 fdf0 	bl	8005314 <memset>
  if(hi2c->Instance==I2C1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_I2C_MspInit+0x90>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d131      	bne.n	80027a2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_I2C_MspInit+0x94>)
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_I2C_MspInit+0x94>)
 8002744:	2180      	movs	r1, #128	; 0x80
 8002746:	02c9      	lsls	r1, r1, #11
 8002748:	430a      	orrs	r2, r1
 800274a:	615a      	str	r2, [r3, #20]
 800274c:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <HAL_I2C_MspInit+0x94>)
 800274e:	695a      	ldr	r2, [r3, #20]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	02db      	lsls	r3, r3, #11
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800275a:	0021      	movs	r1, r4
 800275c:	187b      	adds	r3, r7, r1
 800275e:	22c0      	movs	r2, #192	; 0xc0
 8002760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002762:	187b      	adds	r3, r7, r1
 8002764:	2212      	movs	r2, #18
 8002766:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	187b      	adds	r3, r7, r1
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276e:	187b      	adds	r3, r7, r1
 8002770:	2203      	movs	r2, #3
 8002772:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002774:	187b      	adds	r3, r7, r1
 8002776:	2201      	movs	r2, #1
 8002778:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	187b      	adds	r3, r7, r1
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <HAL_I2C_MspInit+0x98>)
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f001 f86d 	bl	8003860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_I2C_MspInit+0x94>)
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_I2C_MspInit+0x94>)
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	0389      	lsls	r1, r1, #14
 8002790:	430a      	orrs	r2, r1
 8002792:	61da      	str	r2, [r3, #28]
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_I2C_MspInit+0x94>)
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	039b      	lsls	r3, r3, #14
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027a2:	46c0      	nop			; (mov r8, r8)
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b00b      	add	sp, #44	; 0x2c
 80027a8:	bd90      	pop	{r4, r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	40005400 	.word	0x40005400
 80027b0:	40021000 	.word	0x40021000
 80027b4:	48000400 	.word	0x48000400

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <NMI_Handler+0x4>

080027be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <HardFault_Handler+0x4>

080027c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027dc:	f000 f888 	bl	80028f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80027ec:	4b03      	ldr	r3, [pc, #12]	; (80027fc <CEC_CAN_IRQHandler+0x14>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f000 fd42 	bl	8003278 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	200000a4 	.word	0x200000a4

08002800 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800280c:	480d      	ldr	r0, [pc, #52]	; (8002844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800280e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002810:	f7ff fff6 	bl	8002800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002814:	480c      	ldr	r0, [pc, #48]	; (8002848 <LoopForever+0x6>)
  ldr r1, =_edata
 8002816:	490d      	ldr	r1, [pc, #52]	; (800284c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002818:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <LoopForever+0xe>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800281c:	e002      	b.n	8002824 <LoopCopyDataInit>

0800281e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002822:	3304      	adds	r3, #4

08002824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002828:	d3f9      	bcc.n	800281e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800282c:	4c0a      	ldr	r4, [pc, #40]	; (8002858 <LoopForever+0x16>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002830:	e001      	b.n	8002836 <LoopFillZerobss>

08002832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002834:	3204      	adds	r2, #4

08002836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002838:	d3fb      	bcc.n	8002832 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800283a:	f002 fd73 	bl	8005324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800283e:	f7ff f9b3 	bl	8001ba8 <main>

08002842 <LoopForever>:

LoopForever:
    b LoopForever
 8002842:	e7fe      	b.n	8002842 <LoopForever>
  ldr   r0, =_estack
 8002844:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800284c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002850:	08005498 	.word	0x08005498
  ldr r2, =_sbss
 8002854:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002858:	200000fc 	.word	0x200000fc

0800285c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800285c:	e7fe      	b.n	800285c <ADC1_COMP_IRQHandler>
	...

08002860 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <HAL_Init+0x24>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_Init+0x24>)
 800286a:	2110      	movs	r1, #16
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002870:	2000      	movs	r0, #0
 8002872:	f000 f809 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002876:	f7ff fed7 	bl	8002628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	40022000 	.word	0x40022000

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002890:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <HAL_InitTick+0x5c>)
 8002892:	681c      	ldr	r4, [r3, #0]
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_InitTick+0x60>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	0019      	movs	r1, r3
 800289a:	23fa      	movs	r3, #250	; 0xfa
 800289c:	0098      	lsls	r0, r3, #2
 800289e:	f7fd fc33 	bl	8000108 <__udivsi3>
 80028a2:	0003      	movs	r3, r0
 80028a4:	0019      	movs	r1, r3
 80028a6:	0020      	movs	r0, r4
 80028a8:	f7fd fc2e 	bl	8000108 <__udivsi3>
 80028ac:	0003      	movs	r3, r0
 80028ae:	0018      	movs	r0, r3
 80028b0:	f000 ffc9 	bl	8003846 <HAL_SYSTICK_Config>
 80028b4:	1e03      	subs	r3, r0, #0
 80028b6:	d001      	beq.n	80028bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e00f      	b.n	80028dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d80b      	bhi.n	80028da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	2301      	movs	r3, #1
 80028c6:	425b      	negs	r3, r3
 80028c8:	2200      	movs	r2, #0
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 ff96 	bl	80037fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_InitTick+0x64>)
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b003      	add	sp, #12
 80028e2:	bd90      	pop	{r4, r7, pc}
 80028e4:	2000000c 	.word	0x2000000c
 80028e8:	20000014 	.word	0x20000014
 80028ec:	20000010 	.word	0x20000010

080028f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_IncTick+0x1c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	001a      	movs	r2, r3
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_IncTick+0x20>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	18d2      	adds	r2, r2, r3
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_IncTick+0x20>)
 8002902:	601a      	str	r2, [r3, #0]
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	20000014 	.word	0x20000014
 8002910:	200000f8 	.word	0x200000f8

08002914 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b02      	ldr	r3, [pc, #8]	; (8002924 <HAL_GetTick+0x10>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	200000f8 	.word	0x200000f8

08002928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002930:	f7ff fff0 	bl	8002914 <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	3301      	adds	r3, #1
 8002940:	d005      	beq.n	800294e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002942:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HAL_Delay+0x44>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	001a      	movs	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	189b      	adds	r3, r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	f7ff ffe0 	bl	8002914 <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	429a      	cmp	r2, r3
 800295e:	d8f7      	bhi.n	8002950 <HAL_Delay+0x28>
  {
  }
}
 8002960:	46c0      	nop			; (mov r8, r8)
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b004      	add	sp, #16
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	20000014 	.word	0x20000014

08002970 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0f0      	b.n	8002b64 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2220      	movs	r2, #32
 8002986:	5c9b      	ldrb	r3, [r3, r2]
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d103      	bne.n	8002996 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	0018      	movs	r0, r3
 8002992:	f7ff fe6d 	bl	8002670 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	430a      	orrs	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a6:	f7ff ffb5 	bl	8002914 <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029ae:	e013      	b.n	80029d8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029b0:	f7ff ffb0 	bl	8002914 <HAL_GetTick>
 80029b4:	0002      	movs	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b0a      	cmp	r3, #10
 80029bc:	d90c      	bls.n	80029d8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	0292      	lsls	r2, r2, #10
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	2105      	movs	r1, #5
 80029d2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0c5      	b.n	8002b64 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	d0e5      	beq.n	80029b0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2102      	movs	r1, #2
 80029f0:	438a      	bics	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029f4:	f7ff ff8e 	bl	8002914 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029fc:	e013      	b.n	8002a26 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029fe:	f7ff ff89 	bl	8002914 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b0a      	cmp	r3, #10
 8002a0a:	d90c      	bls.n	8002a26 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	0292      	lsls	r2, r2, #10
 8002a14:	431a      	orrs	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	2105      	movs	r1, #5
 8002a20:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e09e      	b.n	8002b64 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d1e5      	bne.n	80029fe <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	7e1b      	ldrb	r3, [r3, #24]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d108      	bne.n	8002a4c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2180      	movs	r1, #128	; 0x80
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e007      	b.n	8002a5c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	438a      	bics	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7e5b      	ldrb	r3, [r3, #25]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d108      	bne.n	8002a76 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e007      	b.n	8002a86 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2140      	movs	r1, #64	; 0x40
 8002a82:	438a      	bics	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7e9b      	ldrb	r3, [r3, #26]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d108      	bne.n	8002aa0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2120      	movs	r1, #32
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e007      	b.n	8002ab0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2120      	movs	r1, #32
 8002aac:	438a      	bics	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	7edb      	ldrb	r3, [r3, #27]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d108      	bne.n	8002aca <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2110      	movs	r1, #16
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e007      	b.n	8002ada <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2110      	movs	r1, #16
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	7f1b      	ldrb	r3, [r3, #28]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d108      	bne.n	8002af4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2108      	movs	r1, #8
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e007      	b.n	8002b04 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2108      	movs	r1, #8
 8002b00:	438a      	bics	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	7f5b      	ldrb	r3, [r3, #29]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d108      	bne.n	8002b1e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2104      	movs	r1, #4
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e007      	b.n	8002b2e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2104      	movs	r1, #4
 8002b2a:	438a      	bics	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	0011      	movs	r1, r2
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	1e5a      	subs	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b004      	add	sp, #16
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b7c:	2013      	movs	r0, #19
 8002b7e:	183b      	adds	r3, r7, r0
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	2120      	movs	r1, #32
 8002b84:	5c52      	ldrb	r2, [r2, r1]
 8002b86:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b88:	0002      	movs	r2, r0
 8002b8a:	18bb      	adds	r3, r7, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d004      	beq.n	8002b9c <HAL_CAN_ConfigFilter+0x30>
 8002b92:	18bb      	adds	r3, r7, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d000      	beq.n	8002b9c <HAL_CAN_ConfigFilter+0x30>
 8002b9a:	e0cd      	b.n	8002d38 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	58d3      	ldr	r3, [r2, r3]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	0011      	movs	r1, r2
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	221f      	movs	r2, #31
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2201      	movs	r2, #1
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	0013      	movs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	2387      	movs	r3, #135	; 0x87
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	58d3      	ldr	r3, [r2, r3]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	43d2      	mvns	r2, r2
 8002bce:	401a      	ands	r2, r3
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	2387      	movs	r3, #135	; 0x87
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d129      	bne.n	8002c36 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	2383      	movs	r3, #131	; 0x83
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	58d3      	ldr	r3, [r2, r3]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	43d2      	mvns	r2, r2
 8002bee:	401a      	ands	r2, r3
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	2383      	movs	r3, #131	; 0x83
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c0c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3248      	adds	r2, #72	; 0x48
 8002c12:	00d2      	lsls	r2, r2, #3
 8002c14:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c2a:	6979      	ldr	r1, [r7, #20]
 8002c2c:	3348      	adds	r3, #72	; 0x48
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	18cb      	adds	r3, r1, r3
 8002c32:	3304      	adds	r3, #4
 8002c34:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d128      	bne.n	8002c90 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	2383      	movs	r3, #131	; 0x83
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	58d2      	ldr	r2, [r2, r3]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	0011      	movs	r1, r2
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	2383      	movs	r3, #131	; 0x83
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c66:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3248      	adds	r2, #72	; 0x48
 8002c6c:	00d2      	lsls	r2, r2, #3
 8002c6e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c84:	6979      	ldr	r1, [r7, #20]
 8002c86:	3348      	adds	r3, #72	; 0x48
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	18cb      	adds	r3, r1, r3
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10c      	bne.n	8002cb2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	2381      	movs	r3, #129	; 0x81
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	58d3      	ldr	r3, [r2, r3]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	43d2      	mvns	r2, r2
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	0011      	movs	r1, r2
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	2381      	movs	r3, #129	; 0x81
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	50d1      	str	r1, [r2, r3]
 8002cb0:	e00a      	b.n	8002cc8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	2381      	movs	r3, #129	; 0x81
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	58d2      	ldr	r2, [r2, r3]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	2381      	movs	r3, #129	; 0x81
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10c      	bne.n	8002cea <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	2385      	movs	r3, #133	; 0x85
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	58d3      	ldr	r3, [r2, r3]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	43d2      	mvns	r2, r2
 8002cdc:	401a      	ands	r2, r3
 8002cde:	0011      	movs	r1, r2
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	2385      	movs	r3, #133	; 0x85
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	50d1      	str	r1, [r2, r3]
 8002ce8:	e00a      	b.n	8002d00 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	2385      	movs	r3, #133	; 0x85
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	58d2      	ldr	r2, [r2, r3]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	2385      	movs	r3, #133	; 0x85
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10a      	bne.n	8002d1e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	2387      	movs	r3, #135	; 0x87
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	58d2      	ldr	r2, [r2, r3]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	0011      	movs	r1, r2
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	2387      	movs	r3, #135	; 0x87
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	58d3      	ldr	r3, [r2, r3]
 8002d26:	2201      	movs	r2, #1
 8002d28:	4393      	bics	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e007      	b.n	8002d48 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2280      	movs	r2, #128	; 0x80
 8002d3e:	02d2      	lsls	r2, r2, #11
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
  }
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b006      	add	sp, #24
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	5c9b      	ldrb	r3, [r3, r2]
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d12f      	bne.n	8002dc4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	2102      	movs	r1, #2
 8002d6a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	438a      	bics	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d7c:	f7ff fdca 	bl	8002914 <HAL_GetTick>
 8002d80:	0003      	movs	r3, r0
 8002d82:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d84:	e013      	b.n	8002dae <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d86:	f7ff fdc5 	bl	8002914 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b0a      	cmp	r3, #10
 8002d92:	d90c      	bls.n	8002dae <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	0292      	lsls	r2, r2, #10
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2220      	movs	r2, #32
 8002da6:	2105      	movs	r1, #5
 8002da8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e012      	b.n	8002dd4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	4013      	ands	r3, r2
 8002db8:	d1e5      	bne.n	8002d86 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e007      	b.n	8002dd4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	0312      	lsls	r2, r2, #12
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
  }
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dea:	201f      	movs	r0, #31
 8002dec:	183b      	adds	r3, r7, r0
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	2120      	movs	r1, #32
 8002df2:	5c52      	ldrb	r2, [r2, r1]
 8002df4:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dfe:	183b      	adds	r3, r7, r0
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d004      	beq.n	8002e10 <HAL_CAN_AddTxMessage+0x34>
 8002e06:	183b      	adds	r3, r7, r0
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d000      	beq.n	8002e10 <HAL_CAN_AddTxMessage+0x34>
 8002e0e:	e0ab      	b.n	8002f68 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	04db      	lsls	r3, r3, #19
 8002e16:	4013      	ands	r3, r2
 8002e18:	d10a      	bne.n	8002e30 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	051b      	lsls	r3, r3, #20
 8002e20:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e22:	d105      	bne.n	8002e30 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	055b      	lsls	r3, r3, #21
 8002e2a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e2c:	d100      	bne.n	8002e30 <HAL_CAN_AddTxMessage+0x54>
 8002e2e:	e092      	b.n	8002f56 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	0e1b      	lsrs	r3, r3, #24
 8002e34:	2203      	movs	r2, #3
 8002e36:	4013      	ands	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10c      	bne.n	8002e66 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4311      	orrs	r1, r2
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	3218      	adds	r2, #24
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	50d1      	str	r1, [r2, r3]
 8002e64:	e00f      	b.n	8002e86 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e70:	431a      	orrs	r2, r3
 8002e72:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8002e7c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	3218      	adds	r2, #24
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3318      	adds	r3, #24
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	18cb      	adds	r3, r1, r3
 8002e96:	3304      	adds	r3, #4
 8002e98:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	7d1b      	ldrb	r3, [r3, #20]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d112      	bne.n	8002ec8 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	3318      	adds	r3, #24
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	3304      	adds	r3, #4
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	18cb      	adds	r3, r1, r3
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	3307      	adds	r3, #7
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	061a      	lsls	r2, r3, #24
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3306      	adds	r3, #6
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	041b      	lsls	r3, r3, #16
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3305      	adds	r3, #5
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	021b      	lsls	r3, r3, #8
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	0019      	movs	r1, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	23c6      	movs	r3, #198	; 0xc6
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	0109      	lsls	r1, r1, #4
 8002efa:	1841      	adds	r1, r0, r1
 8002efc:	18cb      	adds	r3, r1, r3
 8002efe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3303      	adds	r3, #3
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	061a      	lsls	r2, r3, #24
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3302      	adds	r3, #2
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	041b      	lsls	r3, r3, #16
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3301      	adds	r3, #1
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	0019      	movs	r1, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6818      	ldr	r0, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	6979      	ldr	r1, [r7, #20]
 8002f2a:	23c4      	movs	r3, #196	; 0xc4
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	0109      	lsls	r1, r1, #4
 8002f30:	1841      	adds	r1, r0, r1
 8002f32:	18cb      	adds	r3, r1, r3
 8002f34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	3218      	adds	r2, #24
 8002f3e:	0112      	lsls	r2, r2, #4
 8002f40:	58d2      	ldr	r2, [r2, r3]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	4311      	orrs	r1, r2
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	3218      	adds	r2, #24
 8002f4e:	0112      	lsls	r2, r2, #4
 8002f50:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e010      	b.n	8002f78 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	0392      	lsls	r2, r2, #14
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e007      	b.n	8002f78 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	02d2      	lsls	r2, r2, #11
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
  }
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b008      	add	sp, #32
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f8e:	200b      	movs	r0, #11
 8002f90:	183b      	adds	r3, r7, r0
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	2120      	movs	r1, #32
 8002f96:	5c52      	ldrb	r2, [r2, r1]
 8002f98:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	18bb      	adds	r3, r7, r2
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d003      	beq.n	8002fac <HAL_CAN_IsTxMessagePending+0x2c>
 8002fa4:	18bb      	adds	r3, r7, r2
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d10b      	bne.n	8002fc4 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	0692      	lsls	r2, r2, #26
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	069b      	lsls	r3, r3, #26
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b004      	add	sp, #16
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fdc:	2017      	movs	r0, #23
 8002fde:	183b      	adds	r3, r7, r0
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	2120      	movs	r1, #32
 8002fe4:	5c52      	ldrb	r2, [r2, r1]
 8002fe6:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fe8:	0002      	movs	r2, r0
 8002fea:	18bb      	adds	r3, r7, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d004      	beq.n	8002ffc <HAL_CAN_GetRxMessage+0x2e>
 8002ff2:	18bb      	adds	r3, r7, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d000      	beq.n	8002ffc <HAL_CAN_GetRxMessage+0x2e>
 8002ffa:	e107      	b.n	800320c <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2203      	movs	r2, #3
 800300a:	4013      	ands	r3, r2
 800300c:	d117      	bne.n	800303e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	0392      	lsls	r2, r2, #14
 8003016:	431a      	orrs	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0fd      	b.n	800321c <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2203      	movs	r2, #3
 8003028:	4013      	ands	r3, r2
 800302a:	d108      	bne.n	800303e <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2280      	movs	r2, #128	; 0x80
 8003032:	0392      	lsls	r2, r2, #14
 8003034:	431a      	orrs	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e0ee      	b.n	800321c <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	321b      	adds	r2, #27
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	58d3      	ldr	r3, [r2, r3]
 800304a:	2204      	movs	r2, #4
 800304c:	401a      	ands	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	321b      	adds	r2, #27
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	58d3      	ldr	r3, [r2, r3]
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	055b      	lsls	r3, r3, #21
 800306a:	0d5a      	lsrs	r2, r3, #21
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e00a      	b.n	8003088 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	321b      	adds	r2, #27
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	58d3      	ldr	r3, [r2, r3]
 800307e:	08db      	lsrs	r3, r3, #3
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	321b      	adds	r2, #27
 8003090:	0112      	lsls	r2, r2, #4
 8003092:	58d3      	ldr	r3, [r2, r3]
 8003094:	2202      	movs	r2, #2
 8003096:	401a      	ands	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	331b      	adds	r3, #27
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	3304      	adds	r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	4013      	ands	r3, r2
 80030b0:	d003      	beq.n	80030ba <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2208      	movs	r2, #8
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	e00b      	b.n	80030d2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	331b      	adds	r3, #27
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	3304      	adds	r3, #4
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	220f      	movs	r2, #15
 80030cc:	401a      	ands	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	331b      	adds	r3, #27
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	18d3      	adds	r3, r2, r3
 80030de:	3304      	adds	r3, #4
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	22ff      	movs	r2, #255	; 0xff
 80030e6:	401a      	ands	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	331b      	adds	r3, #27
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	18d3      	adds	r3, r2, r3
 80030f8:	3304      	adds	r3, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	0c1a      	lsrs	r2, r3, #16
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	23dc      	movs	r3, #220	; 0xdc
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	188a      	adds	r2, r1, r2
 8003114:	18d3      	adds	r3, r2, r3
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	b2da      	uxtb	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	23dc      	movs	r3, #220	; 0xdc
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	0112      	lsls	r2, r2, #4
 800312a:	188a      	adds	r2, r1, r2
 800312c:	18d3      	adds	r3, r2, r3
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0a1a      	lsrs	r2, r3, #8
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6819      	ldr	r1, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	23dc      	movs	r3, #220	; 0xdc
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	0112      	lsls	r2, r2, #4
 8003146:	188a      	adds	r2, r1, r2
 8003148:	18d3      	adds	r3, r2, r3
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0c1a      	lsrs	r2, r3, #16
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	3302      	adds	r3, #2
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6819      	ldr	r1, [r3, #0]
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	23dc      	movs	r3, #220	; 0xdc
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	0112      	lsls	r2, r2, #4
 8003162:	188a      	adds	r2, r1, r2
 8003164:	18d3      	adds	r3, r2, r3
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	0e1a      	lsrs	r2, r3, #24
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	3303      	adds	r3, #3
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6819      	ldr	r1, [r3, #0]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	23de      	movs	r3, #222	; 0xde
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	188a      	adds	r2, r1, r2
 8003180:	18d3      	adds	r3, r2, r3
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	3304      	adds	r3, #4
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	23de      	movs	r3, #222	; 0xde
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	0112      	lsls	r2, r2, #4
 8003198:	188a      	adds	r2, r1, r2
 800319a:	18d3      	adds	r3, r2, r3
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	0a1a      	lsrs	r2, r3, #8
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	3305      	adds	r3, #5
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	23de      	movs	r3, #222	; 0xde
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	188a      	adds	r2, r1, r2
 80031b6:	18d3      	adds	r3, r2, r3
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0c1a      	lsrs	r2, r3, #16
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	3306      	adds	r3, #6
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6819      	ldr	r1, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	23de      	movs	r3, #222	; 0xde
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	188a      	adds	r2, r1, r2
 80031d2:	18d3      	adds	r3, r2, r3
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	0e1a      	lsrs	r2, r3, #24
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	3307      	adds	r3, #7
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d108      	bne.n	80031f8 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2120      	movs	r1, #32
 80031f2:	430a      	orrs	r2, r1
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e007      	b.n	8003208 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2120      	movs	r1, #32
 8003204:	430a      	orrs	r2, r1
 8003206:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	e007      	b.n	800321c <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	02d2      	lsls	r2, r2, #11
 8003214:	431a      	orrs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
  }
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b006      	add	sp, #24
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800322e:	200f      	movs	r0, #15
 8003230:	183b      	adds	r3, r7, r0
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	2120      	movs	r1, #32
 8003236:	5c52      	ldrb	r2, [r2, r1]
 8003238:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800323a:	0002      	movs	r2, r0
 800323c:	18bb      	adds	r3, r7, r2
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d003      	beq.n	800324c <HAL_CAN_ActivateNotification+0x28>
 8003244:	18bb      	adds	r3, r7, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d109      	bne.n	8003260 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6959      	ldr	r1, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	e007      	b.n	8003270 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	02d2      	lsls	r2, r2, #11
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
  }
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b004      	add	sp, #16
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	2201      	movs	r2, #1
 80032b8:	4013      	ands	r3, r2
 80032ba:	d100      	bne.n	80032be <HAL_CAN_IRQHandler+0x46>
 80032bc:	e084      	b.n	80033c8 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2201      	movs	r2, #1
 80032c2:	4013      	ands	r3, r2
 80032c4:	d024      	beq.n	8003310 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2201      	movs	r2, #1
 80032cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2202      	movs	r2, #2
 80032d2:	4013      	ands	r3, r2
 80032d4:	d004      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f981 	bl	80035e0 <HAL_CAN_TxMailbox0CompleteCallback>
 80032de:	e017      	b.n	8003310 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	2204      	movs	r2, #4
 80032e4:	4013      	ands	r3, r2
 80032e6:	d005      	beq.n	80032f4 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	4313      	orrs	r3, r2
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
 80032f2:	e00d      	b.n	8003310 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	2208      	movs	r2, #8
 80032f8:	4013      	ands	r3, r2
 80032fa:	d005      	beq.n	8003308 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	2280      	movs	r2, #128	; 0x80
 8003300:	0152      	lsls	r2, r2, #5
 8003302:	4313      	orrs	r3, r2
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e003      	b.n	8003310 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	0018      	movs	r0, r3
 800330c:	f000 f980 	bl	8003610 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4013      	ands	r3, r2
 8003318:	d028      	beq.n	800336c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	0052      	lsls	r2, r2, #1
 8003322:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4013      	ands	r3, r2
 800332c:	d004      	beq.n	8003338 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 f95d 	bl	80035f0 <HAL_CAN_TxMailbox1CompleteCallback>
 8003336:	e019      	b.n	800336c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4013      	ands	r3, r2
 8003340:	d005      	beq.n	800334e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	0192      	lsls	r2, r2, #6
 8003348:	4313      	orrs	r3, r2
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
 800334c:	e00e      	b.n	800336c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4013      	ands	r3, r2
 8003356:	d005      	beq.n	8003364 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	01d2      	lsls	r2, r2, #7
 800335e:	4313      	orrs	r3, r2
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	e003      	b.n	800336c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f95a 	bl	8003620 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	025b      	lsls	r3, r3, #9
 8003372:	4013      	ands	r3, r2
 8003374:	d028      	beq.n	80033c8 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	0252      	lsls	r2, r2, #9
 800337e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	4013      	ands	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f937 	bl	8003600 <HAL_CAN_TxMailbox2CompleteCallback>
 8003392:	e019      	b.n	80033c8 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	02db      	lsls	r3, r3, #11
 800339a:	4013      	ands	r3, r2
 800339c:	d005      	beq.n	80033aa <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	0212      	lsls	r2, r2, #8
 80033a4:	4313      	orrs	r3, r2
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	e00e      	b.n	80033c8 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	031b      	lsls	r3, r3, #12
 80033b0:	4013      	ands	r3, r2
 80033b2:	d005      	beq.n	80033c0 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	0252      	lsls	r2, r2, #9
 80033ba:	4313      	orrs	r3, r2
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
 80033be:	e003      	b.n	80033c8 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 f934 	bl	8003630 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	2208      	movs	r2, #8
 80033cc:	4013      	ands	r3, r2
 80033ce:	d00c      	beq.n	80033ea <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2210      	movs	r2, #16
 80033d4:	4013      	ands	r3, r2
 80033d6:	d008      	beq.n	80033ea <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	0092      	lsls	r2, r2, #2
 80033de:	4313      	orrs	r3, r2
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	2204      	movs	r2, #4
 80033ee:	4013      	ands	r3, r2
 80033f0:	d00b      	beq.n	800340a <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2208      	movs	r2, #8
 80033f6:	4013      	ands	r3, r2
 80033f8:	d007      	beq.n	800340a <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2208      	movs	r2, #8
 8003400:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f91b 	bl	8003640 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	2202      	movs	r2, #2
 800340e:	4013      	ands	r3, r2
 8003410:	d009      	beq.n	8003426 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2203      	movs	r2, #3
 800341a:	4013      	ands	r3, r2
 800341c:	d003      	beq.n	8003426 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	0018      	movs	r0, r3
 8003422:	f7fe fea7 	bl	8002174 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	2240      	movs	r2, #64	; 0x40
 800342a:	4013      	ands	r3, r2
 800342c:	d00c      	beq.n	8003448 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	2210      	movs	r2, #16
 8003432:	4013      	ands	r3, r2
 8003434:	d008      	beq.n	8003448 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	00d2      	lsls	r2, r2, #3
 800343c:	4313      	orrs	r3, r2
 800343e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2210      	movs	r2, #16
 8003446:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	2220      	movs	r2, #32
 800344c:	4013      	ands	r3, r2
 800344e:	d00b      	beq.n	8003468 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	2208      	movs	r2, #8
 8003454:	4013      	ands	r3, r2
 8003456:	d007      	beq.n	8003468 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2208      	movs	r2, #8
 800345e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f8fc 	bl	8003660 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	2210      	movs	r2, #16
 800346c:	4013      	ands	r3, r2
 800346e:	d009      	beq.n	8003484 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2203      	movs	r2, #3
 8003478:	4013      	ands	r3, r2
 800347a:	d003      	beq.n	8003484 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 f8e6 	bl	8003650 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	029b      	lsls	r3, r3, #10
 800348a:	4013      	ands	r3, r2
 800348c:	d00b      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	2210      	movs	r2, #16
 8003492:	4013      	ands	r3, r2
 8003494:	d007      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2210      	movs	r2, #16
 800349c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 f8e5 	bl	8003670 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80034a6:	6a3a      	ldr	r2, [r7, #32]
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	025b      	lsls	r3, r3, #9
 80034ac:	4013      	ands	r3, r2
 80034ae:	d00b      	beq.n	80034c8 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2208      	movs	r2, #8
 80034b4:	4013      	ands	r3, r2
 80034b6:	d007      	beq.n	80034c8 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2208      	movs	r2, #8
 80034be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f000 f8dc 	bl	8003680 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80034c8:	6a3a      	ldr	r2, [r7, #32]
 80034ca:	2380      	movs	r3, #128	; 0x80
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	4013      	ands	r3, r2
 80034d0:	d100      	bne.n	80034d4 <HAL_CAN_IRQHandler+0x25c>
 80034d2:	e074      	b.n	80035be <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2204      	movs	r2, #4
 80034d8:	4013      	ands	r3, r2
 80034da:	d100      	bne.n	80034de <HAL_CAN_IRQHandler+0x266>
 80034dc:	e06b      	b.n	80035b6 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034de:	6a3a      	ldr	r2, [r7, #32]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	d007      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80034ee:	d003      	beq.n	80034f8 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	2201      	movs	r2, #1
 80034f4:	4313      	orrs	r3, r2
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80034f8:	6a3a      	ldr	r2, [r7, #32]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4013      	ands	r3, r2
 8003500:	d007      	beq.n	8003512 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003508:	d003      	beq.n	8003512 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	2202      	movs	r2, #2
 800350e:	4313      	orrs	r3, r2
 8003510:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003512:	6a3a      	ldr	r2, [r7, #32]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4013      	ands	r3, r2
 800351a:	d007      	beq.n	800352c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003522:	d003      	beq.n	800352c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2204      	movs	r2, #4
 8003528:	4313      	orrs	r3, r2
 800352a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800352c:	6a3a      	ldr	r2, [r7, #32]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	4013      	ands	r3, r2
 8003534:	d03f      	beq.n	80035b6 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2270      	movs	r2, #112	; 0x70
 800353a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800353c:	d03b      	beq.n	80035b6 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2270      	movs	r2, #112	; 0x70
 8003542:	4013      	ands	r3, r2
 8003544:	2b60      	cmp	r3, #96	; 0x60
 8003546:	d027      	beq.n	8003598 <HAL_CAN_IRQHandler+0x320>
 8003548:	d82c      	bhi.n	80035a4 <HAL_CAN_IRQHandler+0x32c>
 800354a:	2b50      	cmp	r3, #80	; 0x50
 800354c:	d01f      	beq.n	800358e <HAL_CAN_IRQHandler+0x316>
 800354e:	d829      	bhi.n	80035a4 <HAL_CAN_IRQHandler+0x32c>
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d017      	beq.n	8003584 <HAL_CAN_IRQHandler+0x30c>
 8003554:	d826      	bhi.n	80035a4 <HAL_CAN_IRQHandler+0x32c>
 8003556:	2b30      	cmp	r3, #48	; 0x30
 8003558:	d00f      	beq.n	800357a <HAL_CAN_IRQHandler+0x302>
 800355a:	d823      	bhi.n	80035a4 <HAL_CAN_IRQHandler+0x32c>
 800355c:	2b10      	cmp	r3, #16
 800355e:	d002      	beq.n	8003566 <HAL_CAN_IRQHandler+0x2ee>
 8003560:	2b20      	cmp	r3, #32
 8003562:	d005      	beq.n	8003570 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003564:	e01e      	b.n	80035a4 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	2208      	movs	r2, #8
 800356a:	4313      	orrs	r3, r2
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800356e:	e01a      	b.n	80035a6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	2210      	movs	r2, #16
 8003574:	4313      	orrs	r3, r2
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003578:	e015      	b.n	80035a6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	2220      	movs	r2, #32
 800357e:	4313      	orrs	r3, r2
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003582:	e010      	b.n	80035a6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	4313      	orrs	r3, r2
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800358c:	e00b      	b.n	80035a6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	2280      	movs	r2, #128	; 0x80
 8003592:	4313      	orrs	r3, r2
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003596:	e006      	b.n	80035a6 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	0052      	lsls	r2, r2, #1
 800359e:	4313      	orrs	r3, r2
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035a2:	e000      	b.n	80035a6 <HAL_CAN_IRQHandler+0x32e>
            break;
 80035a4:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699a      	ldr	r2, [r3, #24]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2170      	movs	r1, #112	; 0x70
 80035b2:	438a      	bics	r2, r1
 80035b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2204      	movs	r2, #4
 80035bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7fe fdf4 	bl	80021c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	46bd      	mov	sp, r7
 80035dc:	b00a      	add	sp, #40	; 0x28
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80035e8:	46c0      	nop			; (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b002      	add	sp, #8
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b002      	add	sp, #8
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b002      	add	sp, #8
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b002      	add	sp, #8
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	0002      	movs	r2, r0
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036b0:	1dfb      	adds	r3, r7, #7
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b7f      	cmp	r3, #127	; 0x7f
 80036b6:	d809      	bhi.n	80036cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	001a      	movs	r2, r3
 80036be:	231f      	movs	r3, #31
 80036c0:	401a      	ands	r2, r3
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <__NVIC_EnableIRQ+0x30>)
 80036c4:	2101      	movs	r1, #1
 80036c6:	4091      	lsls	r1, r2
 80036c8:	000a      	movs	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
  }
}
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b002      	add	sp, #8
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	0002      	movs	r2, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	1dfb      	adds	r3, r7, #7
 80036e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	1dfb      	adds	r3, r7, #7
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b7f      	cmp	r3, #127	; 0x7f
 80036ec:	d828      	bhi.n	8003740 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036ee:	4a2f      	ldr	r2, [pc, #188]	; (80037ac <__NVIC_SetPriority+0xd4>)
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	33c0      	adds	r3, #192	; 0xc0
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	589b      	ldr	r3, [r3, r2]
 80036fe:	1dfa      	adds	r2, r7, #7
 8003700:	7812      	ldrb	r2, [r2, #0]
 8003702:	0011      	movs	r1, r2
 8003704:	2203      	movs	r2, #3
 8003706:	400a      	ands	r2, r1
 8003708:	00d2      	lsls	r2, r2, #3
 800370a:	21ff      	movs	r1, #255	; 0xff
 800370c:	4091      	lsls	r1, r2
 800370e:	000a      	movs	r2, r1
 8003710:	43d2      	mvns	r2, r2
 8003712:	401a      	ands	r2, r3
 8003714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	019b      	lsls	r3, r3, #6
 800371a:	22ff      	movs	r2, #255	; 0xff
 800371c:	401a      	ands	r2, r3
 800371e:	1dfb      	adds	r3, r7, #7
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	0018      	movs	r0, r3
 8003724:	2303      	movs	r3, #3
 8003726:	4003      	ands	r3, r0
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800372c:	481f      	ldr	r0, [pc, #124]	; (80037ac <__NVIC_SetPriority+0xd4>)
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	b25b      	sxtb	r3, r3
 8003734:	089b      	lsrs	r3, r3, #2
 8003736:	430a      	orrs	r2, r1
 8003738:	33c0      	adds	r3, #192	; 0xc0
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800373e:	e031      	b.n	80037a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003740:	4a1b      	ldr	r2, [pc, #108]	; (80037b0 <__NVIC_SetPriority+0xd8>)
 8003742:	1dfb      	adds	r3, r7, #7
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	0019      	movs	r1, r3
 8003748:	230f      	movs	r3, #15
 800374a:	400b      	ands	r3, r1
 800374c:	3b08      	subs	r3, #8
 800374e:	089b      	lsrs	r3, r3, #2
 8003750:	3306      	adds	r3, #6
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	18d3      	adds	r3, r2, r3
 8003756:	3304      	adds	r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	1dfa      	adds	r2, r7, #7
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	0011      	movs	r1, r2
 8003760:	2203      	movs	r2, #3
 8003762:	400a      	ands	r2, r1
 8003764:	00d2      	lsls	r2, r2, #3
 8003766:	21ff      	movs	r1, #255	; 0xff
 8003768:	4091      	lsls	r1, r2
 800376a:	000a      	movs	r2, r1
 800376c:	43d2      	mvns	r2, r2
 800376e:	401a      	ands	r2, r3
 8003770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	019b      	lsls	r3, r3, #6
 8003776:	22ff      	movs	r2, #255	; 0xff
 8003778:	401a      	ands	r2, r3
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	0018      	movs	r0, r3
 8003780:	2303      	movs	r3, #3
 8003782:	4003      	ands	r3, r0
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003788:	4809      	ldr	r0, [pc, #36]	; (80037b0 <__NVIC_SetPriority+0xd8>)
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	001c      	movs	r4, r3
 8003790:	230f      	movs	r3, #15
 8003792:	4023      	ands	r3, r4
 8003794:	3b08      	subs	r3, #8
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	430a      	orrs	r2, r1
 800379a:	3306      	adds	r3, #6
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	18c3      	adds	r3, r0, r3
 80037a0:	3304      	adds	r3, #4
 80037a2:	601a      	str	r2, [r3, #0]
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b003      	add	sp, #12
 80037aa:	bd90      	pop	{r4, r7, pc}
 80037ac:	e000e100 	.word	0xe000e100
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	045b      	lsls	r3, r3, #17
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d301      	bcc.n	80037cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c8:	2301      	movs	r3, #1
 80037ca:	e010      	b.n	80037ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <SysTick_Config+0x44>)
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	3a01      	subs	r2, #1
 80037d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d4:	2301      	movs	r3, #1
 80037d6:	425b      	negs	r3, r3
 80037d8:	2103      	movs	r1, #3
 80037da:	0018      	movs	r0, r3
 80037dc:	f7ff ff7c 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <SysTick_Config+0x44>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e6:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <SysTick_Config+0x44>)
 80037e8:	2207      	movs	r2, #7
 80037ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b002      	add	sp, #8
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	e000e010 	.word	0xe000e010

080037fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	210f      	movs	r1, #15
 8003808:	187b      	adds	r3, r7, r1
 800380a:	1c02      	adds	r2, r0, #0
 800380c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	187b      	adds	r3, r7, r1
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b25b      	sxtb	r3, r3
 8003816:	0011      	movs	r1, r2
 8003818:	0018      	movs	r0, r3
 800381a:	f7ff ff5d 	bl	80036d8 <__NVIC_SetPriority>
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	0002      	movs	r2, r0
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003832:	1dfb      	adds	r3, r7, #7
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	b25b      	sxtb	r3, r3
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff ff33 	bl	80036a4 <__NVIC_EnableIRQ>
}
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b002      	add	sp, #8
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff ffaf 	bl	80037b4 <SysTick_Config>
 8003856:	0003      	movs	r3, r0
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386e:	e155      	b.n	8003b1c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2101      	movs	r1, #1
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4091      	lsls	r1, r2
 800387a:	000a      	movs	r2, r1
 800387c:	4013      	ands	r3, r2
 800387e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d100      	bne.n	8003888 <HAL_GPIO_Init+0x28>
 8003886:	e146      	b.n	8003b16 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2203      	movs	r2, #3
 800388e:	4013      	ands	r3, r2
 8003890:	2b01      	cmp	r3, #1
 8003892:	d005      	beq.n	80038a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2203      	movs	r2, #3
 800389a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800389c:	2b02      	cmp	r3, #2
 800389e:	d130      	bne.n	8003902 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	2203      	movs	r2, #3
 80038ac:	409a      	lsls	r2, r3
 80038ae:	0013      	movs	r3, r2
 80038b0:	43da      	mvns	r2, r3
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	409a      	lsls	r2, r3
 80038c2:	0013      	movs	r3, r2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d6:	2201      	movs	r2, #1
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	409a      	lsls	r2, r3
 80038dc:	0013      	movs	r3, r2
 80038de:	43da      	mvns	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4013      	ands	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	2201      	movs	r2, #1
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
 80038f4:	0013      	movs	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2203      	movs	r2, #3
 8003908:	4013      	ands	r3, r2
 800390a:	2b03      	cmp	r3, #3
 800390c:	d017      	beq.n	800393e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	2203      	movs	r2, #3
 800391a:	409a      	lsls	r2, r3
 800391c:	0013      	movs	r3, r2
 800391e:	43da      	mvns	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	409a      	lsls	r2, r3
 8003930:	0013      	movs	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2203      	movs	r2, #3
 8003944:	4013      	ands	r3, r2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d123      	bne.n	8003992 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	08da      	lsrs	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3208      	adds	r2, #8
 8003952:	0092      	lsls	r2, r2, #2
 8003954:	58d3      	ldr	r3, [r2, r3]
 8003956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2207      	movs	r2, #7
 800395c:	4013      	ands	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	220f      	movs	r2, #15
 8003962:	409a      	lsls	r2, r3
 8003964:	0013      	movs	r3, r2
 8003966:	43da      	mvns	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2107      	movs	r1, #7
 8003976:	400b      	ands	r3, r1
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	409a      	lsls	r2, r3
 800397c:	0013      	movs	r3, r2
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	08da      	lsrs	r2, r3, #3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3208      	adds	r2, #8
 800398c:	0092      	lsls	r2, r2, #2
 800398e:	6939      	ldr	r1, [r7, #16]
 8003990:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	2203      	movs	r2, #3
 800399e:	409a      	lsls	r2, r3
 80039a0:	0013      	movs	r3, r2
 80039a2:	43da      	mvns	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	401a      	ands	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	409a      	lsls	r2, r3
 80039b8:	0013      	movs	r3, r2
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	23c0      	movs	r3, #192	; 0xc0
 80039cc:	029b      	lsls	r3, r3, #10
 80039ce:	4013      	ands	r3, r2
 80039d0:	d100      	bne.n	80039d4 <HAL_GPIO_Init+0x174>
 80039d2:	e0a0      	b.n	8003b16 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d4:	4b57      	ldr	r3, [pc, #348]	; (8003b34 <HAL_GPIO_Init+0x2d4>)
 80039d6:	699a      	ldr	r2, [r3, #24]
 80039d8:	4b56      	ldr	r3, [pc, #344]	; (8003b34 <HAL_GPIO_Init+0x2d4>)
 80039da:	2101      	movs	r1, #1
 80039dc:	430a      	orrs	r2, r1
 80039de:	619a      	str	r2, [r3, #24]
 80039e0:	4b54      	ldr	r3, [pc, #336]	; (8003b34 <HAL_GPIO_Init+0x2d4>)
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2201      	movs	r2, #1
 80039e6:	4013      	ands	r3, r2
 80039e8:	60bb      	str	r3, [r7, #8]
 80039ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039ec:	4a52      	ldr	r2, [pc, #328]	; (8003b38 <HAL_GPIO_Init+0x2d8>)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	3302      	adds	r3, #2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	589b      	ldr	r3, [r3, r2]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2203      	movs	r2, #3
 80039fe:	4013      	ands	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	220f      	movs	r2, #15
 8003a04:	409a      	lsls	r2, r3
 8003a06:	0013      	movs	r3, r2
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	2390      	movs	r3, #144	; 0x90
 8003a14:	05db      	lsls	r3, r3, #23
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d019      	beq.n	8003a4e <HAL_GPIO_Init+0x1ee>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a47      	ldr	r2, [pc, #284]	; (8003b3c <HAL_GPIO_Init+0x2dc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_GPIO_Init+0x1ea>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a46      	ldr	r2, [pc, #280]	; (8003b40 <HAL_GPIO_Init+0x2e0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00d      	beq.n	8003a46 <HAL_GPIO_Init+0x1e6>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a45      	ldr	r2, [pc, #276]	; (8003b44 <HAL_GPIO_Init+0x2e4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <HAL_GPIO_Init+0x1e2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a44      	ldr	r2, [pc, #272]	; (8003b48 <HAL_GPIO_Init+0x2e8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_GPIO_Init+0x1de>
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	e008      	b.n	8003a50 <HAL_GPIO_Init+0x1f0>
 8003a3e:	2305      	movs	r3, #5
 8003a40:	e006      	b.n	8003a50 <HAL_GPIO_Init+0x1f0>
 8003a42:	2303      	movs	r3, #3
 8003a44:	e004      	b.n	8003a50 <HAL_GPIO_Init+0x1f0>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e002      	b.n	8003a50 <HAL_GPIO_Init+0x1f0>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_GPIO_Init+0x1f0>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	2103      	movs	r1, #3
 8003a54:	400a      	ands	r2, r1
 8003a56:	0092      	lsls	r2, r2, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a60:	4935      	ldr	r1, [pc, #212]	; (8003b38 <HAL_GPIO_Init+0x2d8>)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a6e:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	43da      	mvns	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	035b      	lsls	r3, r3, #13
 8003a86:	4013      	ands	r3, r2
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a92:	4b2e      	ldr	r3, [pc, #184]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a98:	4b2c      	ldr	r3, [pc, #176]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	43da      	mvns	r2, r3
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	039b      	lsls	r3, r3, #14
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003abc:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003ac2:	4b22      	ldr	r3, [pc, #136]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	029b      	lsls	r3, r3, #10
 8003ada:	4013      	ands	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003aec:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43da      	mvns	r2, r3
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	2380      	movs	r3, #128	; 0x80
 8003b02:	025b      	lsls	r3, r3, #9
 8003b04:	4013      	ands	r3, r2
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003b10:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	40da      	lsrs	r2, r3
 8003b24:	1e13      	subs	r3, r2, #0
 8003b26:	d000      	beq.n	8003b2a <HAL_GPIO_Init+0x2ca>
 8003b28:	e6a2      	b.n	8003870 <HAL_GPIO_Init+0x10>
  } 
}
 8003b2a:	46c0      	nop			; (mov r8, r8)
 8003b2c:	46c0      	nop			; (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b006      	add	sp, #24
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	48000400 	.word	0x48000400
 8003b40:	48000800 	.word	0x48000800
 8003b44:	48000c00 	.word	0x48000c00
 8003b48:	48001000 	.word	0x48001000
 8003b4c:	40010400 	.word	0x40010400

08003b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	0008      	movs	r0, r1
 8003b5a:	0011      	movs	r1, r2
 8003b5c:	1cbb      	adds	r3, r7, #2
 8003b5e:	1c02      	adds	r2, r0, #0
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	1c7b      	adds	r3, r7, #1
 8003b64:	1c0a      	adds	r2, r1, #0
 8003b66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b68:	1c7b      	adds	r3, r7, #1
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b70:	1cbb      	adds	r3, r7, #2
 8003b72:	881a      	ldrh	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b7a:	1cbb      	adds	r3, r7, #2
 8003b7c:	881a      	ldrh	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e082      	b.n	8003ca4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2241      	movs	r2, #65	; 0x41
 8003ba2:	5c9b      	ldrb	r3, [r3, r2]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d107      	bne.n	8003bba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2240      	movs	r2, #64	; 0x40
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7fe fdb1 	bl	800271c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2241      	movs	r2, #65	; 0x41
 8003bbe:	2124      	movs	r1, #36	; 0x24
 8003bc0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	438a      	bics	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4934      	ldr	r1, [pc, #208]	; (8003cac <HAL_I2C_Init+0x120>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4931      	ldr	r1, [pc, #196]	; (8003cb0 <HAL_I2C_Init+0x124>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d108      	bne.n	8003c0a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	0209      	lsls	r1, r1, #8
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	e007      	b.n	8003c1a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2184      	movs	r1, #132	; 0x84
 8003c14:	0209      	lsls	r1, r1, #8
 8003c16:	430a      	orrs	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d104      	bne.n	8003c2c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	0112      	lsls	r2, r2, #4
 8003c2a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	491f      	ldr	r1, [pc, #124]	; (8003cb4 <HAL_I2C_Init+0x128>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	491a      	ldr	r1, [pc, #104]	; (8003cb0 <HAL_I2C_Init+0x124>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69d9      	ldr	r1, [r3, #28]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2101      	movs	r1, #1
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2241      	movs	r2, #65	; 0x41
 8003c90:	2120      	movs	r1, #32
 8003c92:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2242      	movs	r2, #66	; 0x42
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	f0ffffff 	.word	0xf0ffffff
 8003cb0:	ffff7fff 	.word	0xffff7fff
 8003cb4:	02008000 	.word	0x02008000

08003cb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b590      	push	{r4, r7, lr}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	0008      	movs	r0, r1
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	230a      	movs	r3, #10
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	1c02      	adds	r2, r0, #0
 8003ccc:	801a      	strh	r2, [r3, #0]
 8003cce:	2308      	movs	r3, #8
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	1c0a      	adds	r2, r1, #0
 8003cd4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2241      	movs	r2, #65	; 0x41
 8003cda:	5c9b      	ldrb	r3, [r3, r2]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d000      	beq.n	8003ce4 <HAL_I2C_Master_Transmit+0x2c>
 8003ce2:	e0e7      	b.n	8003eb4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2240      	movs	r2, #64	; 0x40
 8003ce8:	5c9b      	ldrb	r3, [r3, r2]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2C_Master_Transmit+0x3a>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e0e1      	b.n	8003eb6 <HAL_I2C_Master_Transmit+0x1fe>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2240      	movs	r2, #64	; 0x40
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cfa:	f7fe fe0b 	bl	8002914 <HAL_GetTick>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	0219      	lsls	r1, r3, #8
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2319      	movs	r3, #25
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f000 fa04 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003d14:	1e03      	subs	r3, r0, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0cc      	b.n	8003eb6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2241      	movs	r2, #65	; 0x41
 8003d20:	2121      	movs	r1, #33	; 0x21
 8003d22:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2242      	movs	r2, #66	; 0x42
 8003d28:	2110      	movs	r1, #16
 8003d2a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	18ba      	adds	r2, r7, r2
 8003d3e:	8812      	ldrh	r2, [r2, #0]
 8003d40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2bff      	cmp	r3, #255	; 0xff
 8003d50:	d911      	bls.n	8003d76 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	22ff      	movs	r2, #255	; 0xff
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	045c      	lsls	r4, r3, #17
 8003d62:	230a      	movs	r3, #10
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	8819      	ldrh	r1, [r3, #0]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_I2C_Master_Transmit+0x208>)
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	0023      	movs	r3, r4
 8003d70:	f000 fc2e 	bl	80045d0 <I2C_TransferConfig>
 8003d74:	e075      	b.n	8003e62 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	2380      	movs	r3, #128	; 0x80
 8003d88:	049c      	lsls	r4, r3, #18
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	8819      	ldrh	r1, [r3, #0]
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_I2C_Master_Transmit+0x208>)
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	0023      	movs	r3, r4
 8003d98:	f000 fc1a 	bl	80045d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d9c:	e061      	b.n	8003e62 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f000 fa07 	bl	80041b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003daa:	1e03      	subs	r3, r0, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e081      	b.n	8003eb6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	781a      	ldrb	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d03a      	beq.n	8003e62 <HAL_I2C_Master_Transmit+0x1aa>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d136      	bne.n	8003e62 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	0013      	movs	r3, r2
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2180      	movs	r1, #128	; 0x80
 8003e02:	f000 f98b 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003e06:	1e03      	subs	r3, r0, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e053      	b.n	8003eb6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2bff      	cmp	r3, #255	; 0xff
 8003e16:	d911      	bls.n	8003e3c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	22ff      	movs	r2, #255	; 0xff
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	045c      	lsls	r4, r3, #17
 8003e28:	230a      	movs	r3, #10
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	8819      	ldrh	r1, [r3, #0]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	2300      	movs	r3, #0
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	0023      	movs	r3, r4
 8003e36:	f000 fbcb 	bl	80045d0 <I2C_TransferConfig>
 8003e3a:	e012      	b.n	8003e62 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	049c      	lsls	r4, r3, #18
 8003e50:	230a      	movs	r3, #10
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	8819      	ldrh	r1, [r3, #0]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	2300      	movs	r3, #0
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	0023      	movs	r3, r4
 8003e5e:	f000 fbb7 	bl	80045d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d198      	bne.n	8003d9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 f9e6 	bl	8004244 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e01a      	b.n	8003eb6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2220      	movs	r2, #32
 8003e86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	490c      	ldr	r1, [pc, #48]	; (8003ec4 <HAL_I2C_Master_Transmit+0x20c>)
 8003e94:	400a      	ands	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2241      	movs	r2, #65	; 0x41
 8003e9c:	2120      	movs	r1, #32
 8003e9e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2242      	movs	r2, #66	; 0x42
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	2100      	movs	r1, #0
 8003eae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e000      	b.n	8003eb6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003eb4:	2302      	movs	r3, #2
  }
}
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	b007      	add	sp, #28
 8003ebc:	bd90      	pop	{r4, r7, pc}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	80002000 	.word	0x80002000
 8003ec4:	fe00e800 	.word	0xfe00e800

08003ec8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b089      	sub	sp, #36	; 0x24
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	0008      	movs	r0, r1
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	230a      	movs	r3, #10
 8003ed8:	18fb      	adds	r3, r7, r3
 8003eda:	1c02      	adds	r2, r0, #0
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	2308      	movs	r3, #8
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	1c0a      	adds	r2, r1, #0
 8003ee4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2241      	movs	r2, #65	; 0x41
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d000      	beq.n	8003ef4 <HAL_I2C_Master_Receive+0x2c>
 8003ef2:	e0e8      	b.n	80040c6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2240      	movs	r2, #64	; 0x40
 8003ef8:	5c9b      	ldrb	r3, [r3, r2]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Master_Receive+0x3a>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0e2      	b.n	80040c8 <HAL_I2C_Master_Receive+0x200>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2240      	movs	r2, #64	; 0x40
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f0a:	f7fe fd03 	bl	8002914 <HAL_GetTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	0219      	lsls	r1, r3, #8
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	2319      	movs	r3, #25
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f000 f8fc 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003f24:	1e03      	subs	r3, r0, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0cd      	b.n	80040c8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2241      	movs	r2, #65	; 0x41
 8003f30:	2122      	movs	r1, #34	; 0x22
 8003f32:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2242      	movs	r2, #66	; 0x42
 8003f38:	2110      	movs	r1, #16
 8003f3a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	18ba      	adds	r2, r7, r2
 8003f4e:	8812      	ldrh	r2, [r2, #0]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2bff      	cmp	r3, #255	; 0xff
 8003f60:	d911      	bls.n	8003f86 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	22ff      	movs	r2, #255	; 0xff
 8003f66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	045c      	lsls	r4, r3, #17
 8003f72:	230a      	movs	r3, #10
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	8819      	ldrh	r1, [r3, #0]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	4b55      	ldr	r3, [pc, #340]	; (80040d0 <HAL_I2C_Master_Receive+0x208>)
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	0023      	movs	r3, r4
 8003f80:	f000 fb26 	bl	80045d0 <I2C_TransferConfig>
 8003f84:	e076      	b.n	8004074 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	049c      	lsls	r4, r3, #18
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	8819      	ldrh	r1, [r3, #0]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	4b4b      	ldr	r3, [pc, #300]	; (80040d0 <HAL_I2C_Master_Receive+0x208>)
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	0023      	movs	r3, r4
 8003fa8:	f000 fb12 	bl	80045d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003fac:	e062      	b.n	8004074 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 f989 	bl	80042cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fba:	1e03      	subs	r3, r0, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e082      	b.n	80040c8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d03a      	beq.n	8004074 <HAL_I2C_Master_Receive+0x1ac>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d136      	bne.n	8004074 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	0013      	movs	r3, r2
 8004010:	2200      	movs	r2, #0
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	f000 f882 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8004018:	1e03      	subs	r3, r0, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e053      	b.n	80040c8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2bff      	cmp	r3, #255	; 0xff
 8004028:	d911      	bls.n	800404e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	22ff      	movs	r2, #255	; 0xff
 800402e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	b2da      	uxtb	r2, r3
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	045c      	lsls	r4, r3, #17
 800403a:	230a      	movs	r3, #10
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	8819      	ldrh	r1, [r3, #0]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	2300      	movs	r3, #0
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	0023      	movs	r3, r4
 8004048:	f000 fac2 	bl	80045d0 <I2C_TransferConfig>
 800404c:	e012      	b.n	8004074 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405c:	b2da      	uxtb	r2, r3
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	049c      	lsls	r4, r3, #18
 8004062:	230a      	movs	r3, #10
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	8819      	ldrh	r1, [r3, #0]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	2300      	movs	r3, #0
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	0023      	movs	r3, r4
 8004070:	f000 faae 	bl	80045d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d197      	bne.n	8003fae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	0018      	movs	r0, r3
 8004086:	f000 f8dd 	bl	8004244 <I2C_WaitOnSTOPFlagUntilTimeout>
 800408a:	1e03      	subs	r3, r0, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e01a      	b.n	80040c8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2220      	movs	r2, #32
 8004098:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	490b      	ldr	r1, [pc, #44]	; (80040d4 <HAL_I2C_Master_Receive+0x20c>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2241      	movs	r2, #65	; 0x41
 80040ae:	2120      	movs	r1, #32
 80040b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2242      	movs	r2, #66	; 0x42
 80040b6:	2100      	movs	r1, #0
 80040b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2240      	movs	r2, #64	; 0x40
 80040be:	2100      	movs	r1, #0
 80040c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b007      	add	sp, #28
 80040ce:	bd90      	pop	{r4, r7, pc}
 80040d0:	80002400 	.word	0x80002400
 80040d4:	fe00e800 	.word	0xfe00e800

080040d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2202      	movs	r2, #2
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d103      	bne.n	80040f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2200      	movs	r2, #0
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2201      	movs	r2, #1
 80040fe:	4013      	ands	r3, r2
 8004100:	2b01      	cmp	r3, #1
 8004102:	d007      	beq.n	8004114 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2101      	movs	r1, #1
 8004110:	430a      	orrs	r2, r1
 8004112:	619a      	str	r2, [r3, #24]
  }
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b002      	add	sp, #8
 800411a:	bd80      	pop	{r7, pc}

0800411c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	1dfb      	adds	r3, r7, #7
 800412a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800412c:	e030      	b.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	d02d      	beq.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004134:	f7fe fbee 	bl	8002914 <HAL_GetTick>
 8004138:	0002      	movs	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d302      	bcc.n	800414a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d122      	bne.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	425a      	negs	r2, r3
 800415a:	4153      	adcs	r3, r2
 800415c:	b2db      	uxtb	r3, r3
 800415e:	001a      	movs	r2, r3
 8004160:	1dfb      	adds	r3, r7, #7
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d113      	bne.n	8004190 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	2220      	movs	r2, #32
 800416e:	431a      	orrs	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2241      	movs	r2, #65	; 0x41
 8004178:	2120      	movs	r1, #32
 800417a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2242      	movs	r2, #66	; 0x42
 8004180:	2100      	movs	r1, #0
 8004182:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2240      	movs	r2, #64	; 0x40
 8004188:	2100      	movs	r1, #0
 800418a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e00f      	b.n	80041b0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	425a      	negs	r2, r3
 80041a0:	4153      	adcs	r3, r2
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	001a      	movs	r2, r3
 80041a6:	1dfb      	adds	r3, r7, #7
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d0bf      	beq.n	800412e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b004      	add	sp, #16
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041c4:	e032      	b.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 f8ff 	bl	80043d0 <I2C_IsErrorOccurred>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d001      	beq.n	80041da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e030      	b.n	800423c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	3301      	adds	r3, #1
 80041de:	d025      	beq.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e0:	f7fe fb98 	bl	8002914 <HAL_GetTick>
 80041e4:	0002      	movs	r2, r0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d302      	bcc.n	80041f6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11a      	bne.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2202      	movs	r2, #2
 80041fe:	4013      	ands	r3, r2
 8004200:	2b02      	cmp	r3, #2
 8004202:	d013      	beq.n	800422c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	2220      	movs	r2, #32
 800420a:	431a      	orrs	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2241      	movs	r2, #65	; 0x41
 8004214:	2120      	movs	r1, #32
 8004216:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2242      	movs	r2, #66	; 0x42
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2240      	movs	r2, #64	; 0x40
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e007      	b.n	800423c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	2202      	movs	r2, #2
 8004234:	4013      	ands	r3, r2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d1c5      	bne.n	80041c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b004      	add	sp, #16
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004250:	e02f      	b.n	80042b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 f8b9 	bl	80043d0 <I2C_IsErrorOccurred>
 800425e:	1e03      	subs	r3, r0, #0
 8004260:	d001      	beq.n	8004266 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e02d      	b.n	80042c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fe fb55 	bl	8002914 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d11a      	bne.n	80042b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2220      	movs	r2, #32
 8004284:	4013      	ands	r3, r2
 8004286:	2b20      	cmp	r3, #32
 8004288:	d013      	beq.n	80042b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	2220      	movs	r2, #32
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2241      	movs	r2, #65	; 0x41
 800429a:	2120      	movs	r1, #32
 800429c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2242      	movs	r2, #66	; 0x42
 80042a2:	2100      	movs	r1, #0
 80042a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2240      	movs	r2, #64	; 0x40
 80042aa:	2100      	movs	r1, #0
 80042ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e007      	b.n	80042c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2220      	movs	r2, #32
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d1c8      	bne.n	8004252 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	0018      	movs	r0, r3
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b004      	add	sp, #16
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042d8:	e06b      	b.n	80043b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	68b9      	ldr	r1, [r7, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 f875 	bl	80043d0 <I2C_IsErrorOccurred>
 80042e6:	1e03      	subs	r3, r0, #0
 80042e8:	d001      	beq.n	80042ee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e069      	b.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2220      	movs	r2, #32
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d138      	bne.n	800436e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2204      	movs	r2, #4
 8004304:	4013      	ands	r3, r2
 8004306:	2b04      	cmp	r3, #4
 8004308:	d105      	bne.n	8004316 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e055      	b.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	2210      	movs	r2, #16
 800431e:	4013      	ands	r3, r2
 8004320:	2b10      	cmp	r3, #16
 8004322:	d107      	bne.n	8004334 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2210      	movs	r2, #16
 800432a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2204      	movs	r2, #4
 8004330:	645a      	str	r2, [r3, #68]	; 0x44
 8004332:	e002      	b.n	800433a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2220      	movs	r2, #32
 8004340:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	491f      	ldr	r1, [pc, #124]	; (80043cc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800434e:	400a      	ands	r2, r1
 8004350:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2241      	movs	r2, #65	; 0x41
 8004356:	2120      	movs	r1, #32
 8004358:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2242      	movs	r2, #66	; 0x42
 800435e:	2100      	movs	r1, #0
 8004360:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2240      	movs	r2, #64	; 0x40
 8004366:	2100      	movs	r1, #0
 8004368:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e029      	b.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436e:	f7fe fad1 	bl	8002914 <HAL_GetTick>
 8004372:	0002      	movs	r2, r0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d116      	bne.n	80043b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2204      	movs	r2, #4
 800438c:	4013      	ands	r3, r2
 800438e:	2b04      	cmp	r3, #4
 8004390:	d00f      	beq.n	80043b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	2220      	movs	r2, #32
 8004398:	431a      	orrs	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2241      	movs	r2, #65	; 0x41
 80043a2:	2120      	movs	r1, #32
 80043a4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2240      	movs	r2, #64	; 0x40
 80043aa:	2100      	movs	r1, #0
 80043ac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e007      	b.n	80043c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	2204      	movs	r2, #4
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d18c      	bne.n	80042da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b004      	add	sp, #16
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	fe00e800 	.word	0xfe00e800

080043d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b08b      	sub	sp, #44	; 0x2c
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043dc:	2327      	movs	r3, #39	; 0x27
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2210      	movs	r2, #16
 80043f8:	4013      	ands	r3, r2
 80043fa:	d100      	bne.n	80043fe <I2C_IsErrorOccurred+0x2e>
 80043fc:	e082      	b.n	8004504 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2210      	movs	r2, #16
 8004404:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004406:	e060      	b.n	80044ca <I2C_IsErrorOccurred+0xfa>
 8004408:	2427      	movs	r4, #39	; 0x27
 800440a:	193b      	adds	r3, r7, r4
 800440c:	193a      	adds	r2, r7, r4
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	3301      	adds	r3, #1
 8004416:	d058      	beq.n	80044ca <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004418:	f7fe fa7c 	bl	8002914 <HAL_GetTick>
 800441c:	0002      	movs	r2, r0
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	429a      	cmp	r2, r3
 8004426:	d306      	bcc.n	8004436 <I2C_IsErrorOccurred+0x66>
 8004428:	193b      	adds	r3, r7, r4
 800442a:	193a      	adds	r2, r7, r4
 800442c:	7812      	ldrb	r2, [r2, #0]
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d149      	bne.n	80044ca <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	01db      	lsls	r3, r3, #7
 8004440:	4013      	ands	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004444:	2013      	movs	r0, #19
 8004446:	183b      	adds	r3, r7, r0
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	2142      	movs	r1, #66	; 0x42
 800444c:	5c52      	ldrb	r2, [r2, r1]
 800444e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	2380      	movs	r3, #128	; 0x80
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	401a      	ands	r2, r3
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	429a      	cmp	r2, r3
 8004462:	d126      	bne.n	80044b2 <I2C_IsErrorOccurred+0xe2>
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	2380      	movs	r3, #128	; 0x80
 8004468:	01db      	lsls	r3, r3, #7
 800446a:	429a      	cmp	r2, r3
 800446c:	d021      	beq.n	80044b2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800446e:	183b      	adds	r3, r7, r0
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b20      	cmp	r3, #32
 8004474:	d01d      	beq.n	80044b2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2180      	movs	r1, #128	; 0x80
 8004482:	01c9      	lsls	r1, r1, #7
 8004484:	430a      	orrs	r2, r1
 8004486:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004488:	f7fe fa44 	bl	8002914 <HAL_GetTick>
 800448c:	0003      	movs	r3, r0
 800448e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004490:	e00f      	b.n	80044b2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004492:	f7fe fa3f 	bl	8002914 <HAL_GetTick>
 8004496:	0002      	movs	r2, r0
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b19      	cmp	r3, #25
 800449e:	d908      	bls.n	80044b2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	2220      	movs	r2, #32
 80044a4:	4313      	orrs	r3, r2
 80044a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044a8:	2327      	movs	r3, #39	; 0x27
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]

              break;
 80044b0:	e00b      	b.n	80044ca <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	2220      	movs	r2, #32
 80044ba:	4013      	ands	r3, r2
 80044bc:	2127      	movs	r1, #39	; 0x27
 80044be:	187a      	adds	r2, r7, r1
 80044c0:	1879      	adds	r1, r7, r1
 80044c2:	7809      	ldrb	r1, [r1, #0]
 80044c4:	7011      	strb	r1, [r2, #0]
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d1e3      	bne.n	8004492 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d004      	beq.n	80044e2 <I2C_IsErrorOccurred+0x112>
 80044d8:	2327      	movs	r3, #39	; 0x27
 80044da:	18fb      	adds	r3, r7, r3
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d092      	beq.n	8004408 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044e2:	2327      	movs	r3, #39	; 0x27
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d103      	bne.n	80044f4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2220      	movs	r2, #32
 80044f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	2204      	movs	r2, #4
 80044f8:	4313      	orrs	r3, r2
 80044fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044fc:	2327      	movs	r3, #39	; 0x27
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	4013      	ands	r3, r2
 8004514:	d00c      	beq.n	8004530 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	2201      	movs	r2, #1
 800451a:	4313      	orrs	r3, r2
 800451c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2280      	movs	r2, #128	; 0x80
 8004524:	0052      	lsls	r2, r2, #1
 8004526:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004528:	2327      	movs	r3, #39	; 0x27
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	00db      	lsls	r3, r3, #3
 8004536:	4013      	ands	r3, r2
 8004538:	d00c      	beq.n	8004554 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	2208      	movs	r2, #8
 800453e:	4313      	orrs	r3, r2
 8004540:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2280      	movs	r2, #128	; 0x80
 8004548:	00d2      	lsls	r2, r2, #3
 800454a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800454c:	2327      	movs	r3, #39	; 0x27
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	2201      	movs	r2, #1
 8004552:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4013      	ands	r3, r2
 800455c:	d00c      	beq.n	8004578 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2202      	movs	r2, #2
 8004562:	4313      	orrs	r3, r2
 8004564:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2280      	movs	r2, #128	; 0x80
 800456c:	0092      	lsls	r2, r2, #2
 800456e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004570:	2327      	movs	r3, #39	; 0x27
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	2201      	movs	r2, #1
 8004576:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004578:	2327      	movs	r3, #39	; 0x27
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d01d      	beq.n	80045be <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	0018      	movs	r0, r3
 8004586:	f7ff fda7 	bl	80040d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	490d      	ldr	r1, [pc, #52]	; (80045cc <I2C_IsErrorOccurred+0x1fc>)
 8004596:	400a      	ands	r2, r1
 8004598:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	431a      	orrs	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2241      	movs	r2, #65	; 0x41
 80045aa:	2120      	movs	r1, #32
 80045ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2242      	movs	r2, #66	; 0x42
 80045b2:	2100      	movs	r1, #0
 80045b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2240      	movs	r2, #64	; 0x40
 80045ba:	2100      	movs	r1, #0
 80045bc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80045be:	2327      	movs	r3, #39	; 0x27
 80045c0:	18fb      	adds	r3, r7, r3
 80045c2:	781b      	ldrb	r3, [r3, #0]
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b00b      	add	sp, #44	; 0x2c
 80045ca:	bd90      	pop	{r4, r7, pc}
 80045cc:	fe00e800 	.word	0xfe00e800

080045d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	0008      	movs	r0, r1
 80045da:	0011      	movs	r1, r2
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	240a      	movs	r4, #10
 80045e0:	193b      	adds	r3, r7, r4
 80045e2:	1c02      	adds	r2, r0, #0
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	2009      	movs	r0, #9
 80045e8:	183b      	adds	r3, r7, r0
 80045ea:	1c0a      	adds	r2, r1, #0
 80045ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045ee:	193b      	adds	r3, r7, r4
 80045f0:	881b      	ldrh	r3, [r3, #0]
 80045f2:	059b      	lsls	r3, r3, #22
 80045f4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	0419      	lsls	r1, r3, #16
 80045fc:	23ff      	movs	r3, #255	; 0xff
 80045fe:	041b      	lsls	r3, r3, #16
 8004600:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004602:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	4313      	orrs	r3, r2
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800461a:	0d51      	lsrs	r1, r2, #21
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	00d2      	lsls	r2, r2, #3
 8004620:	400a      	ands	r2, r1
 8004622:	4907      	ldr	r1, [pc, #28]	; (8004640 <I2C_TransferConfig+0x70>)
 8004624:	430a      	orrs	r2, r1
 8004626:	43d2      	mvns	r2, r2
 8004628:	401a      	ands	r2, r3
 800462a:	0011      	movs	r1, r2
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b007      	add	sp, #28
 800463c:	bd90      	pop	{r4, r7, pc}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	03ff63ff 	.word	0x03ff63ff

08004644 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2241      	movs	r2, #65	; 0x41
 8004652:	5c9b      	ldrb	r3, [r3, r2]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b20      	cmp	r3, #32
 8004658:	d138      	bne.n	80046cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2240      	movs	r2, #64	; 0x40
 800465e:	5c9b      	ldrb	r3, [r3, r2]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004664:	2302      	movs	r3, #2
 8004666:	e032      	b.n	80046ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	2101      	movs	r1, #1
 800466e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2241      	movs	r2, #65	; 0x41
 8004674:	2124      	movs	r1, #36	; 0x24
 8004676:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2101      	movs	r1, #1
 8004684:	438a      	bics	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4911      	ldr	r1, [pc, #68]	; (80046d8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004694:	400a      	ands	r2, r1
 8004696:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2101      	movs	r1, #1
 80046b4:	430a      	orrs	r2, r1
 80046b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2241      	movs	r2, #65	; 0x41
 80046bc:	2120      	movs	r1, #32
 80046be:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	2100      	movs	r1, #0
 80046c6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	ffffefff 	.word	0xffffefff

080046dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2241      	movs	r2, #65	; 0x41
 80046ea:	5c9b      	ldrb	r3, [r3, r2]
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d139      	bne.n	8004766 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2240      	movs	r2, #64	; 0x40
 80046f6:	5c9b      	ldrb	r3, [r3, r2]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e033      	b.n	8004768 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	2101      	movs	r1, #1
 8004706:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2241      	movs	r2, #65	; 0x41
 800470c:	2124      	movs	r1, #36	; 0x24
 800470e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2101      	movs	r1, #1
 800471c:	438a      	bics	r2, r1
 800471e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4a11      	ldr	r2, [pc, #68]	; (8004770 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2101      	movs	r1, #1
 800474e:	430a      	orrs	r2, r1
 8004750:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2241      	movs	r2, #65	; 0x41
 8004756:	2120      	movs	r1, #32
 8004758:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	2100      	movs	r1, #0
 8004760:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	e000      	b.n	8004768 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004766:	2302      	movs	r3, #2
  }
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b004      	add	sp, #16
 800476e:	bd80      	pop	{r7, pc}
 8004770:	fffff0ff 	.word	0xfffff0ff

08004774 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d102      	bne.n	8004788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f000 fb76 	bl	8004e74 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2201      	movs	r2, #1
 800478e:	4013      	ands	r3, r2
 8004790:	d100      	bne.n	8004794 <HAL_RCC_OscConfig+0x20>
 8004792:	e08e      	b.n	80048b2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004794:	4bc5      	ldr	r3, [pc, #788]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	220c      	movs	r2, #12
 800479a:	4013      	ands	r3, r2
 800479c:	2b04      	cmp	r3, #4
 800479e:	d00e      	beq.n	80047be <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047a0:	4bc2      	ldr	r3, [pc, #776]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	220c      	movs	r2, #12
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d117      	bne.n	80047dc <HAL_RCC_OscConfig+0x68>
 80047ac:	4bbf      	ldr	r3, [pc, #764]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	23c0      	movs	r3, #192	; 0xc0
 80047b2:	025b      	lsls	r3, r3, #9
 80047b4:	401a      	ands	r2, r3
 80047b6:	2380      	movs	r3, #128	; 0x80
 80047b8:	025b      	lsls	r3, r3, #9
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d10e      	bne.n	80047dc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047be:	4bbb      	ldr	r3, [pc, #748]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	029b      	lsls	r3, r3, #10
 80047c6:	4013      	ands	r3, r2
 80047c8:	d100      	bne.n	80047cc <HAL_RCC_OscConfig+0x58>
 80047ca:	e071      	b.n	80048b0 <HAL_RCC_OscConfig+0x13c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d000      	beq.n	80047d6 <HAL_RCC_OscConfig+0x62>
 80047d4:	e06c      	b.n	80048b0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f000 fb4c 	bl	8004e74 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d107      	bne.n	80047f4 <HAL_RCC_OscConfig+0x80>
 80047e4:	4bb1      	ldr	r3, [pc, #708]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	4bb0      	ldr	r3, [pc, #704]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	0249      	lsls	r1, r1, #9
 80047ee:	430a      	orrs	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e02f      	b.n	8004854 <HAL_RCC_OscConfig+0xe0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10c      	bne.n	8004816 <HAL_RCC_OscConfig+0xa2>
 80047fc:	4bab      	ldr	r3, [pc, #684]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4baa      	ldr	r3, [pc, #680]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004802:	49ab      	ldr	r1, [pc, #684]	; (8004ab0 <HAL_RCC_OscConfig+0x33c>)
 8004804:	400a      	ands	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	4ba8      	ldr	r3, [pc, #672]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4ba7      	ldr	r3, [pc, #668]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800480e:	49a9      	ldr	r1, [pc, #676]	; (8004ab4 <HAL_RCC_OscConfig+0x340>)
 8004810:	400a      	ands	r2, r1
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	e01e      	b.n	8004854 <HAL_RCC_OscConfig+0xe0>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b05      	cmp	r3, #5
 800481c:	d10e      	bne.n	800483c <HAL_RCC_OscConfig+0xc8>
 800481e:	4ba3      	ldr	r3, [pc, #652]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4ba2      	ldr	r3, [pc, #648]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004824:	2180      	movs	r1, #128	; 0x80
 8004826:	02c9      	lsls	r1, r1, #11
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	4b9f      	ldr	r3, [pc, #636]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b9e      	ldr	r3, [pc, #632]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004832:	2180      	movs	r1, #128	; 0x80
 8004834:	0249      	lsls	r1, r1, #9
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0xe0>
 800483c:	4b9b      	ldr	r3, [pc, #620]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b9a      	ldr	r3, [pc, #616]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004842:	499b      	ldr	r1, [pc, #620]	; (8004ab0 <HAL_RCC_OscConfig+0x33c>)
 8004844:	400a      	ands	r2, r1
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	4b98      	ldr	r3, [pc, #608]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b97      	ldr	r3, [pc, #604]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800484e:	4999      	ldr	r1, [pc, #612]	; (8004ab4 <HAL_RCC_OscConfig+0x340>)
 8004850:	400a      	ands	r2, r1
 8004852:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d014      	beq.n	8004886 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fe f85a 	bl	8002914 <HAL_GetTick>
 8004860:	0003      	movs	r3, r0
 8004862:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004866:	f7fe f855 	bl	8002914 <HAL_GetTick>
 800486a:	0002      	movs	r2, r0
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b64      	cmp	r3, #100	; 0x64
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e2fd      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004878:	4b8c      	ldr	r3, [pc, #560]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	029b      	lsls	r3, r3, #10
 8004880:	4013      	ands	r3, r2
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0xf2>
 8004884:	e015      	b.n	80048b2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004886:	f7fe f845 	bl	8002914 <HAL_GetTick>
 800488a:	0003      	movs	r3, r0
 800488c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004890:	f7fe f840 	bl	8002914 <HAL_GetTick>
 8004894:	0002      	movs	r2, r0
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	; 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e2e8      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	4b82      	ldr	r3, [pc, #520]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	029b      	lsls	r3, r3, #10
 80048aa:	4013      	ands	r3, r2
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x11c>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2202      	movs	r2, #2
 80048b8:	4013      	ands	r3, r2
 80048ba:	d100      	bne.n	80048be <HAL_RCC_OscConfig+0x14a>
 80048bc:	e06c      	b.n	8004998 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80048be:	4b7b      	ldr	r3, [pc, #492]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	220c      	movs	r2, #12
 80048c4:	4013      	ands	r3, r2
 80048c6:	d00e      	beq.n	80048e6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80048c8:	4b78      	ldr	r3, [pc, #480]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	220c      	movs	r2, #12
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d11f      	bne.n	8004914 <HAL_RCC_OscConfig+0x1a0>
 80048d4:	4b75      	ldr	r3, [pc, #468]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	23c0      	movs	r3, #192	; 0xc0
 80048da:	025b      	lsls	r3, r3, #9
 80048dc:	401a      	ands	r2, r3
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d116      	bne.n	8004914 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	4b71      	ldr	r3, [pc, #452]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2202      	movs	r2, #2
 80048ec:	4013      	ands	r3, r2
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_OscConfig+0x188>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e2bb      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fc:	4b6b      	ldr	r3, [pc, #428]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	22f8      	movs	r2, #248	; 0xf8
 8004902:	4393      	bics	r3, r2
 8004904:	0019      	movs	r1, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	00da      	lsls	r2, r3, #3
 800490c:	4b67      	ldr	r3, [pc, #412]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800490e:	430a      	orrs	r2, r1
 8004910:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004912:	e041      	b.n	8004998 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d024      	beq.n	8004966 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800491c:	4b63      	ldr	r3, [pc, #396]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	4b62      	ldr	r3, [pc, #392]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004922:	2101      	movs	r1, #1
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7fd fff4 	bl	8002914 <HAL_GetTick>
 800492c:	0003      	movs	r3, r0
 800492e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004932:	f7fd ffef 	bl	8002914 <HAL_GetTick>
 8004936:	0002      	movs	r2, r0
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e297      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	4b59      	ldr	r3, [pc, #356]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2202      	movs	r2, #2
 800494a:	4013      	ands	r3, r2
 800494c:	d0f1      	beq.n	8004932 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494e:	4b57      	ldr	r3, [pc, #348]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	22f8      	movs	r2, #248	; 0xf8
 8004954:	4393      	bics	r3, r2
 8004956:	0019      	movs	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	00da      	lsls	r2, r3, #3
 800495e:	4b53      	ldr	r3, [pc, #332]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004960:	430a      	orrs	r2, r1
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	e018      	b.n	8004998 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004966:	4b51      	ldr	r3, [pc, #324]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b50      	ldr	r3, [pc, #320]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 800496c:	2101      	movs	r1, #1
 800496e:	438a      	bics	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004972:	f7fd ffcf 	bl	8002914 <HAL_GetTick>
 8004976:	0003      	movs	r3, r0
 8004978:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800497c:	f7fd ffca 	bl	8002914 <HAL_GetTick>
 8004980:	0002      	movs	r2, r0
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e272      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2202      	movs	r2, #2
 8004994:	4013      	ands	r3, r2
 8004996:	d1f1      	bne.n	800497c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2208      	movs	r2, #8
 800499e:	4013      	ands	r3, r2
 80049a0:	d036      	beq.n	8004a10 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d019      	beq.n	80049de <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049aa:	4b40      	ldr	r3, [pc, #256]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80049ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ae:	4b3f      	ldr	r3, [pc, #252]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80049b0:	2101      	movs	r1, #1
 80049b2:	430a      	orrs	r2, r1
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fd ffad 	bl	8002914 <HAL_GetTick>
 80049ba:	0003      	movs	r3, r0
 80049bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049c0:	f7fd ffa8 	bl	8002914 <HAL_GetTick>
 80049c4:	0002      	movs	r2, r0
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e250      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049d2:	4b36      	ldr	r3, [pc, #216]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2202      	movs	r2, #2
 80049d8:	4013      	ands	r3, r2
 80049da:	d0f1      	beq.n	80049c0 <HAL_RCC_OscConfig+0x24c>
 80049dc:	e018      	b.n	8004a10 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049de:	4b33      	ldr	r3, [pc, #204]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80049e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049e2:	4b32      	ldr	r3, [pc, #200]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 80049e4:	2101      	movs	r1, #1
 80049e6:	438a      	bics	r2, r1
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ea:	f7fd ff93 	bl	8002914 <HAL_GetTick>
 80049ee:	0003      	movs	r3, r0
 80049f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f4:	f7fd ff8e 	bl	8002914 <HAL_GetTick>
 80049f8:	0002      	movs	r2, r0
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e236      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a06:	4b29      	ldr	r3, [pc, #164]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d1f1      	bne.n	80049f4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2204      	movs	r2, #4
 8004a16:	4013      	ands	r3, r2
 8004a18:	d100      	bne.n	8004a1c <HAL_RCC_OscConfig+0x2a8>
 8004a1a:	e0b5      	b.n	8004b88 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1c:	201f      	movs	r0, #31
 8004a1e:	183b      	adds	r3, r7, r0
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a24:	4b21      	ldr	r3, [pc, #132]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	055b      	lsls	r3, r3, #21
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d110      	bne.n	8004a52 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a30:	4b1e      	ldr	r3, [pc, #120]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	4b1d      	ldr	r3, [pc, #116]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004a36:	2180      	movs	r1, #128	; 0x80
 8004a38:	0549      	lsls	r1, r1, #21
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	61da      	str	r2, [r3, #28]
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	055b      	lsls	r3, r3, #21
 8004a46:	4013      	ands	r3, r2
 8004a48:	60fb      	str	r3, [r7, #12]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a4c:	183b      	adds	r3, r7, r0
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a52:	4b19      	ldr	r3, [pc, #100]	; (8004ab8 <HAL_RCC_OscConfig+0x344>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	d11a      	bne.n	8004a94 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a5e:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <HAL_RCC_OscConfig+0x344>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <HAL_RCC_OscConfig+0x344>)
 8004a64:	2180      	movs	r1, #128	; 0x80
 8004a66:	0049      	lsls	r1, r1, #1
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a6c:	f7fd ff52 	bl	8002914 <HAL_GetTick>
 8004a70:	0003      	movs	r3, r0
 8004a72:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a76:	f7fd ff4d 	bl	8002914 <HAL_GetTick>
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b64      	cmp	r3, #100	; 0x64
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e1f5      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a88:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <HAL_RCC_OscConfig+0x344>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	2380      	movs	r3, #128	; 0x80
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	4013      	ands	r3, r2
 8004a92:	d0f0      	beq.n	8004a76 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d10f      	bne.n	8004abc <HAL_RCC_OscConfig+0x348>
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	4b02      	ldr	r3, [pc, #8]	; (8004aac <HAL_RCC_OscConfig+0x338>)
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	621a      	str	r2, [r3, #32]
 8004aa8:	e036      	b.n	8004b18 <HAL_RCC_OscConfig+0x3a4>
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	fffeffff 	.word	0xfffeffff
 8004ab4:	fffbffff 	.word	0xfffbffff
 8004ab8:	40007000 	.word	0x40007000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10c      	bne.n	8004ade <HAL_RCC_OscConfig+0x36a>
 8004ac4:	4bca      	ldr	r3, [pc, #808]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004ac6:	6a1a      	ldr	r2, [r3, #32]
 8004ac8:	4bc9      	ldr	r3, [pc, #804]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004aca:	2101      	movs	r1, #1
 8004acc:	438a      	bics	r2, r1
 8004ace:	621a      	str	r2, [r3, #32]
 8004ad0:	4bc7      	ldr	r3, [pc, #796]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004ad2:	6a1a      	ldr	r2, [r3, #32]
 8004ad4:	4bc6      	ldr	r3, [pc, #792]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004ad6:	2104      	movs	r1, #4
 8004ad8:	438a      	bics	r2, r1
 8004ada:	621a      	str	r2, [r3, #32]
 8004adc:	e01c      	b.n	8004b18 <HAL_RCC_OscConfig+0x3a4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b05      	cmp	r3, #5
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x38c>
 8004ae6:	4bc2      	ldr	r3, [pc, #776]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	4bc1      	ldr	r3, [pc, #772]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004aec:	2104      	movs	r1, #4
 8004aee:	430a      	orrs	r2, r1
 8004af0:	621a      	str	r2, [r3, #32]
 8004af2:	4bbf      	ldr	r3, [pc, #764]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004af4:	6a1a      	ldr	r2, [r3, #32]
 8004af6:	4bbe      	ldr	r3, [pc, #760]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004af8:	2101      	movs	r1, #1
 8004afa:	430a      	orrs	r2, r1
 8004afc:	621a      	str	r2, [r3, #32]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0x3a4>
 8004b00:	4bbb      	ldr	r3, [pc, #748]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b02:	6a1a      	ldr	r2, [r3, #32]
 8004b04:	4bba      	ldr	r3, [pc, #744]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b06:	2101      	movs	r1, #1
 8004b08:	438a      	bics	r2, r1
 8004b0a:	621a      	str	r2, [r3, #32]
 8004b0c:	4bb8      	ldr	r3, [pc, #736]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	4bb7      	ldr	r3, [pc, #732]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b12:	2104      	movs	r1, #4
 8004b14:	438a      	bics	r2, r1
 8004b16:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d014      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b20:	f7fd fef8 	bl	8002914 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b28:	e009      	b.n	8004b3e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fd fef3 	bl	8002914 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	4aaf      	ldr	r2, [pc, #700]	; (8004df4 <HAL_RCC_OscConfig+0x680>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e19a      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3e:	4bac      	ldr	r3, [pc, #688]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	2202      	movs	r2, #2
 8004b44:	4013      	ands	r3, r2
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x3b6>
 8004b48:	e013      	b.n	8004b72 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b4a:	f7fd fee3 	bl	8002914 <HAL_GetTick>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b52:	e009      	b.n	8004b68 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7fd fede 	bl	8002914 <HAL_GetTick>
 8004b58:	0002      	movs	r2, r0
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	4aa5      	ldr	r2, [pc, #660]	; (8004df4 <HAL_RCC_OscConfig+0x680>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e185      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b68:	4ba1      	ldr	r3, [pc, #644]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b72:	231f      	movs	r3, #31
 8004b74:	18fb      	adds	r3, r7, r3
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d105      	bne.n	8004b88 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b7c:	4b9c      	ldr	r3, [pc, #624]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	4b9b      	ldr	r3, [pc, #620]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b82:	499d      	ldr	r1, [pc, #628]	; (8004df8 <HAL_RCC_OscConfig+0x684>)
 8004b84:	400a      	ands	r2, r1
 8004b86:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d063      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d12a      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004b9a:	4b95      	ldr	r3, [pc, #596]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9e:	4b94      	ldr	r3, [pc, #592]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004ba0:	2104      	movs	r1, #4
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004ba6:	4b92      	ldr	r3, [pc, #584]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004baa:	4b91      	ldr	r3, [pc, #580]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004bac:	2101      	movs	r1, #1
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb2:	f7fd feaf 	bl	8002914 <HAL_GetTick>
 8004bb6:	0003      	movs	r3, r0
 8004bb8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004bbc:	f7fd feaa 	bl	8002914 <HAL_GetTick>
 8004bc0:	0002      	movs	r2, r0
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e152      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004bce:	4b88      	ldr	r3, [pc, #544]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	d0f1      	beq.n	8004bbc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004bd8:	4b85      	ldr	r3, [pc, #532]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bdc:	22f8      	movs	r2, #248	; 0xf8
 8004bde:	4393      	bics	r3, r2
 8004be0:	0019      	movs	r1, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	00da      	lsls	r2, r3, #3
 8004be8:	4b81      	ldr	r3, [pc, #516]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004bea:	430a      	orrs	r2, r1
 8004bec:	635a      	str	r2, [r3, #52]	; 0x34
 8004bee:	e034      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	3305      	adds	r3, #5
 8004bf6:	d111      	bne.n	8004c1c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004bf8:	4b7d      	ldr	r3, [pc, #500]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bfc:	4b7c      	ldr	r3, [pc, #496]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004bfe:	2104      	movs	r1, #4
 8004c00:	438a      	bics	r2, r1
 8004c02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004c04:	4b7a      	ldr	r3, [pc, #488]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c08:	22f8      	movs	r2, #248	; 0xf8
 8004c0a:	4393      	bics	r3, r2
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	00da      	lsls	r2, r3, #3
 8004c14:	4b76      	ldr	r3, [pc, #472]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c16:	430a      	orrs	r2, r1
 8004c18:	635a      	str	r2, [r3, #52]	; 0x34
 8004c1a:	e01e      	b.n	8004c5a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004c1c:	4b74      	ldr	r3, [pc, #464]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c20:	4b73      	ldr	r3, [pc, #460]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c22:	2104      	movs	r1, #4
 8004c24:	430a      	orrs	r2, r1
 8004c26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004c28:	4b71      	ldr	r3, [pc, #452]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c2c:	4b70      	ldr	r3, [pc, #448]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c2e:	2101      	movs	r1, #1
 8004c30:	438a      	bics	r2, r1
 8004c32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c34:	f7fd fe6e 	bl	8002914 <HAL_GetTick>
 8004c38:	0003      	movs	r3, r0
 8004c3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004c3e:	f7fd fe69 	bl	8002914 <HAL_GetTick>
 8004c42:	0002      	movs	r2, r0
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e111      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004c50:	4b67      	ldr	r3, [pc, #412]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	2202      	movs	r2, #2
 8004c56:	4013      	ands	r3, r2
 8004c58:	d1f1      	bne.n	8004c3e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	4013      	ands	r3, r2
 8004c62:	d05c      	beq.n	8004d1e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004c64:	4b62      	ldr	r3, [pc, #392]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	220c      	movs	r2, #12
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b0c      	cmp	r3, #12
 8004c6e:	d00e      	beq.n	8004c8e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004c70:	4b5f      	ldr	r3, [pc, #380]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	220c      	movs	r2, #12
 8004c76:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d114      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004c7c:	4b5c      	ldr	r3, [pc, #368]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	23c0      	movs	r3, #192	; 0xc0
 8004c82:	025b      	lsls	r3, r3, #9
 8004c84:	401a      	ands	r2, r3
 8004c86:	23c0      	movs	r3, #192	; 0xc0
 8004c88:	025b      	lsls	r3, r3, #9
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d10b      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004c8e:	4b58      	ldr	r3, [pc, #352]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004c90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	029b      	lsls	r3, r3, #10
 8004c96:	4013      	ands	r3, r2
 8004c98:	d040      	beq.n	8004d1c <HAL_RCC_OscConfig+0x5a8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d03c      	beq.n	8004d1c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0e6      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01b      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004cae:	4b50      	ldr	r3, [pc, #320]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb2:	4b4f      	ldr	r3, [pc, #316]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004cb4:	2180      	movs	r1, #128	; 0x80
 8004cb6:	0249      	lsls	r1, r1, #9
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fd fe2a 	bl	8002914 <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cc6:	f7fd fe25 	bl	8002914 <HAL_GetTick>
 8004cca:	0002      	movs	r2, r0
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e0cd      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004cd8:	4b45      	ldr	r3, [pc, #276]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	029b      	lsls	r3, r3, #10
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x552>
 8004ce4:	e01b      	b.n	8004d1e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004ce6:	4b42      	ldr	r3, [pc, #264]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cea:	4b41      	ldr	r3, [pc, #260]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004cec:	4943      	ldr	r1, [pc, #268]	; (8004dfc <HAL_RCC_OscConfig+0x688>)
 8004cee:	400a      	ands	r2, r1
 8004cf0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fd fe0f 	bl	8002914 <HAL_GetTick>
 8004cf6:	0003      	movs	r3, r0
 8004cf8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cfc:	f7fd fe0a 	bl	8002914 <HAL_GetTick>
 8004d00:	0002      	movs	r2, r0
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e0b2      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004d0e:	4b38      	ldr	r3, [pc, #224]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d12:	2380      	movs	r3, #128	; 0x80
 8004d14:	029b      	lsls	r3, r3, #10
 8004d16:	4013      	ands	r3, r2
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x588>
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004d1c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d100      	bne.n	8004d28 <HAL_RCC_OscConfig+0x5b4>
 8004d26:	e0a4      	b.n	8004e72 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d28:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	220c      	movs	r2, #12
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d100      	bne.n	8004d36 <HAL_RCC_OscConfig+0x5c2>
 8004d34:	e078      	b.n	8004e28 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d14c      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d3e:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b2b      	ldr	r3, [pc, #172]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d44:	492e      	ldr	r1, [pc, #184]	; (8004e00 <HAL_RCC_OscConfig+0x68c>)
 8004d46:	400a      	ands	r2, r1
 8004d48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4a:	f7fd fde3 	bl	8002914 <HAL_GetTick>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fd fdde 	bl	8002914 <HAL_GetTick>
 8004d58:	0002      	movs	r2, r0
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e086      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d66:	4b22      	ldr	r3, [pc, #136]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	2380      	movs	r3, #128	; 0x80
 8004d6c:	049b      	lsls	r3, r3, #18
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d72:	4b1f      	ldr	r3, [pc, #124]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	220f      	movs	r2, #15
 8004d78:	4393      	bics	r3, r2
 8004d7a:	0019      	movs	r1, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d82:	430a      	orrs	r2, r1
 8004d84:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d86:	4b1a      	ldr	r3, [pc, #104]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <HAL_RCC_OscConfig+0x690>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	0019      	movs	r1, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4b12      	ldr	r3, [pc, #72]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004da6:	2180      	movs	r1, #128	; 0x80
 8004da8:	0449      	lsls	r1, r1, #17
 8004daa:	430a      	orrs	r2, r1
 8004dac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dae:	f7fd fdb1 	bl	8002914 <HAL_GetTick>
 8004db2:	0003      	movs	r3, r0
 8004db4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db8:	f7fd fdac 	bl	8002914 <HAL_GetTick>
 8004dbc:	0002      	movs	r2, r0
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e054      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	2380      	movs	r3, #128	; 0x80
 8004dd0:	049b      	lsls	r3, r3, #18
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d0f0      	beq.n	8004db8 <HAL_RCC_OscConfig+0x644>
 8004dd6:	e04c      	b.n	8004e72 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <HAL_RCC_OscConfig+0x67c>)
 8004dde:	4908      	ldr	r1, [pc, #32]	; (8004e00 <HAL_RCC_OscConfig+0x68c>)
 8004de0:	400a      	ands	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de4:	f7fd fd96 	bl	8002914 <HAL_GetTick>
 8004de8:	0003      	movs	r3, r0
 8004dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dec:	e015      	b.n	8004e1a <HAL_RCC_OscConfig+0x6a6>
 8004dee:	46c0      	nop			; (mov r8, r8)
 8004df0:	40021000 	.word	0x40021000
 8004df4:	00001388 	.word	0x00001388
 8004df8:	efffffff 	.word	0xefffffff
 8004dfc:	fffeffff 	.word	0xfffeffff
 8004e00:	feffffff 	.word	0xfeffffff
 8004e04:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e08:	f7fd fd84 	bl	8002914 <HAL_GetTick>
 8004e0c:	0002      	movs	r2, r0
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e02c      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e1a:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <HAL_RCC_OscConfig+0x708>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	2380      	movs	r3, #128	; 0x80
 8004e20:	049b      	lsls	r3, r3, #18
 8004e22:	4013      	ands	r3, r2
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x694>
 8004e26:	e024      	b.n	8004e72 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e01f      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004e34:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <HAL_RCC_OscConfig+0x708>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_RCC_OscConfig+0x708>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e40:	697a      	ldr	r2, [r7, #20]
 8004e42:	23c0      	movs	r3, #192	; 0xc0
 8004e44:	025b      	lsls	r3, r3, #9
 8004e46:	401a      	ands	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d10e      	bne.n	8004e6e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	220f      	movs	r2, #15
 8004e54:	401a      	ands	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	23f0      	movs	r3, #240	; 0xf0
 8004e62:	039b      	lsls	r3, r3, #14
 8004e64:	401a      	ands	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d001      	beq.n	8004e72 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b008      	add	sp, #32
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000

08004e80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0bf      	b.n	8005014 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e94:	4b61      	ldr	r3, [pc, #388]	; (800501c <HAL_RCC_ClockConfig+0x19c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d911      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b5e      	ldr	r3, [pc, #376]	; (800501c <HAL_RCC_ClockConfig+0x19c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	4393      	bics	r3, r2
 8004eaa:	0019      	movs	r1, r3
 8004eac:	4b5b      	ldr	r3, [pc, #364]	; (800501c <HAL_RCC_ClockConfig+0x19c>)
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb4:	4b59      	ldr	r3, [pc, #356]	; (800501c <HAL_RCC_ClockConfig+0x19c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	4013      	ands	r3, r2
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d001      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e0a6      	b.n	8005014 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	4013      	ands	r3, r2
 8004ece:	d015      	beq.n	8004efc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2204      	movs	r2, #4
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d006      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004eda:	4b51      	ldr	r3, [pc, #324]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	4b50      	ldr	r3, [pc, #320]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004ee0:	21e0      	movs	r1, #224	; 0xe0
 8004ee2:	00c9      	lsls	r1, r1, #3
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ee8:	4b4d      	ldr	r3, [pc, #308]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	22f0      	movs	r2, #240	; 0xf0
 8004eee:	4393      	bics	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	4b4a      	ldr	r3, [pc, #296]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2201      	movs	r2, #1
 8004f02:	4013      	ands	r3, r2
 8004f04:	d04c      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b44      	ldr	r3, [pc, #272]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	4013      	ands	r3, r2
 8004f18:	d120      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e07a      	b.n	8005014 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d107      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	2380      	movs	r3, #128	; 0x80
 8004f2c:	049b      	lsls	r3, r3, #18
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d114      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e06e      	b.n	8005014 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004f3e:	4b38      	ldr	r3, [pc, #224]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	4013      	ands	r3, r2
 8004f48:	d108      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e062      	b.n	8005014 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	4b34      	ldr	r3, [pc, #208]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2202      	movs	r2, #2
 8004f54:	4013      	ands	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e05b      	b.n	8005014 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5c:	4b30      	ldr	r3, [pc, #192]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2203      	movs	r2, #3
 8004f62:	4393      	bics	r3, r2
 8004f64:	0019      	movs	r1, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	4b2d      	ldr	r3, [pc, #180]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f70:	f7fd fcd0 	bl	8002914 <HAL_GetTick>
 8004f74:	0003      	movs	r3, r0
 8004f76:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f78:	e009      	b.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f7a:	f7fd fccb 	bl	8002914 <HAL_GetTick>
 8004f7e:	0002      	movs	r2, r0
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	4a27      	ldr	r2, [pc, #156]	; (8005024 <HAL_RCC_ClockConfig+0x1a4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e042      	b.n	8005014 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	4b24      	ldr	r3, [pc, #144]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	220c      	movs	r2, #12
 8004f94:	401a      	ands	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1ec      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b1e      	ldr	r3, [pc, #120]	; (800501c <HAL_RCC_ClockConfig+0x19c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d211      	bcs.n	8004fd2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_RCC_ClockConfig+0x19c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	4393      	bics	r3, r2
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	4b18      	ldr	r3, [pc, #96]	; (800501c <HAL_RCC_ClockConfig+0x19c>)
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fc0:	4b16      	ldr	r3, [pc, #88]	; (800501c <HAL_RCC_ClockConfig+0x19c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e020      	b.n	8005014 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	4013      	ands	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4a11      	ldr	r2, [pc, #68]	; (8005028 <HAL_RCC_ClockConfig+0x1a8>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004fec:	430a      	orrs	r2, r1
 8004fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ff0:	f000 f820 	bl	8005034 <HAL_RCC_GetSysClockFreq>
 8004ff4:	0001      	movs	r1, r0
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_RCC_ClockConfig+0x1a0>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	220f      	movs	r2, #15
 8004ffe:	4013      	ands	r3, r2
 8005000:	4a0a      	ldr	r2, [pc, #40]	; (800502c <HAL_RCC_ClockConfig+0x1ac>)
 8005002:	5cd3      	ldrb	r3, [r2, r3]
 8005004:	000a      	movs	r2, r1
 8005006:	40da      	lsrs	r2, r3
 8005008:	4b09      	ldr	r3, [pc, #36]	; (8005030 <HAL_RCC_ClockConfig+0x1b0>)
 800500a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800500c:	2000      	movs	r0, #0
 800500e:	f7fd fc3b 	bl	8002888 <HAL_InitTick>
  
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b004      	add	sp, #16
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40022000 	.word	0x40022000
 8005020:	40021000 	.word	0x40021000
 8005024:	00001388 	.word	0x00001388
 8005028:	fffff8ff 	.word	0xfffff8ff
 800502c:	08005460 	.word	0x08005460
 8005030:	2000000c 	.word	0x2000000c

08005034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800504e:	4b2d      	ldr	r3, [pc, #180]	; (8005104 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	220c      	movs	r2, #12
 8005058:	4013      	ands	r3, r2
 800505a:	2b0c      	cmp	r3, #12
 800505c:	d046      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0xb8>
 800505e:	d848      	bhi.n	80050f2 <HAL_RCC_GetSysClockFreq+0xbe>
 8005060:	2b04      	cmp	r3, #4
 8005062:	d002      	beq.n	800506a <HAL_RCC_GetSysClockFreq+0x36>
 8005064:	2b08      	cmp	r3, #8
 8005066:	d003      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0x3c>
 8005068:	e043      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800506a:	4b27      	ldr	r3, [pc, #156]	; (8005108 <HAL_RCC_GetSysClockFreq+0xd4>)
 800506c:	613b      	str	r3, [r7, #16]
      break;
 800506e:	e043      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	0c9b      	lsrs	r3, r3, #18
 8005074:	220f      	movs	r2, #15
 8005076:	4013      	ands	r3, r2
 8005078:	4a24      	ldr	r2, [pc, #144]	; (800510c <HAL_RCC_GetSysClockFreq+0xd8>)
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800507e:	4b21      	ldr	r3, [pc, #132]	; (8005104 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	220f      	movs	r2, #15
 8005084:	4013      	ands	r3, r2
 8005086:	4a22      	ldr	r2, [pc, #136]	; (8005110 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005088:	5cd3      	ldrb	r3, [r2, r3]
 800508a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	23c0      	movs	r3, #192	; 0xc0
 8005090:	025b      	lsls	r3, r3, #9
 8005092:	401a      	ands	r2, r3
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	025b      	lsls	r3, r3, #9
 8005098:	429a      	cmp	r2, r3
 800509a:	d109      	bne.n	80050b0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	481a      	ldr	r0, [pc, #104]	; (8005108 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050a0:	f7fb f832 	bl	8000108 <__udivsi3>
 80050a4:	0003      	movs	r3, r0
 80050a6:	001a      	movs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4353      	muls	r3, r2
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	e01a      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	23c0      	movs	r3, #192	; 0xc0
 80050b4:	025b      	lsls	r3, r3, #9
 80050b6:	401a      	ands	r2, r3
 80050b8:	23c0      	movs	r3, #192	; 0xc0
 80050ba:	025b      	lsls	r3, r3, #9
 80050bc:	429a      	cmp	r2, r3
 80050be:	d109      	bne.n	80050d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	4814      	ldr	r0, [pc, #80]	; (8005114 <HAL_RCC_GetSysClockFreq+0xe0>)
 80050c4:	f7fb f820 	bl	8000108 <__udivsi3>
 80050c8:	0003      	movs	r3, r0
 80050ca:	001a      	movs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4353      	muls	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	480c      	ldr	r0, [pc, #48]	; (8005108 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050d8:	f7fb f816 	bl	8000108 <__udivsi3>
 80050dc:	0003      	movs	r3, r0
 80050de:	001a      	movs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4353      	muls	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	613b      	str	r3, [r7, #16]
      break;
 80050ea:	e005      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80050ec:	4b09      	ldr	r3, [pc, #36]	; (8005114 <HAL_RCC_GetSysClockFreq+0xe0>)
 80050ee:	613b      	str	r3, [r7, #16]
      break;
 80050f0:	e002      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetSysClockFreq+0xd4>)
 80050f4:	613b      	str	r3, [r7, #16]
      break;
 80050f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80050f8:	693b      	ldr	r3, [r7, #16]
}
 80050fa:	0018      	movs	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b006      	add	sp, #24
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	40021000 	.word	0x40021000
 8005108:	007a1200 	.word	0x007a1200
 800510c:	08005470 	.word	0x08005470
 8005110:	08005480 	.word	0x08005480
 8005114:	02dc6c00 	.word	0x02dc6c00

08005118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	025b      	lsls	r3, r3, #9
 8005130:	4013      	ands	r3, r2
 8005132:	d100      	bne.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005134:	e08e      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005136:	2017      	movs	r0, #23
 8005138:	183b      	adds	r3, r7, r0
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800513e:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005140:	69da      	ldr	r2, [r3, #28]
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	055b      	lsls	r3, r3, #21
 8005146:	4013      	ands	r3, r2
 8005148:	d110      	bne.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800514a:	4b6b      	ldr	r3, [pc, #428]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800514c:	69da      	ldr	r2, [r3, #28]
 800514e:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	0549      	lsls	r1, r1, #21
 8005154:	430a      	orrs	r2, r1
 8005156:	61da      	str	r2, [r3, #28]
 8005158:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	2380      	movs	r3, #128	; 0x80
 800515e:	055b      	lsls	r3, r3, #21
 8005160:	4013      	ands	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005166:	183b      	adds	r3, r7, r0
 8005168:	2201      	movs	r2, #1
 800516a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516c:	4b63      	ldr	r3, [pc, #396]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4013      	ands	r3, r2
 8005176:	d11a      	bne.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005178:	4b60      	ldr	r3, [pc, #384]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4b5f      	ldr	r3, [pc, #380]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800517e:	2180      	movs	r1, #128	; 0x80
 8005180:	0049      	lsls	r1, r1, #1
 8005182:	430a      	orrs	r2, r1
 8005184:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005186:	f7fd fbc5 	bl	8002914 <HAL_GetTick>
 800518a:	0003      	movs	r3, r0
 800518c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518e:	e008      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005190:	f7fd fbc0 	bl	8002914 <HAL_GetTick>
 8005194:	0002      	movs	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b64      	cmp	r3, #100	; 0x64
 800519c:	d901      	bls.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e0a6      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a2:	4b56      	ldr	r3, [pc, #344]	; (80052fc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	2380      	movs	r3, #128	; 0x80
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	4013      	ands	r3, r2
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051ae:	4b52      	ldr	r3, [pc, #328]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051b0:	6a1a      	ldr	r2, [r3, #32]
 80051b2:	23c0      	movs	r3, #192	; 0xc0
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4013      	ands	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d034      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	23c0      	movs	r3, #192	; 0xc0
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4013      	ands	r3, r2
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d02c      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051d0:	4b49      	ldr	r3, [pc, #292]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	4a4a      	ldr	r2, [pc, #296]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051dc:	6a1a      	ldr	r2, [r3, #32]
 80051de:	4b46      	ldr	r3, [pc, #280]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051e0:	2180      	movs	r1, #128	; 0x80
 80051e2:	0249      	lsls	r1, r1, #9
 80051e4:	430a      	orrs	r2, r1
 80051e6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051e8:	4b43      	ldr	r3, [pc, #268]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051ea:	6a1a      	ldr	r2, [r3, #32]
 80051ec:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051ee:	4945      	ldr	r1, [pc, #276]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80051f0:	400a      	ands	r2, r1
 80051f2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051f4:	4b40      	ldr	r3, [pc, #256]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	4013      	ands	r3, r2
 8005200:	d013      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005202:	f7fd fb87 	bl	8002914 <HAL_GetTick>
 8005206:	0003      	movs	r3, r0
 8005208:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520a:	e009      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fd fb82 	bl	8002914 <HAL_GetTick>
 8005210:	0002      	movs	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	4a3c      	ldr	r2, [pc, #240]	; (8005308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e067      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005220:	4b35      	ldr	r3, [pc, #212]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	2202      	movs	r2, #2
 8005226:	4013      	ands	r3, r2
 8005228:	d0f0      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800522a:	4b33      	ldr	r3, [pc, #204]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	4a34      	ldr	r2, [pc, #208]	; (8005300 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005230:	4013      	ands	r3, r2
 8005232:	0019      	movs	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800523a:	430a      	orrs	r2, r1
 800523c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800523e:	2317      	movs	r3, #23
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d105      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800524e:	492f      	ldr	r1, [pc, #188]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005250:	400a      	ands	r2, r1
 8005252:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2201      	movs	r2, #1
 800525a:	4013      	ands	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800525e:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	2203      	movs	r2, #3
 8005264:	4393      	bics	r3, r2
 8005266:	0019      	movs	r1, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800526e:	430a      	orrs	r2, r1
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2202      	movs	r2, #2
 8005278:	4013      	ands	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800527c:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	4a23      	ldr	r2, [pc, #140]	; (8005310 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005282:	4013      	ands	r3, r2
 8005284:	0019      	movs	r1, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800528c:	430a      	orrs	r2, r1
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2220      	movs	r2, #32
 8005296:	4013      	ands	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800529a:	4b17      	ldr	r3, [pc, #92]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	2210      	movs	r2, #16
 80052a0:	4393      	bics	r3, r2
 80052a2:	0019      	movs	r1, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	4b13      	ldr	r3, [pc, #76]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052aa:	430a      	orrs	r2, r1
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	029b      	lsls	r3, r3, #10
 80052b6:	4013      	ands	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052ba:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	4393      	bics	r3, r2
 80052c2:	0019      	movs	r1, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699a      	ldr	r2, [r3, #24]
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ca:	430a      	orrs	r2, r1
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4013      	ands	r3, r2
 80052d8:	d009      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052da:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	2240      	movs	r2, #64	; 0x40
 80052e0:	4393      	bics	r3, r2
 80052e2:	0019      	movs	r1, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695a      	ldr	r2, [r3, #20]
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80052ea:	430a      	orrs	r2, r1
 80052ec:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	0018      	movs	r0, r3
 80052f2:	46bd      	mov	sp, r7
 80052f4:	b006      	add	sp, #24
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40007000 	.word	0x40007000
 8005300:	fffffcff 	.word	0xfffffcff
 8005304:	fffeffff 	.word	0xfffeffff
 8005308:	00001388 	.word	0x00001388
 800530c:	efffffff 	.word	0xefffffff
 8005310:	fffcffff 	.word	0xfffcffff

08005314 <memset>:
 8005314:	0003      	movs	r3, r0
 8005316:	1882      	adds	r2, r0, r2
 8005318:	4293      	cmp	r3, r2
 800531a:	d100      	bne.n	800531e <memset+0xa>
 800531c:	4770      	bx	lr
 800531e:	7019      	strb	r1, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	e7f9      	b.n	8005318 <memset+0x4>

08005324 <__libc_init_array>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	2600      	movs	r6, #0
 8005328:	4c0c      	ldr	r4, [pc, #48]	; (800535c <__libc_init_array+0x38>)
 800532a:	4d0d      	ldr	r5, [pc, #52]	; (8005360 <__libc_init_array+0x3c>)
 800532c:	1b64      	subs	r4, r4, r5
 800532e:	10a4      	asrs	r4, r4, #2
 8005330:	42a6      	cmp	r6, r4
 8005332:	d109      	bne.n	8005348 <__libc_init_array+0x24>
 8005334:	2600      	movs	r6, #0
 8005336:	f000 f823 	bl	8005380 <_init>
 800533a:	4c0a      	ldr	r4, [pc, #40]	; (8005364 <__libc_init_array+0x40>)
 800533c:	4d0a      	ldr	r5, [pc, #40]	; (8005368 <__libc_init_array+0x44>)
 800533e:	1b64      	subs	r4, r4, r5
 8005340:	10a4      	asrs	r4, r4, #2
 8005342:	42a6      	cmp	r6, r4
 8005344:	d105      	bne.n	8005352 <__libc_init_array+0x2e>
 8005346:	bd70      	pop	{r4, r5, r6, pc}
 8005348:	00b3      	lsls	r3, r6, #2
 800534a:	58eb      	ldr	r3, [r5, r3]
 800534c:	4798      	blx	r3
 800534e:	3601      	adds	r6, #1
 8005350:	e7ee      	b.n	8005330 <__libc_init_array+0xc>
 8005352:	00b3      	lsls	r3, r6, #2
 8005354:	58eb      	ldr	r3, [r5, r3]
 8005356:	4798      	blx	r3
 8005358:	3601      	adds	r6, #1
 800535a:	e7f2      	b.n	8005342 <__libc_init_array+0x1e>
 800535c:	08005490 	.word	0x08005490
 8005360:	08005490 	.word	0x08005490
 8005364:	08005494 	.word	0x08005494
 8005368:	08005490 	.word	0x08005490

0800536c <memcpy>:
 800536c:	2300      	movs	r3, #0
 800536e:	b510      	push	{r4, lr}
 8005370:	429a      	cmp	r2, r3
 8005372:	d100      	bne.n	8005376 <memcpy+0xa>
 8005374:	bd10      	pop	{r4, pc}
 8005376:	5ccc      	ldrb	r4, [r1, r3]
 8005378:	54c4      	strb	r4, [r0, r3]
 800537a:	3301      	adds	r3, #1
 800537c:	e7f8      	b.n	8005370 <memcpy+0x4>
	...

08005380 <_init>:
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005386:	bc08      	pop	{r3}
 8005388:	469e      	mov	lr, r3
 800538a:	4770      	bx	lr

0800538c <_fini>:
 800538c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005392:	bc08      	pop	{r3}
 8005394:	469e      	mov	lr, r3
 8005396:	4770      	bx	lr
