
Sensor_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004518  08004518  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004518  08004518  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004518  08004518  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000014  08004534  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08004534  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008ed7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b10  00000000  00000000  00028f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c0  00000000  00000000  0002aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a7  00000000  00000000  0002b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001908f  00000000  00000000  0002b9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b896  00000000  00000000  00044a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f602  00000000  00000000  000502f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f2c  00000000  00000000  000df8f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000e1824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004488 	.word	0x08004488

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004488 	.word	0x08004488

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_ddiv>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	4657      	mov	r7, sl
 80003f8:	464e      	mov	r6, r9
 80003fa:	4645      	mov	r5, r8
 80003fc:	46de      	mov	lr, fp
 80003fe:	b5e0      	push	{r5, r6, r7, lr}
 8000400:	030c      	lsls	r4, r1, #12
 8000402:	001f      	movs	r7, r3
 8000404:	004b      	lsls	r3, r1, #1
 8000406:	4681      	mov	r9, r0
 8000408:	4692      	mov	sl, r2
 800040a:	0005      	movs	r5, r0
 800040c:	b085      	sub	sp, #20
 800040e:	0b24      	lsrs	r4, r4, #12
 8000410:	0d5b      	lsrs	r3, r3, #21
 8000412:	0fce      	lsrs	r6, r1, #31
 8000414:	2b00      	cmp	r3, #0
 8000416:	d100      	bne.n	800041a <__aeabi_ddiv+0x26>
 8000418:	e152      	b.n	80006c0 <__aeabi_ddiv+0x2cc>
 800041a:	4ad2      	ldr	r2, [pc, #840]	; (8000764 <__aeabi_ddiv+0x370>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d100      	bne.n	8000422 <__aeabi_ddiv+0x2e>
 8000420:	e16e      	b.n	8000700 <__aeabi_ddiv+0x30c>
 8000422:	0f42      	lsrs	r2, r0, #29
 8000424:	00e4      	lsls	r4, r4, #3
 8000426:	4314      	orrs	r4, r2
 8000428:	2280      	movs	r2, #128	; 0x80
 800042a:	0412      	lsls	r2, r2, #16
 800042c:	4322      	orrs	r2, r4
 800042e:	4690      	mov	r8, r2
 8000430:	4acd      	ldr	r2, [pc, #820]	; (8000768 <__aeabi_ddiv+0x374>)
 8000432:	00c5      	lsls	r5, r0, #3
 8000434:	4693      	mov	fp, r2
 8000436:	449b      	add	fp, r3
 8000438:	2300      	movs	r3, #0
 800043a:	4699      	mov	r9, r3
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	033c      	lsls	r4, r7, #12
 8000440:	007b      	lsls	r3, r7, #1
 8000442:	4650      	mov	r0, sl
 8000444:	0b24      	lsrs	r4, r4, #12
 8000446:	0d5b      	lsrs	r3, r3, #21
 8000448:	0fff      	lsrs	r7, r7, #31
 800044a:	2b00      	cmp	r3, #0
 800044c:	d100      	bne.n	8000450 <__aeabi_ddiv+0x5c>
 800044e:	e11a      	b.n	8000686 <__aeabi_ddiv+0x292>
 8000450:	4ac4      	ldr	r2, [pc, #784]	; (8000764 <__aeabi_ddiv+0x370>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d100      	bne.n	8000458 <__aeabi_ddiv+0x64>
 8000456:	e15e      	b.n	8000716 <__aeabi_ddiv+0x322>
 8000458:	0f42      	lsrs	r2, r0, #29
 800045a:	00e4      	lsls	r4, r4, #3
 800045c:	4322      	orrs	r2, r4
 800045e:	2480      	movs	r4, #128	; 0x80
 8000460:	0424      	lsls	r4, r4, #16
 8000462:	4314      	orrs	r4, r2
 8000464:	4ac0      	ldr	r2, [pc, #768]	; (8000768 <__aeabi_ddiv+0x374>)
 8000466:	00c1      	lsls	r1, r0, #3
 8000468:	4694      	mov	ip, r2
 800046a:	465a      	mov	r2, fp
 800046c:	4463      	add	r3, ip
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	469b      	mov	fp, r3
 8000472:	2000      	movs	r0, #0
 8000474:	0033      	movs	r3, r6
 8000476:	407b      	eors	r3, r7
 8000478:	469a      	mov	sl, r3
 800047a:	464b      	mov	r3, r9
 800047c:	2b0f      	cmp	r3, #15
 800047e:	d827      	bhi.n	80004d0 <__aeabi_ddiv+0xdc>
 8000480:	4aba      	ldr	r2, [pc, #744]	; (800076c <__aeabi_ddiv+0x378>)
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	58d3      	ldr	r3, [r2, r3]
 8000486:	469f      	mov	pc, r3
 8000488:	46b2      	mov	sl, r6
 800048a:	9b00      	ldr	r3, [sp, #0]
 800048c:	2b02      	cmp	r3, #2
 800048e:	d016      	beq.n	80004be <__aeabi_ddiv+0xca>
 8000490:	2b03      	cmp	r3, #3
 8000492:	d100      	bne.n	8000496 <__aeabi_ddiv+0xa2>
 8000494:	e287      	b.n	80009a6 <__aeabi_ddiv+0x5b2>
 8000496:	2b01      	cmp	r3, #1
 8000498:	d000      	beq.n	800049c <__aeabi_ddiv+0xa8>
 800049a:	e0d5      	b.n	8000648 <__aeabi_ddiv+0x254>
 800049c:	2300      	movs	r3, #0
 800049e:	2200      	movs	r2, #0
 80004a0:	2500      	movs	r5, #0
 80004a2:	051b      	lsls	r3, r3, #20
 80004a4:	4313      	orrs	r3, r2
 80004a6:	4652      	mov	r2, sl
 80004a8:	07d2      	lsls	r2, r2, #31
 80004aa:	4313      	orrs	r3, r2
 80004ac:	0028      	movs	r0, r5
 80004ae:	0019      	movs	r1, r3
 80004b0:	b005      	add	sp, #20
 80004b2:	bcf0      	pop	{r4, r5, r6, r7}
 80004b4:	46bb      	mov	fp, r7
 80004b6:	46b2      	mov	sl, r6
 80004b8:	46a9      	mov	r9, r5
 80004ba:	46a0      	mov	r8, r4
 80004bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004be:	2200      	movs	r2, #0
 80004c0:	2500      	movs	r5, #0
 80004c2:	4ba8      	ldr	r3, [pc, #672]	; (8000764 <__aeabi_ddiv+0x370>)
 80004c4:	e7ed      	b.n	80004a2 <__aeabi_ddiv+0xae>
 80004c6:	46ba      	mov	sl, r7
 80004c8:	46a0      	mov	r8, r4
 80004ca:	000d      	movs	r5, r1
 80004cc:	9000      	str	r0, [sp, #0]
 80004ce:	e7dc      	b.n	800048a <__aeabi_ddiv+0x96>
 80004d0:	4544      	cmp	r4, r8
 80004d2:	d200      	bcs.n	80004d6 <__aeabi_ddiv+0xe2>
 80004d4:	e1c4      	b.n	8000860 <__aeabi_ddiv+0x46c>
 80004d6:	d100      	bne.n	80004da <__aeabi_ddiv+0xe6>
 80004d8:	e1bf      	b.n	800085a <__aeabi_ddiv+0x466>
 80004da:	2301      	movs	r3, #1
 80004dc:	425b      	negs	r3, r3
 80004de:	469c      	mov	ip, r3
 80004e0:	002e      	movs	r6, r5
 80004e2:	4640      	mov	r0, r8
 80004e4:	2500      	movs	r5, #0
 80004e6:	44e3      	add	fp, ip
 80004e8:	0223      	lsls	r3, r4, #8
 80004ea:	0e0c      	lsrs	r4, r1, #24
 80004ec:	431c      	orrs	r4, r3
 80004ee:	0c1b      	lsrs	r3, r3, #16
 80004f0:	4699      	mov	r9, r3
 80004f2:	0423      	lsls	r3, r4, #16
 80004f4:	020a      	lsls	r2, r1, #8
 80004f6:	0c1f      	lsrs	r7, r3, #16
 80004f8:	4649      	mov	r1, r9
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9701      	str	r7, [sp, #4]
 80004fe:	f7ff fe89 	bl	8000214 <__aeabi_uidivmod>
 8000502:	0002      	movs	r2, r0
 8000504:	437a      	muls	r2, r7
 8000506:	040b      	lsls	r3, r1, #16
 8000508:	0c31      	lsrs	r1, r6, #16
 800050a:	4680      	mov	r8, r0
 800050c:	4319      	orrs	r1, r3
 800050e:	428a      	cmp	r2, r1
 8000510:	d907      	bls.n	8000522 <__aeabi_ddiv+0x12e>
 8000512:	2301      	movs	r3, #1
 8000514:	425b      	negs	r3, r3
 8000516:	469c      	mov	ip, r3
 8000518:	1909      	adds	r1, r1, r4
 800051a:	44e0      	add	r8, ip
 800051c:	428c      	cmp	r4, r1
 800051e:	d800      	bhi.n	8000522 <__aeabi_ddiv+0x12e>
 8000520:	e201      	b.n	8000926 <__aeabi_ddiv+0x532>
 8000522:	1a88      	subs	r0, r1, r2
 8000524:	4649      	mov	r1, r9
 8000526:	f7ff fe75 	bl	8000214 <__aeabi_uidivmod>
 800052a:	9a01      	ldr	r2, [sp, #4]
 800052c:	0436      	lsls	r6, r6, #16
 800052e:	4342      	muls	r2, r0
 8000530:	0409      	lsls	r1, r1, #16
 8000532:	0c36      	lsrs	r6, r6, #16
 8000534:	0003      	movs	r3, r0
 8000536:	430e      	orrs	r6, r1
 8000538:	42b2      	cmp	r2, r6
 800053a:	d904      	bls.n	8000546 <__aeabi_ddiv+0x152>
 800053c:	1936      	adds	r6, r6, r4
 800053e:	3b01      	subs	r3, #1
 8000540:	42b4      	cmp	r4, r6
 8000542:	d800      	bhi.n	8000546 <__aeabi_ddiv+0x152>
 8000544:	e1e9      	b.n	800091a <__aeabi_ddiv+0x526>
 8000546:	1ab0      	subs	r0, r6, r2
 8000548:	4642      	mov	r2, r8
 800054a:	9e00      	ldr	r6, [sp, #0]
 800054c:	0412      	lsls	r2, r2, #16
 800054e:	431a      	orrs	r2, r3
 8000550:	0c33      	lsrs	r3, r6, #16
 8000552:	001f      	movs	r7, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	4690      	mov	r8, r2
 8000558:	9302      	str	r3, [sp, #8]
 800055a:	0413      	lsls	r3, r2, #16
 800055c:	0432      	lsls	r2, r6, #16
 800055e:	0c16      	lsrs	r6, r2, #16
 8000560:	0032      	movs	r2, r6
 8000562:	0c1b      	lsrs	r3, r3, #16
 8000564:	435a      	muls	r2, r3
 8000566:	9603      	str	r6, [sp, #12]
 8000568:	437b      	muls	r3, r7
 800056a:	434e      	muls	r6, r1
 800056c:	4379      	muls	r1, r7
 800056e:	0c17      	lsrs	r7, r2, #16
 8000570:	46bc      	mov	ip, r7
 8000572:	199b      	adds	r3, r3, r6
 8000574:	4463      	add	r3, ip
 8000576:	429e      	cmp	r6, r3
 8000578:	d903      	bls.n	8000582 <__aeabi_ddiv+0x18e>
 800057a:	2680      	movs	r6, #128	; 0x80
 800057c:	0276      	lsls	r6, r6, #9
 800057e:	46b4      	mov	ip, r6
 8000580:	4461      	add	r1, ip
 8000582:	0c1e      	lsrs	r6, r3, #16
 8000584:	1871      	adds	r1, r6, r1
 8000586:	0416      	lsls	r6, r2, #16
 8000588:	041b      	lsls	r3, r3, #16
 800058a:	0c36      	lsrs	r6, r6, #16
 800058c:	199e      	adds	r6, r3, r6
 800058e:	4288      	cmp	r0, r1
 8000590:	d302      	bcc.n	8000598 <__aeabi_ddiv+0x1a4>
 8000592:	d112      	bne.n	80005ba <__aeabi_ddiv+0x1c6>
 8000594:	42b5      	cmp	r5, r6
 8000596:	d210      	bcs.n	80005ba <__aeabi_ddiv+0x1c6>
 8000598:	4643      	mov	r3, r8
 800059a:	1e5a      	subs	r2, r3, #1
 800059c:	9b00      	ldr	r3, [sp, #0]
 800059e:	469c      	mov	ip, r3
 80005a0:	4465      	add	r5, ip
 80005a2:	001f      	movs	r7, r3
 80005a4:	429d      	cmp	r5, r3
 80005a6:	419b      	sbcs	r3, r3
 80005a8:	425b      	negs	r3, r3
 80005aa:	191b      	adds	r3, r3, r4
 80005ac:	18c0      	adds	r0, r0, r3
 80005ae:	4284      	cmp	r4, r0
 80005b0:	d200      	bcs.n	80005b4 <__aeabi_ddiv+0x1c0>
 80005b2:	e19e      	b.n	80008f2 <__aeabi_ddiv+0x4fe>
 80005b4:	d100      	bne.n	80005b8 <__aeabi_ddiv+0x1c4>
 80005b6:	e199      	b.n	80008ec <__aeabi_ddiv+0x4f8>
 80005b8:	4690      	mov	r8, r2
 80005ba:	1bae      	subs	r6, r5, r6
 80005bc:	42b5      	cmp	r5, r6
 80005be:	41ad      	sbcs	r5, r5
 80005c0:	1a40      	subs	r0, r0, r1
 80005c2:	426d      	negs	r5, r5
 80005c4:	1b40      	subs	r0, r0, r5
 80005c6:	4284      	cmp	r4, r0
 80005c8:	d100      	bne.n	80005cc <__aeabi_ddiv+0x1d8>
 80005ca:	e1d2      	b.n	8000972 <__aeabi_ddiv+0x57e>
 80005cc:	4649      	mov	r1, r9
 80005ce:	f7ff fe21 	bl	8000214 <__aeabi_uidivmod>
 80005d2:	9a01      	ldr	r2, [sp, #4]
 80005d4:	040b      	lsls	r3, r1, #16
 80005d6:	4342      	muls	r2, r0
 80005d8:	0c31      	lsrs	r1, r6, #16
 80005da:	0005      	movs	r5, r0
 80005dc:	4319      	orrs	r1, r3
 80005de:	428a      	cmp	r2, r1
 80005e0:	d900      	bls.n	80005e4 <__aeabi_ddiv+0x1f0>
 80005e2:	e16c      	b.n	80008be <__aeabi_ddiv+0x4ca>
 80005e4:	1a88      	subs	r0, r1, r2
 80005e6:	4649      	mov	r1, r9
 80005e8:	f7ff fe14 	bl	8000214 <__aeabi_uidivmod>
 80005ec:	9a01      	ldr	r2, [sp, #4]
 80005ee:	0436      	lsls	r6, r6, #16
 80005f0:	4342      	muls	r2, r0
 80005f2:	0409      	lsls	r1, r1, #16
 80005f4:	0c36      	lsrs	r6, r6, #16
 80005f6:	0003      	movs	r3, r0
 80005f8:	430e      	orrs	r6, r1
 80005fa:	42b2      	cmp	r2, r6
 80005fc:	d900      	bls.n	8000600 <__aeabi_ddiv+0x20c>
 80005fe:	e153      	b.n	80008a8 <__aeabi_ddiv+0x4b4>
 8000600:	9803      	ldr	r0, [sp, #12]
 8000602:	1ab6      	subs	r6, r6, r2
 8000604:	0002      	movs	r2, r0
 8000606:	042d      	lsls	r5, r5, #16
 8000608:	431d      	orrs	r5, r3
 800060a:	9f02      	ldr	r7, [sp, #8]
 800060c:	042b      	lsls	r3, r5, #16
 800060e:	0c1b      	lsrs	r3, r3, #16
 8000610:	435a      	muls	r2, r3
 8000612:	437b      	muls	r3, r7
 8000614:	469c      	mov	ip, r3
 8000616:	0c29      	lsrs	r1, r5, #16
 8000618:	4348      	muls	r0, r1
 800061a:	0c13      	lsrs	r3, r2, #16
 800061c:	4484      	add	ip, r0
 800061e:	4463      	add	r3, ip
 8000620:	4379      	muls	r1, r7
 8000622:	4298      	cmp	r0, r3
 8000624:	d903      	bls.n	800062e <__aeabi_ddiv+0x23a>
 8000626:	2080      	movs	r0, #128	; 0x80
 8000628:	0240      	lsls	r0, r0, #9
 800062a:	4684      	mov	ip, r0
 800062c:	4461      	add	r1, ip
 800062e:	0c18      	lsrs	r0, r3, #16
 8000630:	0412      	lsls	r2, r2, #16
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	0c12      	lsrs	r2, r2, #16
 8000636:	1840      	adds	r0, r0, r1
 8000638:	189b      	adds	r3, r3, r2
 800063a:	4286      	cmp	r6, r0
 800063c:	d200      	bcs.n	8000640 <__aeabi_ddiv+0x24c>
 800063e:	e100      	b.n	8000842 <__aeabi_ddiv+0x44e>
 8000640:	d100      	bne.n	8000644 <__aeabi_ddiv+0x250>
 8000642:	e0fb      	b.n	800083c <__aeabi_ddiv+0x448>
 8000644:	2301      	movs	r3, #1
 8000646:	431d      	orrs	r5, r3
 8000648:	4b49      	ldr	r3, [pc, #292]	; (8000770 <__aeabi_ddiv+0x37c>)
 800064a:	445b      	add	r3, fp
 800064c:	2b00      	cmp	r3, #0
 800064e:	dc00      	bgt.n	8000652 <__aeabi_ddiv+0x25e>
 8000650:	e0aa      	b.n	80007a8 <__aeabi_ddiv+0x3b4>
 8000652:	076a      	lsls	r2, r5, #29
 8000654:	d000      	beq.n	8000658 <__aeabi_ddiv+0x264>
 8000656:	e13d      	b.n	80008d4 <__aeabi_ddiv+0x4e0>
 8000658:	08e9      	lsrs	r1, r5, #3
 800065a:	4642      	mov	r2, r8
 800065c:	01d2      	lsls	r2, r2, #7
 800065e:	d506      	bpl.n	800066e <__aeabi_ddiv+0x27a>
 8000660:	4642      	mov	r2, r8
 8000662:	4b44      	ldr	r3, [pc, #272]	; (8000774 <__aeabi_ddiv+0x380>)
 8000664:	401a      	ands	r2, r3
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	4690      	mov	r8, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	445b      	add	r3, fp
 800066e:	4a42      	ldr	r2, [pc, #264]	; (8000778 <__aeabi_ddiv+0x384>)
 8000670:	4293      	cmp	r3, r2
 8000672:	dd00      	ble.n	8000676 <__aeabi_ddiv+0x282>
 8000674:	e723      	b.n	80004be <__aeabi_ddiv+0xca>
 8000676:	4642      	mov	r2, r8
 8000678:	055b      	lsls	r3, r3, #21
 800067a:	0755      	lsls	r5, r2, #29
 800067c:	0252      	lsls	r2, r2, #9
 800067e:	430d      	orrs	r5, r1
 8000680:	0b12      	lsrs	r2, r2, #12
 8000682:	0d5b      	lsrs	r3, r3, #21
 8000684:	e70d      	b.n	80004a2 <__aeabi_ddiv+0xae>
 8000686:	4651      	mov	r1, sl
 8000688:	4321      	orrs	r1, r4
 800068a:	d100      	bne.n	800068e <__aeabi_ddiv+0x29a>
 800068c:	e07c      	b.n	8000788 <__aeabi_ddiv+0x394>
 800068e:	2c00      	cmp	r4, #0
 8000690:	d100      	bne.n	8000694 <__aeabi_ddiv+0x2a0>
 8000692:	e0fb      	b.n	800088c <__aeabi_ddiv+0x498>
 8000694:	0020      	movs	r0, r4
 8000696:	f000 fa51 	bl	8000b3c <__clzsi2>
 800069a:	0002      	movs	r2, r0
 800069c:	3a0b      	subs	r2, #11
 800069e:	231d      	movs	r3, #29
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	4652      	mov	r2, sl
 80006a4:	0001      	movs	r1, r0
 80006a6:	40da      	lsrs	r2, r3
 80006a8:	4653      	mov	r3, sl
 80006aa:	3908      	subs	r1, #8
 80006ac:	408b      	lsls	r3, r1
 80006ae:	408c      	lsls	r4, r1
 80006b0:	0019      	movs	r1, r3
 80006b2:	4314      	orrs	r4, r2
 80006b4:	4b31      	ldr	r3, [pc, #196]	; (800077c <__aeabi_ddiv+0x388>)
 80006b6:	4458      	add	r0, fp
 80006b8:	469b      	mov	fp, r3
 80006ba:	4483      	add	fp, r0
 80006bc:	2000      	movs	r0, #0
 80006be:	e6d9      	b.n	8000474 <__aeabi_ddiv+0x80>
 80006c0:	0003      	movs	r3, r0
 80006c2:	4323      	orrs	r3, r4
 80006c4:	4698      	mov	r8, r3
 80006c6:	d044      	beq.n	8000752 <__aeabi_ddiv+0x35e>
 80006c8:	2c00      	cmp	r4, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_ddiv+0x2da>
 80006cc:	e0cf      	b.n	800086e <__aeabi_ddiv+0x47a>
 80006ce:	0020      	movs	r0, r4
 80006d0:	f000 fa34 	bl	8000b3c <__clzsi2>
 80006d4:	0001      	movs	r1, r0
 80006d6:	0002      	movs	r2, r0
 80006d8:	390b      	subs	r1, #11
 80006da:	231d      	movs	r3, #29
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	4649      	mov	r1, r9
 80006e0:	0010      	movs	r0, r2
 80006e2:	40d9      	lsrs	r1, r3
 80006e4:	3808      	subs	r0, #8
 80006e6:	4084      	lsls	r4, r0
 80006e8:	000b      	movs	r3, r1
 80006ea:	464d      	mov	r5, r9
 80006ec:	4323      	orrs	r3, r4
 80006ee:	4698      	mov	r8, r3
 80006f0:	4085      	lsls	r5, r0
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <__aeabi_ddiv+0x38c>)
 80006f4:	1a9b      	subs	r3, r3, r2
 80006f6:	469b      	mov	fp, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	4699      	mov	r9, r3
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	e69e      	b.n	800043e <__aeabi_ddiv+0x4a>
 8000700:	0002      	movs	r2, r0
 8000702:	4322      	orrs	r2, r4
 8000704:	4690      	mov	r8, r2
 8000706:	d11d      	bne.n	8000744 <__aeabi_ddiv+0x350>
 8000708:	2208      	movs	r2, #8
 800070a:	469b      	mov	fp, r3
 800070c:	2302      	movs	r3, #2
 800070e:	2500      	movs	r5, #0
 8000710:	4691      	mov	r9, r2
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	e693      	b.n	800043e <__aeabi_ddiv+0x4a>
 8000716:	4651      	mov	r1, sl
 8000718:	4321      	orrs	r1, r4
 800071a:	d109      	bne.n	8000730 <__aeabi_ddiv+0x33c>
 800071c:	2302      	movs	r3, #2
 800071e:	464a      	mov	r2, r9
 8000720:	431a      	orrs	r2, r3
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <__aeabi_ddiv+0x390>)
 8000724:	4691      	mov	r9, r2
 8000726:	469c      	mov	ip, r3
 8000728:	2400      	movs	r4, #0
 800072a:	2002      	movs	r0, #2
 800072c:	44e3      	add	fp, ip
 800072e:	e6a1      	b.n	8000474 <__aeabi_ddiv+0x80>
 8000730:	2303      	movs	r3, #3
 8000732:	464a      	mov	r2, r9
 8000734:	431a      	orrs	r2, r3
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <__aeabi_ddiv+0x390>)
 8000738:	4691      	mov	r9, r2
 800073a:	469c      	mov	ip, r3
 800073c:	4651      	mov	r1, sl
 800073e:	2003      	movs	r0, #3
 8000740:	44e3      	add	fp, ip
 8000742:	e697      	b.n	8000474 <__aeabi_ddiv+0x80>
 8000744:	220c      	movs	r2, #12
 8000746:	469b      	mov	fp, r3
 8000748:	2303      	movs	r3, #3
 800074a:	46a0      	mov	r8, r4
 800074c:	4691      	mov	r9, r2
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	e675      	b.n	800043e <__aeabi_ddiv+0x4a>
 8000752:	2304      	movs	r3, #4
 8000754:	4699      	mov	r9, r3
 8000756:	2300      	movs	r3, #0
 8000758:	469b      	mov	fp, r3
 800075a:	3301      	adds	r3, #1
 800075c:	2500      	movs	r5, #0
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	e66d      	b.n	800043e <__aeabi_ddiv+0x4a>
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	000007ff 	.word	0x000007ff
 8000768:	fffffc01 	.word	0xfffffc01
 800076c:	080044a0 	.word	0x080044a0
 8000770:	000003ff 	.word	0x000003ff
 8000774:	feffffff 	.word	0xfeffffff
 8000778:	000007fe 	.word	0x000007fe
 800077c:	000003f3 	.word	0x000003f3
 8000780:	fffffc0d 	.word	0xfffffc0d
 8000784:	fffff801 	.word	0xfffff801
 8000788:	464a      	mov	r2, r9
 800078a:	2301      	movs	r3, #1
 800078c:	431a      	orrs	r2, r3
 800078e:	4691      	mov	r9, r2
 8000790:	2400      	movs	r4, #0
 8000792:	2001      	movs	r0, #1
 8000794:	e66e      	b.n	8000474 <__aeabi_ddiv+0x80>
 8000796:	2300      	movs	r3, #0
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	469a      	mov	sl, r3
 800079c:	2500      	movs	r5, #0
 800079e:	4b88      	ldr	r3, [pc, #544]	; (80009c0 <__aeabi_ddiv+0x5cc>)
 80007a0:	0312      	lsls	r2, r2, #12
 80007a2:	e67e      	b.n	80004a2 <__aeabi_ddiv+0xae>
 80007a4:	2501      	movs	r5, #1
 80007a6:	426d      	negs	r5, r5
 80007a8:	2201      	movs	r2, #1
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	2a38      	cmp	r2, #56	; 0x38
 80007ae:	dd00      	ble.n	80007b2 <__aeabi_ddiv+0x3be>
 80007b0:	e674      	b.n	800049c <__aeabi_ddiv+0xa8>
 80007b2:	2a1f      	cmp	r2, #31
 80007b4:	dc00      	bgt.n	80007b8 <__aeabi_ddiv+0x3c4>
 80007b6:	e0bd      	b.n	8000934 <__aeabi_ddiv+0x540>
 80007b8:	211f      	movs	r1, #31
 80007ba:	4249      	negs	r1, r1
 80007bc:	1acb      	subs	r3, r1, r3
 80007be:	4641      	mov	r1, r8
 80007c0:	40d9      	lsrs	r1, r3
 80007c2:	000b      	movs	r3, r1
 80007c4:	2a20      	cmp	r2, #32
 80007c6:	d004      	beq.n	80007d2 <__aeabi_ddiv+0x3de>
 80007c8:	4641      	mov	r1, r8
 80007ca:	4a7e      	ldr	r2, [pc, #504]	; (80009c4 <__aeabi_ddiv+0x5d0>)
 80007cc:	445a      	add	r2, fp
 80007ce:	4091      	lsls	r1, r2
 80007d0:	430d      	orrs	r5, r1
 80007d2:	0029      	movs	r1, r5
 80007d4:	1e4a      	subs	r2, r1, #1
 80007d6:	4191      	sbcs	r1, r2
 80007d8:	4319      	orrs	r1, r3
 80007da:	2307      	movs	r3, #7
 80007dc:	001d      	movs	r5, r3
 80007de:	2200      	movs	r2, #0
 80007e0:	400d      	ands	r5, r1
 80007e2:	420b      	tst	r3, r1
 80007e4:	d100      	bne.n	80007e8 <__aeabi_ddiv+0x3f4>
 80007e6:	e0d0      	b.n	800098a <__aeabi_ddiv+0x596>
 80007e8:	220f      	movs	r2, #15
 80007ea:	2300      	movs	r3, #0
 80007ec:	400a      	ands	r2, r1
 80007ee:	2a04      	cmp	r2, #4
 80007f0:	d100      	bne.n	80007f4 <__aeabi_ddiv+0x400>
 80007f2:	e0c7      	b.n	8000984 <__aeabi_ddiv+0x590>
 80007f4:	1d0a      	adds	r2, r1, #4
 80007f6:	428a      	cmp	r2, r1
 80007f8:	4189      	sbcs	r1, r1
 80007fa:	4249      	negs	r1, r1
 80007fc:	185b      	adds	r3, r3, r1
 80007fe:	0011      	movs	r1, r2
 8000800:	021a      	lsls	r2, r3, #8
 8000802:	d400      	bmi.n	8000806 <__aeabi_ddiv+0x412>
 8000804:	e0be      	b.n	8000984 <__aeabi_ddiv+0x590>
 8000806:	2301      	movs	r3, #1
 8000808:	2200      	movs	r2, #0
 800080a:	2500      	movs	r5, #0
 800080c:	e649      	b.n	80004a2 <__aeabi_ddiv+0xae>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	4643      	mov	r3, r8
 8000812:	0312      	lsls	r2, r2, #12
 8000814:	4213      	tst	r3, r2
 8000816:	d008      	beq.n	800082a <__aeabi_ddiv+0x436>
 8000818:	4214      	tst	r4, r2
 800081a:	d106      	bne.n	800082a <__aeabi_ddiv+0x436>
 800081c:	4322      	orrs	r2, r4
 800081e:	0312      	lsls	r2, r2, #12
 8000820:	46ba      	mov	sl, r7
 8000822:	000d      	movs	r5, r1
 8000824:	4b66      	ldr	r3, [pc, #408]	; (80009c0 <__aeabi_ddiv+0x5cc>)
 8000826:	0b12      	lsrs	r2, r2, #12
 8000828:	e63b      	b.n	80004a2 <__aeabi_ddiv+0xae>
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	4643      	mov	r3, r8
 800082e:	0312      	lsls	r2, r2, #12
 8000830:	431a      	orrs	r2, r3
 8000832:	0312      	lsls	r2, r2, #12
 8000834:	46b2      	mov	sl, r6
 8000836:	4b62      	ldr	r3, [pc, #392]	; (80009c0 <__aeabi_ddiv+0x5cc>)
 8000838:	0b12      	lsrs	r2, r2, #12
 800083a:	e632      	b.n	80004a2 <__aeabi_ddiv+0xae>
 800083c:	2b00      	cmp	r3, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_ddiv+0x44e>
 8000840:	e702      	b.n	8000648 <__aeabi_ddiv+0x254>
 8000842:	19a6      	adds	r6, r4, r6
 8000844:	1e6a      	subs	r2, r5, #1
 8000846:	42a6      	cmp	r6, r4
 8000848:	d200      	bcs.n	800084c <__aeabi_ddiv+0x458>
 800084a:	e089      	b.n	8000960 <__aeabi_ddiv+0x56c>
 800084c:	4286      	cmp	r6, r0
 800084e:	d200      	bcs.n	8000852 <__aeabi_ddiv+0x45e>
 8000850:	e09f      	b.n	8000992 <__aeabi_ddiv+0x59e>
 8000852:	d100      	bne.n	8000856 <__aeabi_ddiv+0x462>
 8000854:	e0af      	b.n	80009b6 <__aeabi_ddiv+0x5c2>
 8000856:	0015      	movs	r5, r2
 8000858:	e6f4      	b.n	8000644 <__aeabi_ddiv+0x250>
 800085a:	42a9      	cmp	r1, r5
 800085c:	d900      	bls.n	8000860 <__aeabi_ddiv+0x46c>
 800085e:	e63c      	b.n	80004da <__aeabi_ddiv+0xe6>
 8000860:	4643      	mov	r3, r8
 8000862:	07de      	lsls	r6, r3, #31
 8000864:	0858      	lsrs	r0, r3, #1
 8000866:	086b      	lsrs	r3, r5, #1
 8000868:	431e      	orrs	r6, r3
 800086a:	07ed      	lsls	r5, r5, #31
 800086c:	e63c      	b.n	80004e8 <__aeabi_ddiv+0xf4>
 800086e:	f000 f965 	bl	8000b3c <__clzsi2>
 8000872:	0001      	movs	r1, r0
 8000874:	0002      	movs	r2, r0
 8000876:	3115      	adds	r1, #21
 8000878:	3220      	adds	r2, #32
 800087a:	291c      	cmp	r1, #28
 800087c:	dc00      	bgt.n	8000880 <__aeabi_ddiv+0x48c>
 800087e:	e72c      	b.n	80006da <__aeabi_ddiv+0x2e6>
 8000880:	464b      	mov	r3, r9
 8000882:	3808      	subs	r0, #8
 8000884:	4083      	lsls	r3, r0
 8000886:	2500      	movs	r5, #0
 8000888:	4698      	mov	r8, r3
 800088a:	e732      	b.n	80006f2 <__aeabi_ddiv+0x2fe>
 800088c:	f000 f956 	bl	8000b3c <__clzsi2>
 8000890:	0003      	movs	r3, r0
 8000892:	001a      	movs	r2, r3
 8000894:	3215      	adds	r2, #21
 8000896:	3020      	adds	r0, #32
 8000898:	2a1c      	cmp	r2, #28
 800089a:	dc00      	bgt.n	800089e <__aeabi_ddiv+0x4aa>
 800089c:	e6ff      	b.n	800069e <__aeabi_ddiv+0x2aa>
 800089e:	4654      	mov	r4, sl
 80008a0:	3b08      	subs	r3, #8
 80008a2:	2100      	movs	r1, #0
 80008a4:	409c      	lsls	r4, r3
 80008a6:	e705      	b.n	80006b4 <__aeabi_ddiv+0x2c0>
 80008a8:	1936      	adds	r6, r6, r4
 80008aa:	3b01      	subs	r3, #1
 80008ac:	42b4      	cmp	r4, r6
 80008ae:	d900      	bls.n	80008b2 <__aeabi_ddiv+0x4be>
 80008b0:	e6a6      	b.n	8000600 <__aeabi_ddiv+0x20c>
 80008b2:	42b2      	cmp	r2, r6
 80008b4:	d800      	bhi.n	80008b8 <__aeabi_ddiv+0x4c4>
 80008b6:	e6a3      	b.n	8000600 <__aeabi_ddiv+0x20c>
 80008b8:	1e83      	subs	r3, r0, #2
 80008ba:	1936      	adds	r6, r6, r4
 80008bc:	e6a0      	b.n	8000600 <__aeabi_ddiv+0x20c>
 80008be:	1909      	adds	r1, r1, r4
 80008c0:	3d01      	subs	r5, #1
 80008c2:	428c      	cmp	r4, r1
 80008c4:	d900      	bls.n	80008c8 <__aeabi_ddiv+0x4d4>
 80008c6:	e68d      	b.n	80005e4 <__aeabi_ddiv+0x1f0>
 80008c8:	428a      	cmp	r2, r1
 80008ca:	d800      	bhi.n	80008ce <__aeabi_ddiv+0x4da>
 80008cc:	e68a      	b.n	80005e4 <__aeabi_ddiv+0x1f0>
 80008ce:	1e85      	subs	r5, r0, #2
 80008d0:	1909      	adds	r1, r1, r4
 80008d2:	e687      	b.n	80005e4 <__aeabi_ddiv+0x1f0>
 80008d4:	220f      	movs	r2, #15
 80008d6:	402a      	ands	r2, r5
 80008d8:	2a04      	cmp	r2, #4
 80008da:	d100      	bne.n	80008de <__aeabi_ddiv+0x4ea>
 80008dc:	e6bc      	b.n	8000658 <__aeabi_ddiv+0x264>
 80008de:	1d29      	adds	r1, r5, #4
 80008e0:	42a9      	cmp	r1, r5
 80008e2:	41ad      	sbcs	r5, r5
 80008e4:	426d      	negs	r5, r5
 80008e6:	08c9      	lsrs	r1, r1, #3
 80008e8:	44a8      	add	r8, r5
 80008ea:	e6b6      	b.n	800065a <__aeabi_ddiv+0x266>
 80008ec:	42af      	cmp	r7, r5
 80008ee:	d900      	bls.n	80008f2 <__aeabi_ddiv+0x4fe>
 80008f0:	e662      	b.n	80005b8 <__aeabi_ddiv+0x1c4>
 80008f2:	4281      	cmp	r1, r0
 80008f4:	d804      	bhi.n	8000900 <__aeabi_ddiv+0x50c>
 80008f6:	d000      	beq.n	80008fa <__aeabi_ddiv+0x506>
 80008f8:	e65e      	b.n	80005b8 <__aeabi_ddiv+0x1c4>
 80008fa:	42ae      	cmp	r6, r5
 80008fc:	d800      	bhi.n	8000900 <__aeabi_ddiv+0x50c>
 80008fe:	e65b      	b.n	80005b8 <__aeabi_ddiv+0x1c4>
 8000900:	2302      	movs	r3, #2
 8000902:	425b      	negs	r3, r3
 8000904:	469c      	mov	ip, r3
 8000906:	9b00      	ldr	r3, [sp, #0]
 8000908:	44e0      	add	r8, ip
 800090a:	469c      	mov	ip, r3
 800090c:	4465      	add	r5, ip
 800090e:	429d      	cmp	r5, r3
 8000910:	419b      	sbcs	r3, r3
 8000912:	425b      	negs	r3, r3
 8000914:	191b      	adds	r3, r3, r4
 8000916:	18c0      	adds	r0, r0, r3
 8000918:	e64f      	b.n	80005ba <__aeabi_ddiv+0x1c6>
 800091a:	42b2      	cmp	r2, r6
 800091c:	d800      	bhi.n	8000920 <__aeabi_ddiv+0x52c>
 800091e:	e612      	b.n	8000546 <__aeabi_ddiv+0x152>
 8000920:	1e83      	subs	r3, r0, #2
 8000922:	1936      	adds	r6, r6, r4
 8000924:	e60f      	b.n	8000546 <__aeabi_ddiv+0x152>
 8000926:	428a      	cmp	r2, r1
 8000928:	d800      	bhi.n	800092c <__aeabi_ddiv+0x538>
 800092a:	e5fa      	b.n	8000522 <__aeabi_ddiv+0x12e>
 800092c:	1e83      	subs	r3, r0, #2
 800092e:	4698      	mov	r8, r3
 8000930:	1909      	adds	r1, r1, r4
 8000932:	e5f6      	b.n	8000522 <__aeabi_ddiv+0x12e>
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <__aeabi_ddiv+0x5d4>)
 8000936:	0028      	movs	r0, r5
 8000938:	445b      	add	r3, fp
 800093a:	4641      	mov	r1, r8
 800093c:	409d      	lsls	r5, r3
 800093e:	4099      	lsls	r1, r3
 8000940:	40d0      	lsrs	r0, r2
 8000942:	1e6b      	subs	r3, r5, #1
 8000944:	419d      	sbcs	r5, r3
 8000946:	4643      	mov	r3, r8
 8000948:	4301      	orrs	r1, r0
 800094a:	4329      	orrs	r1, r5
 800094c:	40d3      	lsrs	r3, r2
 800094e:	074a      	lsls	r2, r1, #29
 8000950:	d100      	bne.n	8000954 <__aeabi_ddiv+0x560>
 8000952:	e755      	b.n	8000800 <__aeabi_ddiv+0x40c>
 8000954:	220f      	movs	r2, #15
 8000956:	400a      	ands	r2, r1
 8000958:	2a04      	cmp	r2, #4
 800095a:	d000      	beq.n	800095e <__aeabi_ddiv+0x56a>
 800095c:	e74a      	b.n	80007f4 <__aeabi_ddiv+0x400>
 800095e:	e74f      	b.n	8000800 <__aeabi_ddiv+0x40c>
 8000960:	0015      	movs	r5, r2
 8000962:	4286      	cmp	r6, r0
 8000964:	d000      	beq.n	8000968 <__aeabi_ddiv+0x574>
 8000966:	e66d      	b.n	8000644 <__aeabi_ddiv+0x250>
 8000968:	9a00      	ldr	r2, [sp, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	d000      	beq.n	8000970 <__aeabi_ddiv+0x57c>
 800096e:	e669      	b.n	8000644 <__aeabi_ddiv+0x250>
 8000970:	e66a      	b.n	8000648 <__aeabi_ddiv+0x254>
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <__aeabi_ddiv+0x5d8>)
 8000974:	445b      	add	r3, fp
 8000976:	2b00      	cmp	r3, #0
 8000978:	dc00      	bgt.n	800097c <__aeabi_ddiv+0x588>
 800097a:	e713      	b.n	80007a4 <__aeabi_ddiv+0x3b0>
 800097c:	2501      	movs	r5, #1
 800097e:	2100      	movs	r1, #0
 8000980:	44a8      	add	r8, r5
 8000982:	e66a      	b.n	800065a <__aeabi_ddiv+0x266>
 8000984:	075d      	lsls	r5, r3, #29
 8000986:	025b      	lsls	r3, r3, #9
 8000988:	0b1a      	lsrs	r2, r3, #12
 800098a:	08c9      	lsrs	r1, r1, #3
 800098c:	2300      	movs	r3, #0
 800098e:	430d      	orrs	r5, r1
 8000990:	e587      	b.n	80004a2 <__aeabi_ddiv+0xae>
 8000992:	9900      	ldr	r1, [sp, #0]
 8000994:	3d02      	subs	r5, #2
 8000996:	004a      	lsls	r2, r1, #1
 8000998:	428a      	cmp	r2, r1
 800099a:	41bf      	sbcs	r7, r7
 800099c:	427f      	negs	r7, r7
 800099e:	193f      	adds	r7, r7, r4
 80009a0:	19f6      	adds	r6, r6, r7
 80009a2:	9200      	str	r2, [sp, #0]
 80009a4:	e7dd      	b.n	8000962 <__aeabi_ddiv+0x56e>
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	4643      	mov	r3, r8
 80009aa:	0312      	lsls	r2, r2, #12
 80009ac:	431a      	orrs	r2, r3
 80009ae:	0312      	lsls	r2, r2, #12
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <__aeabi_ddiv+0x5cc>)
 80009b2:	0b12      	lsrs	r2, r2, #12
 80009b4:	e575      	b.n	80004a2 <__aeabi_ddiv+0xae>
 80009b6:	9900      	ldr	r1, [sp, #0]
 80009b8:	4299      	cmp	r1, r3
 80009ba:	d3ea      	bcc.n	8000992 <__aeabi_ddiv+0x59e>
 80009bc:	0015      	movs	r5, r2
 80009be:	e7d3      	b.n	8000968 <__aeabi_ddiv+0x574>
 80009c0:	000007ff 	.word	0x000007ff
 80009c4:	0000043e 	.word	0x0000043e
 80009c8:	0000041e 	.word	0x0000041e
 80009cc:	000003ff 	.word	0x000003ff

080009d0 <__aeabi_i2d>:
 80009d0:	b570      	push	{r4, r5, r6, lr}
 80009d2:	2800      	cmp	r0, #0
 80009d4:	d016      	beq.n	8000a04 <__aeabi_i2d+0x34>
 80009d6:	17c3      	asrs	r3, r0, #31
 80009d8:	18c5      	adds	r5, r0, r3
 80009da:	405d      	eors	r5, r3
 80009dc:	0fc4      	lsrs	r4, r0, #31
 80009de:	0028      	movs	r0, r5
 80009e0:	f000 f8ac 	bl	8000b3c <__clzsi2>
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <__aeabi_i2d+0x5c>)
 80009e6:	1a1b      	subs	r3, r3, r0
 80009e8:	280a      	cmp	r0, #10
 80009ea:	dc16      	bgt.n	8000a1a <__aeabi_i2d+0x4a>
 80009ec:	0002      	movs	r2, r0
 80009ee:	002e      	movs	r6, r5
 80009f0:	3215      	adds	r2, #21
 80009f2:	4096      	lsls	r6, r2
 80009f4:	220b      	movs	r2, #11
 80009f6:	1a12      	subs	r2, r2, r0
 80009f8:	40d5      	lsrs	r5, r2
 80009fa:	055b      	lsls	r3, r3, #21
 80009fc:	032d      	lsls	r5, r5, #12
 80009fe:	0b2d      	lsrs	r5, r5, #12
 8000a00:	0d5b      	lsrs	r3, r3, #21
 8000a02:	e003      	b.n	8000a0c <__aeabi_i2d+0x3c>
 8000a04:	2400      	movs	r4, #0
 8000a06:	2300      	movs	r3, #0
 8000a08:	2500      	movs	r5, #0
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	051b      	lsls	r3, r3, #20
 8000a0e:	432b      	orrs	r3, r5
 8000a10:	07e4      	lsls	r4, r4, #31
 8000a12:	4323      	orrs	r3, r4
 8000a14:	0030      	movs	r0, r6
 8000a16:	0019      	movs	r1, r3
 8000a18:	bd70      	pop	{r4, r5, r6, pc}
 8000a1a:	380b      	subs	r0, #11
 8000a1c:	4085      	lsls	r5, r0
 8000a1e:	055b      	lsls	r3, r3, #21
 8000a20:	032d      	lsls	r5, r5, #12
 8000a22:	2600      	movs	r6, #0
 8000a24:	0b2d      	lsrs	r5, r5, #12
 8000a26:	0d5b      	lsrs	r3, r3, #21
 8000a28:	e7f0      	b.n	8000a0c <__aeabi_i2d+0x3c>
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	0000041e 	.word	0x0000041e

08000a30 <__aeabi_d2f>:
 8000a30:	0002      	movs	r2, r0
 8000a32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a34:	004b      	lsls	r3, r1, #1
 8000a36:	030d      	lsls	r5, r1, #12
 8000a38:	0f40      	lsrs	r0, r0, #29
 8000a3a:	0d5b      	lsrs	r3, r3, #21
 8000a3c:	0fcc      	lsrs	r4, r1, #31
 8000a3e:	0a6d      	lsrs	r5, r5, #9
 8000a40:	493a      	ldr	r1, [pc, #232]	; (8000b2c <__aeabi_d2f+0xfc>)
 8000a42:	4305      	orrs	r5, r0
 8000a44:	1c58      	adds	r0, r3, #1
 8000a46:	00d7      	lsls	r7, r2, #3
 8000a48:	4208      	tst	r0, r1
 8000a4a:	d00a      	beq.n	8000a62 <__aeabi_d2f+0x32>
 8000a4c:	4938      	ldr	r1, [pc, #224]	; (8000b30 <__aeabi_d2f+0x100>)
 8000a4e:	1859      	adds	r1, r3, r1
 8000a50:	29fe      	cmp	r1, #254	; 0xfe
 8000a52:	dd16      	ble.n	8000a82 <__aeabi_d2f+0x52>
 8000a54:	20ff      	movs	r0, #255	; 0xff
 8000a56:	2200      	movs	r2, #0
 8000a58:	05c0      	lsls	r0, r0, #23
 8000a5a:	4310      	orrs	r0, r2
 8000a5c:	07e4      	lsls	r4, r4, #31
 8000a5e:	4320      	orrs	r0, r4
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d106      	bne.n	8000a74 <__aeabi_d2f+0x44>
 8000a66:	433d      	orrs	r5, r7
 8000a68:	d026      	beq.n	8000ab8 <__aeabi_d2f+0x88>
 8000a6a:	2205      	movs	r2, #5
 8000a6c:	0192      	lsls	r2, r2, #6
 8000a6e:	0a52      	lsrs	r2, r2, #9
 8000a70:	b2d8      	uxtb	r0, r3
 8000a72:	e7f1      	b.n	8000a58 <__aeabi_d2f+0x28>
 8000a74:	432f      	orrs	r7, r5
 8000a76:	d0ed      	beq.n	8000a54 <__aeabi_d2f+0x24>
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	03d2      	lsls	r2, r2, #15
 8000a7c:	20ff      	movs	r0, #255	; 0xff
 8000a7e:	432a      	orrs	r2, r5
 8000a80:	e7ea      	b.n	8000a58 <__aeabi_d2f+0x28>
 8000a82:	2900      	cmp	r1, #0
 8000a84:	dd1b      	ble.n	8000abe <__aeabi_d2f+0x8e>
 8000a86:	0192      	lsls	r2, r2, #6
 8000a88:	1e50      	subs	r0, r2, #1
 8000a8a:	4182      	sbcs	r2, r0
 8000a8c:	00ed      	lsls	r5, r5, #3
 8000a8e:	0f7f      	lsrs	r7, r7, #29
 8000a90:	432a      	orrs	r2, r5
 8000a92:	433a      	orrs	r2, r7
 8000a94:	0753      	lsls	r3, r2, #29
 8000a96:	d047      	beq.n	8000b28 <__aeabi_d2f+0xf8>
 8000a98:	230f      	movs	r3, #15
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	2b04      	cmp	r3, #4
 8000a9e:	d000      	beq.n	8000aa2 <__aeabi_d2f+0x72>
 8000aa0:	3204      	adds	r2, #4
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	04db      	lsls	r3, r3, #19
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d03e      	beq.n	8000b28 <__aeabi_d2f+0xf8>
 8000aaa:	1c48      	adds	r0, r1, #1
 8000aac:	29fe      	cmp	r1, #254	; 0xfe
 8000aae:	d0d1      	beq.n	8000a54 <__aeabi_d2f+0x24>
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	0a52      	lsrs	r2, r2, #9
 8000ab4:	b2c0      	uxtb	r0, r0
 8000ab6:	e7cf      	b.n	8000a58 <__aeabi_d2f+0x28>
 8000ab8:	2000      	movs	r0, #0
 8000aba:	2200      	movs	r2, #0
 8000abc:	e7cc      	b.n	8000a58 <__aeabi_d2f+0x28>
 8000abe:	000a      	movs	r2, r1
 8000ac0:	3217      	adds	r2, #23
 8000ac2:	db2f      	blt.n	8000b24 <__aeabi_d2f+0xf4>
 8000ac4:	2680      	movs	r6, #128	; 0x80
 8000ac6:	0436      	lsls	r6, r6, #16
 8000ac8:	432e      	orrs	r6, r5
 8000aca:	251e      	movs	r5, #30
 8000acc:	1a6d      	subs	r5, r5, r1
 8000ace:	2d1f      	cmp	r5, #31
 8000ad0:	dd11      	ble.n	8000af6 <__aeabi_d2f+0xc6>
 8000ad2:	2202      	movs	r2, #2
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	1a52      	subs	r2, r2, r1
 8000ad8:	0031      	movs	r1, r6
 8000ada:	40d1      	lsrs	r1, r2
 8000adc:	2d20      	cmp	r5, #32
 8000ade:	d004      	beq.n	8000aea <__aeabi_d2f+0xba>
 8000ae0:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <__aeabi_d2f+0x104>)
 8000ae2:	4694      	mov	ip, r2
 8000ae4:	4463      	add	r3, ip
 8000ae6:	409e      	lsls	r6, r3
 8000ae8:	4337      	orrs	r7, r6
 8000aea:	003a      	movs	r2, r7
 8000aec:	1e53      	subs	r3, r2, #1
 8000aee:	419a      	sbcs	r2, r3
 8000af0:	430a      	orrs	r2, r1
 8000af2:	2100      	movs	r1, #0
 8000af4:	e7ce      	b.n	8000a94 <__aeabi_d2f+0x64>
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <__aeabi_d2f+0x108>)
 8000af8:	0038      	movs	r0, r7
 8000afa:	4694      	mov	ip, r2
 8000afc:	4463      	add	r3, ip
 8000afe:	4098      	lsls	r0, r3
 8000b00:	003a      	movs	r2, r7
 8000b02:	1e41      	subs	r1, r0, #1
 8000b04:	4188      	sbcs	r0, r1
 8000b06:	409e      	lsls	r6, r3
 8000b08:	40ea      	lsrs	r2, r5
 8000b0a:	4330      	orrs	r0, r6
 8000b0c:	4302      	orrs	r2, r0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	0753      	lsls	r3, r2, #29
 8000b12:	d1c1      	bne.n	8000a98 <__aeabi_d2f+0x68>
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	0013      	movs	r3, r2
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	420a      	tst	r2, r1
 8000b20:	d1c6      	bne.n	8000ab0 <__aeabi_d2f+0x80>
 8000b22:	e7a3      	b.n	8000a6c <__aeabi_d2f+0x3c>
 8000b24:	2300      	movs	r3, #0
 8000b26:	e7a0      	b.n	8000a6a <__aeabi_d2f+0x3a>
 8000b28:	000b      	movs	r3, r1
 8000b2a:	e79f      	b.n	8000a6c <__aeabi_d2f+0x3c>
 8000b2c:	000007fe 	.word	0x000007fe
 8000b30:	fffffc80 	.word	0xfffffc80
 8000b34:	fffffca2 	.word	0xfffffca2
 8000b38:	fffffc82 	.word	0xfffffc82

08000b3c <__clzsi2>:
 8000b3c:	211c      	movs	r1, #28
 8000b3e:	2301      	movs	r3, #1
 8000b40:	041b      	lsls	r3, r3, #16
 8000b42:	4298      	cmp	r0, r3
 8000b44:	d301      	bcc.n	8000b4a <__clzsi2+0xe>
 8000b46:	0c00      	lsrs	r0, r0, #16
 8000b48:	3910      	subs	r1, #16
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	4298      	cmp	r0, r3
 8000b4e:	d301      	bcc.n	8000b54 <__clzsi2+0x18>
 8000b50:	0a00      	lsrs	r0, r0, #8
 8000b52:	3908      	subs	r1, #8
 8000b54:	091b      	lsrs	r3, r3, #4
 8000b56:	4298      	cmp	r0, r3
 8000b58:	d301      	bcc.n	8000b5e <__clzsi2+0x22>
 8000b5a:	0900      	lsrs	r0, r0, #4
 8000b5c:	3904      	subs	r1, #4
 8000b5e:	a202      	add	r2, pc, #8	; (adr r2, 8000b68 <__clzsi2+0x2c>)
 8000b60:	5c10      	ldrb	r0, [r2, r0]
 8000b62:	1840      	adds	r0, r0, r1
 8000b64:	4770      	bx	lr
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	02020304 	.word	0x02020304
 8000b6c:	01010101 	.word	0x01010101
	...

08000b78 <BMP180_Init>:

/**
 * @brief Initializes the BMP180 temperature/pressure sensor.
 * @param hi2c User I2C handle pointer.
 */
void BMP180_Init(I2C_HandleTypeDef *hi2c) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	_bmp180_ui2c = hi2c;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <BMP180_Init+0x18>)
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	601a      	str	r2, [r3, #0]
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	20000030 	.word	0x20000030

08000b94 <BMP180_SetOversampling>:
/**
 * @param oss Enum, oversampling setting.
 * @note Available resolutions: BMP180_LOW, BMP180_STANDARD, BMP180_HIGH, BMP180_ULTRA.
 * @note Refer to section 3.3.1 of datasheet.
 */
void BMP180_SetOversampling(BMP180_OSS oss) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	701a      	strb	r2, [r3, #0]
	_bmp180_oss = oss;
 8000ba0:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <BMP180_SetOversampling+0x1c>)
 8000ba2:	1dfa      	adds	r2, r7, #7
 8000ba4:	7812      	ldrb	r2, [r2, #0]
 8000ba6:	701a      	strb	r2, [r3, #0]
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000004a 	.word	0x2000004a

08000bb4 <BMP180_UpdateCalibrationData>:

/**
 * @brief Updates calibration data.
 * @note Must be called once before main loop.
 */
void BMP180_UpdateCalibrationData(void) {
 8000bb4:	b5b0      	push	{r4, r5, r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	_bmp180_eeprom.BMP180_AC1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC1]);
 8000bb8:	23aa      	movs	r3, #170	; 0xaa
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 f8e2 	bl	8000d84 <BMP180_ReadReg>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21c      	sxth	r4, r3
 8000bc6:	23ab      	movs	r3, #171	; 0xab
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 f8db 	bl	8000d84 <BMP180_ReadReg>
 8000bce:	0003      	movs	r3, r0
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	4b59      	ldr	r3, [pc, #356]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000bd8:	801a      	strh	r2, [r3, #0]
	_bmp180_eeprom.BMP180_AC2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC2]);
 8000bda:	23ac      	movs	r3, #172	; 0xac
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 f8d1 	bl	8000d84 <BMP180_ReadReg>
 8000be2:	0003      	movs	r3, r0
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21c      	sxth	r4, r3
 8000be8:	23ad      	movs	r3, #173	; 0xad
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f8ca 	bl	8000d84 <BMP180_ReadReg>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	4b50      	ldr	r3, [pc, #320]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000bfa:	805a      	strh	r2, [r3, #2]
	_bmp180_eeprom.BMP180_AC3 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC3]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC3]);
 8000bfc:	23ae      	movs	r3, #174	; 0xae
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 f8c0 	bl	8000d84 <BMP180_ReadReg>
 8000c04:	0003      	movs	r3, r0
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21c      	sxth	r4, r3
 8000c0a:	23af      	movs	r3, #175	; 0xaf
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 f8b9 	bl	8000d84 <BMP180_ReadReg>
 8000c12:	0003      	movs	r3, r0
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	4323      	orrs	r3, r4
 8000c18:	b21a      	sxth	r2, r3
 8000c1a:	4b48      	ldr	r3, [pc, #288]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000c1c:	809a      	strh	r2, [r3, #4]
	_bmp180_eeprom.BMP180_AC4 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC4]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC4]);
 8000c1e:	23b0      	movs	r3, #176	; 0xb0
 8000c20:	0018      	movs	r0, r3
 8000c22:	f000 f8af 	bl	8000d84 <BMP180_ReadReg>
 8000c26:	0003      	movs	r3, r0
 8000c28:	021b      	lsls	r3, r3, #8
 8000c2a:	b21c      	sxth	r4, r3
 8000c2c:	23b1      	movs	r3, #177	; 0xb1
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 f8a8 	bl	8000d84 <BMP180_ReadReg>
 8000c34:	0003      	movs	r3, r0
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	4323      	orrs	r3, r4
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b3f      	ldr	r3, [pc, #252]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000c40:	80da      	strh	r2, [r3, #6]
	_bmp180_eeprom.BMP180_AC5 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC5]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC5]);
 8000c42:	23b2      	movs	r3, #178	; 0xb2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 f89d 	bl	8000d84 <BMP180_ReadReg>
 8000c4a:	0003      	movs	r3, r0
 8000c4c:	021b      	lsls	r3, r3, #8
 8000c4e:	b21c      	sxth	r4, r3
 8000c50:	23b3      	movs	r3, #179	; 0xb3
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 f896 	bl	8000d84 <BMP180_ReadReg>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4323      	orrs	r3, r4
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000c64:	811a      	strh	r2, [r3, #8]
	_bmp180_eeprom.BMP180_AC6 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_AC6]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_AC6]);
 8000c66:	23b4      	movs	r3, #180	; 0xb4
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 f88b 	bl	8000d84 <BMP180_ReadReg>
 8000c6e:	0003      	movs	r3, r0
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b21c      	sxth	r4, r3
 8000c74:	23b5      	movs	r3, #181	; 0xb5
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 f884 	bl	8000d84 <BMP180_ReadReg>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	4323      	orrs	r3, r4
 8000c82:	b21b      	sxth	r3, r3
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b2d      	ldr	r3, [pc, #180]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000c88:	815a      	strh	r2, [r3, #10]
	_bmp180_eeprom.BMP180_B1 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B1]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B1]);
 8000c8a:	23b6      	movs	r3, #182	; 0xb6
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 f879 	bl	8000d84 <BMP180_ReadReg>
 8000c92:	0003      	movs	r3, r0
 8000c94:	021b      	lsls	r3, r3, #8
 8000c96:	b21c      	sxth	r4, r3
 8000c98:	23b7      	movs	r3, #183	; 0xb7
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 f872 	bl	8000d84 <BMP180_ReadReg>
 8000ca0:	0003      	movs	r3, r0
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	4323      	orrs	r3, r4
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000caa:	819a      	strh	r2, [r3, #12]
	_bmp180_eeprom.BMP180_B2 = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_B2]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_B2]);
 8000cac:	23b8      	movs	r3, #184	; 0xb8
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 f868 	bl	8000d84 <BMP180_ReadReg>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	021b      	lsls	r3, r3, #8
 8000cb8:	b21c      	sxth	r4, r3
 8000cba:	23b9      	movs	r3, #185	; 0xb9
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 f861 	bl	8000d84 <BMP180_ReadReg>
 8000cc2:	0003      	movs	r3, r0
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000ccc:	81da      	strh	r2, [r3, #14]
	_bmp180_eeprom.BMP180_MB = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MB]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MB]);
 8000cce:	23ba      	movs	r3, #186	; 0xba
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f000 f857 	bl	8000d84 <BMP180_ReadReg>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	021b      	lsls	r3, r3, #8
 8000cda:	b21c      	sxth	r4, r3
 8000cdc:	23bb      	movs	r3, #187	; 0xbb
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 f850 	bl	8000d84 <BMP180_ReadReg>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000cee:	821a      	strh	r2, [r3, #16]
	_bmp180_eeprom.BMP180_MC = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MC]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MC]);
 8000cf0:	23bc      	movs	r3, #188	; 0xbc
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 f846 	bl	8000d84 <BMP180_ReadReg>
 8000cf8:	0003      	movs	r3, r0
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	b21c      	sxth	r4, r3
 8000cfe:	23bd      	movs	r3, #189	; 0xbd
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 f83f 	bl	8000d84 <BMP180_ReadReg>
 8000d06:	0003      	movs	r3, r0
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000d10:	825a      	strh	r2, [r3, #18]
	_bmp180_eeprom.BMP180_MD = (BMP180_ReadReg(BMP180_EEPROM_ADDR_MSB[BMP180_INDEX_MD]) << 8) | BMP180_ReadReg(BMP180_EEPROM_ADDR_LSB[BMP180_INDEX_MD]);
 8000d12:	23be      	movs	r3, #190	; 0xbe
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 f835 	bl	8000d84 <BMP180_ReadReg>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b21c      	sxth	r4, r3
 8000d20:	23bf      	movs	r3, #191	; 0xbf
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f82e 	bl	8000d84 <BMP180_ReadReg>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	b21a      	sxth	r2, r3
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <BMP180_UpdateCalibrationData+0x188>)
 8000d32:	829a      	strh	r2, [r3, #20]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000034 	.word	0x20000034

08000d40 <BMP180_WriteReg>:
/**
 * @brief Writes to a specific register.
 * @param reg Address of register to write to.
 * @param cmd Byte to write.
 */
void BMP180_WriteReg(uint8_t reg, uint8_t cmd) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af02      	add	r7, sp, #8
 8000d46:	0002      	movs	r2, r0
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	1dbb      	adds	r3, r7, #6
 8000d4e:	1c0a      	adds	r2, r1, #0
 8000d50:	701a      	strb	r2, [r3, #0]
	uint8_t arr[2] = { reg, cmd };
 8000d52:	210c      	movs	r1, #12
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	701a      	strb	r2, [r3, #0]
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	1dba      	adds	r2, r7, #6
 8000d60:	7812      	ldrb	r2, [r2, #0]
 8000d62:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, arr, 2, BMP180_I2C_TIMEOUT);
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <BMP180_WriteReg+0x40>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	187a      	adds	r2, r7, r1
 8000d6a:	23fa      	movs	r3, #250	; 0xfa
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2302      	movs	r3, #2
 8000d72:	21ee      	movs	r1, #238	; 0xee
 8000d74:	f002 f824 	bl	8002dc0 <HAL_I2C_Master_Transmit>
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b004      	add	sp, #16
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000030 	.word	0x20000030

08000d84 <BMP180_ReadReg>:
/**
 * @brief Reads from a specific register.
 * @param reg Address of register to read from.
 * @return Byte read.
 */
uint8_t BMP180_ReadReg(uint8_t reg) {
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af02      	add	r7, sp, #8
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &reg, 1, BMP180_I2C_TIMEOUT);
 8000d90:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <BMP180_ReadReg+0x44>)
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	1dfa      	adds	r2, r7, #7
 8000d96:	23fa      	movs	r3, #250	; 0xfa
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	21ee      	movs	r1, #238	; 0xee
 8000da0:	f002 f80e 	bl	8002dc0 <HAL_I2C_Master_Transmit>
	uint8_t result;
	HAL_I2C_Master_Receive(_bmp180_ui2c, BMP180_I2C_ADDR << 1, &result, 1, BMP180_I2C_TIMEOUT);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <BMP180_ReadReg+0x44>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	240f      	movs	r4, #15
 8000daa:	193a      	adds	r2, r7, r4
 8000dac:	23fa      	movs	r3, #250	; 0xfa
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	2301      	movs	r3, #1
 8000db4:	21ee      	movs	r1, #238	; 0xee
 8000db6:	f002 f90b 	bl	8002fd0 <HAL_I2C_Master_Receive>
	return result;
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	781b      	ldrb	r3, [r3, #0]
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b005      	add	sp, #20
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000030 	.word	0x20000030

08000dcc <BMP180_GetRawTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in 0.1 (1/10) degrees Celsius.
 */
int32_t BMP180_GetRawTemperature(void) {
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000dd2:	232e      	movs	r3, #46	; 0x2e
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	20f4      	movs	r0, #244	; 0xf4
 8000dd8:	f7ff ffb2 	bl	8000d40 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000ddc:	2305      	movs	r3, #5
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 fe26 	bl	8001a30 <HAL_Delay>
	int32_t ut = (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 8000de4:	20f6      	movs	r0, #246	; 0xf6
 8000de6:	f7ff ffcd 	bl	8000d84 <BMP180_ReadReg>
 8000dea:	0003      	movs	r3, r0
 8000dec:	021c      	lsls	r4, r3, #8
 8000dee:	20f7      	movs	r0, #247	; 0xf7
 8000df0:	f7ff ffc8 	bl	8000d84 <BMP180_ReadReg>
 8000df4:	0003      	movs	r3, r0
 8000df6:	4323      	orrs	r3, r4
 8000df8:	60fb      	str	r3, [r7, #12]
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <BMP180_GetRawTemperature+0x88>)
 8000dfc:	895b      	ldrh	r3, [r3, #10]
 8000dfe:	001a      	movs	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <BMP180_GetRawTemperature+0x88>)
 8000e06:	8912      	ldrh	r2, [r2, #8]
 8000e08:	4353      	muls	r3, r2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da02      	bge.n	8000e14 <BMP180_GetRawTemperature+0x48>
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <BMP180_GetRawTemperature+0x8c>)
 8000e10:	4694      	mov	ip, r2
 8000e12:	4463      	add	r3, ip
 8000e14:	13db      	asrs	r3, r3, #15
 8000e16:	60bb      	str	r3, [r7, #8]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <BMP180_GetRawTemperature+0x88>)
 8000e1a:	2212      	movs	r2, #18
 8000e1c:	5e9b      	ldrsh	r3, [r3, r2]
 8000e1e:	02da      	lsls	r2, r3, #11
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <BMP180_GetRawTemperature+0x88>)
 8000e22:	2114      	movs	r1, #20
 8000e24:	5e5b      	ldrsh	r3, [r3, r1]
 8000e26:	0019      	movs	r1, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	18cb      	adds	r3, r1, r3
 8000e2c:	0019      	movs	r1, r3
 8000e2e:	0010      	movs	r0, r2
 8000e30:	f7ff f9f4 	bl	800021c <__divsi3>
 8000e34:	0003      	movs	r3, r0
 8000e36:	607b      	str	r3, [r7, #4]
	int32_t b5 = x1 + x2;
 8000e38:	68ba      	ldr	r2, [r7, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	18d3      	adds	r3, r2, r3
 8000e3e:	603b      	str	r3, [r7, #0]
	return (b5 + 8) / (1 << 4);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	3308      	adds	r3, #8
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	da00      	bge.n	8000e4a <BMP180_GetRawTemperature+0x7e>
 8000e48:	330f      	adds	r3, #15
 8000e4a:	111b      	asrs	r3, r3, #4
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b005      	add	sp, #20
 8000e52:	bd90      	pop	{r4, r7, pc}
 8000e54:	20000034 	.word	0x20000034
 8000e58:	00007fff 	.word	0x00007fff

08000e5c <BMP180_GetTemperature>:

/**
 * @brief Measures and calculates temperature.
 * @return Temperature in degrees Celsius.
 */
float BMP180_GetTemperature(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	int32_t temp = BMP180_GetRawTemperature();
 8000e62:	f7ff ffb3 	bl	8000dcc <BMP180_GetRawTemperature>
 8000e66:	0003      	movs	r3, r0
 8000e68:	607b      	str	r3, [r7, #4]
	return temp / 10.0;
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff fdb0 	bl	80009d0 <__aeabi_i2d>
 8000e70:	2200      	movs	r2, #0
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <BMP180_GetTemperature+0x34>)
 8000e74:	f7ff fabe 	bl	80003f4 <__aeabi_ddiv>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	000b      	movs	r3, r1
 8000e7c:	0010      	movs	r0, r2
 8000e7e:	0019      	movs	r1, r3
 8000e80:	f7ff fdd6 	bl	8000a30 <__aeabi_d2f>
 8000e84:	1c03      	adds	r3, r0, #0
}
 8000e86:	1c18      	adds	r0, r3, #0
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b002      	add	sp, #8
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40240000 	.word	0x40240000

08000e94 <BMP180_GetPressure>:

/**
 * @brief Measures and calculates pressure.
 * @return Pressure in Pascal(Pa).
 */
int32_t BMP180_GetPressure(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_TEMP);
 8000e9a:	232e      	movs	r3, #46	; 0x2e
 8000e9c:	0019      	movs	r1, r3
 8000e9e:	20f4      	movs	r0, #244	; 0xf4
 8000ea0:	f7ff ff4e 	bl	8000d40 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_TEMP);
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 fdc2 	bl	8001a30 <HAL_Delay>
	int32_t ut = BMP180_GetUT();
 8000eac:	f000 f91c 	bl	80010e8 <BMP180_GetUT>
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
	BMP180_WriteReg(BMP180_CONTROL_REG, BMP180_CMD_PRES[_bmp180_oss]);
 8000eb4:	4b7f      	ldr	r3, [pc, #508]	; (80010b4 <BMP180_GetPressure+0x220>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	001a      	movs	r2, r3
 8000eba:	4b7f      	ldr	r3, [pc, #508]	; (80010b8 <BMP180_GetPressure+0x224>)
 8000ebc:	5c9b      	ldrb	r3, [r3, r2]
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	20f4      	movs	r0, #244	; 0xf4
 8000ec2:	f7ff ff3d 	bl	8000d40 <BMP180_WriteReg>
	HAL_Delay(BMP180_DELAY_PRES[_bmp180_oss]);
 8000ec6:	4b7b      	ldr	r3, [pc, #492]	; (80010b4 <BMP180_GetPressure+0x220>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	001a      	movs	r2, r3
 8000ecc:	4b7b      	ldr	r3, [pc, #492]	; (80010bc <BMP180_GetPressure+0x228>)
 8000ece:	5c9b      	ldrb	r3, [r3, r2]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 fdad 	bl	8001a30 <HAL_Delay>
	int32_t up = BMP180_GetUP();
 8000ed6:	f000 f917 	bl	8001108 <BMP180_GetUP>
 8000eda:	0003      	movs	r3, r0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t x1 = (ut - _bmp180_eeprom.BMP180_AC6) * _bmp180_eeprom.BMP180_AC5 / (1 << 15);
 8000ede:	4b78      	ldr	r3, [pc, #480]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000ee0:	895b      	ldrh	r3, [r3, #10]
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee6:	1a9b      	subs	r3, r3, r2
 8000ee8:	4a75      	ldr	r2, [pc, #468]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000eea:	8912      	ldrh	r2, [r2, #8]
 8000eec:	4353      	muls	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da02      	bge.n	8000ef8 <BMP180_GetPressure+0x64>
 8000ef2:	4a74      	ldr	r2, [pc, #464]	; (80010c4 <BMP180_GetPressure+0x230>)
 8000ef4:	4694      	mov	ip, r2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	13db      	asrs	r3, r3, #15
 8000efa:	623b      	str	r3, [r7, #32]
	int32_t x2 = (_bmp180_eeprom.BMP180_MC * (1 << 11)) / (x1 + _bmp180_eeprom.BMP180_MD);
 8000efc:	4b70      	ldr	r3, [pc, #448]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000efe:	2212      	movs	r2, #18
 8000f00:	5e9b      	ldrsh	r3, [r3, r2]
 8000f02:	02da      	lsls	r2, r3, #11
 8000f04:	4b6e      	ldr	r3, [pc, #440]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000f06:	2114      	movs	r1, #20
 8000f08:	5e5b      	ldrsh	r3, [r3, r1]
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	18cb      	adds	r3, r1, r3
 8000f10:	0019      	movs	r1, r3
 8000f12:	0010      	movs	r0, r2
 8000f14:	f7ff f982 	bl	800021c <__divsi3>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	61fb      	str	r3, [r7, #28]
	int32_t b5 = x1 + x2;
 8000f1c:	6a3a      	ldr	r2, [r7, #32]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	18d3      	adds	r3, r2, r3
 8000f22:	61bb      	str	r3, [r7, #24]
	int32_t b6 = b5 - 4000;
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	4a68      	ldr	r2, [pc, #416]	; (80010c8 <BMP180_GetPressure+0x234>)
 8000f28:	4694      	mov	ip, r2
 8000f2a:	4463      	add	r3, ip
 8000f2c:	617b      	str	r3, [r7, #20]
	x1 = (_bmp180_eeprom.BMP180_B2 * (b6 * b6 / (1 << 12))) / (1 << 11);
 8000f2e:	4b64      	ldr	r3, [pc, #400]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000f30:	220e      	movs	r2, #14
 8000f32:	5e9b      	ldrsh	r3, [r3, r2]
 8000f34:	001a      	movs	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	435b      	muls	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	da02      	bge.n	8000f44 <BMP180_GetPressure+0xb0>
 8000f3e:	4963      	ldr	r1, [pc, #396]	; (80010cc <BMP180_GetPressure+0x238>)
 8000f40:	468c      	mov	ip, r1
 8000f42:	4463      	add	r3, ip
 8000f44:	131b      	asrs	r3, r3, #12
 8000f46:	4353      	muls	r3, r2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	da02      	bge.n	8000f52 <BMP180_GetPressure+0xbe>
 8000f4c:	4a60      	ldr	r2, [pc, #384]	; (80010d0 <BMP180_GetPressure+0x23c>)
 8000f4e:	4694      	mov	ip, r2
 8000f50:	4463      	add	r3, ip
 8000f52:	12db      	asrs	r3, r3, #11
 8000f54:	623b      	str	r3, [r7, #32]
	x2 = _bmp180_eeprom.BMP180_AC2 * b6 / (1 << 11);
 8000f56:	4b5a      	ldr	r3, [pc, #360]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	5e9b      	ldrsh	r3, [r3, r2]
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	4353      	muls	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da02      	bge.n	8000f6c <BMP180_GetPressure+0xd8>
 8000f66:	4a5a      	ldr	r2, [pc, #360]	; (80010d0 <BMP180_GetPressure+0x23c>)
 8000f68:	4694      	mov	ip, r2
 8000f6a:	4463      	add	r3, ip
 8000f6c:	12db      	asrs	r3, r3, #11
 8000f6e:	61fb      	str	r3, [r7, #28]
	int32_t x3 = x1 + x2;
 8000f70:	6a3a      	ldr	r2, [r7, #32]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	18d3      	adds	r3, r2, r3
 8000f76:	613b      	str	r3, [r7, #16]
	int32_t b3 = (((_bmp180_eeprom.BMP180_AC1 * 4 + x3) << _bmp180_oss) + 2) / 4;
 8000f78:	4b51      	ldr	r3, [pc, #324]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	5e9b      	ldrsh	r3, [r3, r2]
 8000f7e:	009a      	lsls	r2, r3, #2
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <BMP180_GetPressure+0x220>)
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	4093      	lsls	r3, r2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da00      	bge.n	8000f92 <BMP180_GetPressure+0xfe>
 8000f90:	3303      	adds	r3, #3
 8000f92:	109b      	asrs	r3, r3, #2
 8000f94:	60fb      	str	r3, [r7, #12]
	x1 = _bmp180_eeprom.BMP180_AC3 * b6 / (1 << 13);
 8000f96:	4b4a      	ldr	r3, [pc, #296]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000f98:	2204      	movs	r2, #4
 8000f9a:	5e9b      	ldrsh	r3, [r3, r2]
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	4353      	muls	r3, r2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	da02      	bge.n	8000fac <BMP180_GetPressure+0x118>
 8000fa6:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <BMP180_GetPressure+0x240>)
 8000fa8:	4694      	mov	ip, r2
 8000faa:	4463      	add	r3, ip
 8000fac:	135b      	asrs	r3, r3, #13
 8000fae:	623b      	str	r3, [r7, #32]
	x2 = (_bmp180_eeprom.BMP180_B1 * (b6 * b6 / (1 << 12))) / (1 << 16);
 8000fb0:	4b43      	ldr	r3, [pc, #268]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	5e9b      	ldrsh	r3, [r3, r2]
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	435b      	muls	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da02      	bge.n	8000fc6 <BMP180_GetPressure+0x132>
 8000fc0:	4942      	ldr	r1, [pc, #264]	; (80010cc <BMP180_GetPressure+0x238>)
 8000fc2:	468c      	mov	ip, r1
 8000fc4:	4463      	add	r3, ip
 8000fc6:	131b      	asrs	r3, r3, #12
 8000fc8:	4353      	muls	r3, r2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	da02      	bge.n	8000fd4 <BMP180_GetPressure+0x140>
 8000fce:	4a42      	ldr	r2, [pc, #264]	; (80010d8 <BMP180_GetPressure+0x244>)
 8000fd0:	4694      	mov	ip, r2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	141b      	asrs	r3, r3, #16
 8000fd6:	61fb      	str	r3, [r7, #28]
	x3 = ((x1 + x2) + 2) / 4;
 8000fd8:	6a3a      	ldr	r2, [r7, #32]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	18d3      	adds	r3, r2, r3
 8000fde:	3302      	adds	r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da00      	bge.n	8000fe6 <BMP180_GetPressure+0x152>
 8000fe4:	3303      	adds	r3, #3
 8000fe6:	109b      	asrs	r3, r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
	uint32_t b4 = _bmp180_eeprom.BMP180_AC4 * (uint32_t) (x3 + 32768) / (1 << 15);
 8000fea:	4b35      	ldr	r3, [pc, #212]	; (80010c0 <BMP180_GetPressure+0x22c>)
 8000fec:	88db      	ldrh	r3, [r3, #6]
 8000fee:	001a      	movs	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	0209      	lsls	r1, r1, #8
 8000ff6:	468c      	mov	ip, r1
 8000ff8:	4463      	add	r3, ip
 8000ffa:	4353      	muls	r3, r2
 8000ffc:	0bdb      	lsrs	r3, r3, #15
 8000ffe:	60bb      	str	r3, [r7, #8]
	uint32_t b7 = ((uint32_t) up - b3) * (50000 >> _bmp180_oss);
 8001000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <BMP180_GetPressure+0x220>)
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	0011      	movs	r1, r2
 800100c:	4a33      	ldr	r2, [pc, #204]	; (80010dc <BMP180_GetPressure+0x248>)
 800100e:	410a      	asrs	r2, r1
 8001010:	4353      	muls	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
	int32_t p;
	if (b7 < 0x80000000)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db08      	blt.n	800102c <BMP180_GetPressure+0x198>
		p = (b7 * 2) / b4;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff f871 	bl	8000108 <__udivsi3>
 8001026:	0003      	movs	r3, r0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800102a:	e006      	b.n	800103a <BMP180_GetPressure+0x1a6>
	else
		p = (b7 / b4) * 2;
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff f86a 	bl	8000108 <__udivsi3>
 8001034:	0003      	movs	r3, r0
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
	x1 = (p / (1 << 8)) * (p / (1 << 8));
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	2b00      	cmp	r3, #0
 800103e:	da00      	bge.n	8001042 <BMP180_GetPressure+0x1ae>
 8001040:	33ff      	adds	r3, #255	; 0xff
 8001042:	121b      	asrs	r3, r3, #8
 8001044:	001a      	movs	r2, r3
 8001046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001048:	2b00      	cmp	r3, #0
 800104a:	da00      	bge.n	800104e <BMP180_GetPressure+0x1ba>
 800104c:	33ff      	adds	r3, #255	; 0xff
 800104e:	121b      	asrs	r3, r3, #8
 8001050:	4353      	muls	r3, r2
 8001052:	623b      	str	r3, [r7, #32]
	x1 = (x1 * 3038) / (1 << 16);
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <BMP180_GetPressure+0x24c>)
 8001058:	4353      	muls	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	da02      	bge.n	8001064 <BMP180_GetPressure+0x1d0>
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <BMP180_GetPressure+0x244>)
 8001060:	4694      	mov	ip, r2
 8001062:	4463      	add	r3, ip
 8001064:	141b      	asrs	r3, r3, #16
 8001066:	623b      	str	r3, [r7, #32]
	x2 = (-7357 * p) / (1 << 16);
 8001068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800106a:	0013      	movs	r3, r2
 800106c:	015b      	lsls	r3, r3, #5
 800106e:	189b      	adds	r3, r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	00da      	lsls	r2, r3, #3
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	425b      	negs	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	da02      	bge.n	8001088 <BMP180_GetPressure+0x1f4>
 8001082:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <BMP180_GetPressure+0x244>)
 8001084:	4694      	mov	ip, r2
 8001086:	4463      	add	r3, ip
 8001088:	141b      	asrs	r3, r3, #16
 800108a:	61fb      	str	r3, [r7, #28]
	p = p + (x1 + x2 + 3791) / (1 << 4);
 800108c:	6a3a      	ldr	r2, [r7, #32]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	18d3      	adds	r3, r2, r3
 8001092:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <BMP180_GetPressure+0x250>)
 8001094:	4694      	mov	ip, r2
 8001096:	4463      	add	r3, ip
 8001098:	2b00      	cmp	r3, #0
 800109a:	da00      	bge.n	800109e <BMP180_GetPressure+0x20a>
 800109c:	330f      	adds	r3, #15
 800109e:	111b      	asrs	r3, r3, #4
 80010a0:	001a      	movs	r2, r3
 80010a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a4:	189b      	adds	r3, r3, r2
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	return p;
 80010a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b00c      	add	sp, #48	; 0x30
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	2000004a 	.word	0x2000004a
 80010b8:	080044e0 	.word	0x080044e0
 80010bc:	080044e4 	.word	0x080044e4
 80010c0:	20000034 	.word	0x20000034
 80010c4:	00007fff 	.word	0x00007fff
 80010c8:	fffff060 	.word	0xfffff060
 80010cc:	00000fff 	.word	0x00000fff
 80010d0:	000007ff 	.word	0x000007ff
 80010d4:	00001fff 	.word	0x00001fff
 80010d8:	0000ffff 	.word	0x0000ffff
 80010dc:	0000c350 	.word	0x0000c350
 80010e0:	00000bde 	.word	0x00000bde
 80010e4:	00000ecf 	.word	0x00000ecf

080010e8 <BMP180_GetUT>:

int32_t BMP180_GetUT(void){
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	return (BMP180_ReadReg(BMP180_MSB_REG) << 8) | BMP180_ReadReg(BMP180_LSB_REG);
 80010ec:	20f6      	movs	r0, #246	; 0xf6
 80010ee:	f7ff fe49 	bl	8000d84 <BMP180_ReadReg>
 80010f2:	0003      	movs	r3, r0
 80010f4:	021c      	lsls	r4, r3, #8
 80010f6:	20f7      	movs	r0, #247	; 0xf7
 80010f8:	f7ff fe44 	bl	8000d84 <BMP180_ReadReg>
 80010fc:	0003      	movs	r3, r0
 80010fe:	4323      	orrs	r3, r4
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001108 <BMP180_GetUP>:

int32_t BMP180_GetUP(void){
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	af00      	add	r7, sp, #0
	return ((BMP180_ReadReg(BMP180_MSB_REG) << 16) | (BMP180_ReadReg(BMP180_LSB_REG) << 8) | BMP180_ReadReg(BMP180_XLSB_REG)) >> (8 - _bmp180_oss);
 800110c:	20f6      	movs	r0, #246	; 0xf6
 800110e:	f7ff fe39 	bl	8000d84 <BMP180_ReadReg>
 8001112:	0003      	movs	r3, r0
 8001114:	041c      	lsls	r4, r3, #16
 8001116:	20f7      	movs	r0, #247	; 0xf7
 8001118:	f7ff fe34 	bl	8000d84 <BMP180_ReadReg>
 800111c:	0003      	movs	r3, r0
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	431c      	orrs	r4, r3
 8001122:	20f8      	movs	r0, #248	; 0xf8
 8001124:	f7ff fe2e 	bl	8000d84 <BMP180_ReadReg>
 8001128:	0003      	movs	r3, r0
 800112a:	0022      	movs	r2, r4
 800112c:	431a      	orrs	r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <BMP180_GetUP+0x3c>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0019      	movs	r1, r3
 8001134:	2308      	movs	r3, #8
 8001136:	1a5b      	subs	r3, r3, r1
 8001138:	411a      	asrs	r2, r3
 800113a:	0013      	movs	r3, r2
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bdb0      	pop	{r4, r5, r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	2000004a 	.word	0x2000004a

08001148 <CAN_send_receive_state>:
								CAN_TxHeaderTypeDef* TxHeader,
								uint8_t* buffer,
								uint8_t buffer_len	);

static void CAN_send_receive_state(CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* TxHeader)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	CAN_send_packet(hcan, TxHeader, receive_state_packet, CAN_PACKET_LEN);
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <CAN_send_receive_state+0x20>)
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	2308      	movs	r3, #8
 800115a:	f000 fa2f 	bl	80015bc <CAN_send_packet>
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	20000000 	.word	0x20000000

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	b09b      	sub	sp, #108	; 0x6c
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001172:	f000 fbf9 	bl	8001968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001176:	f000 f8cb 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117a:	f000 f9c9 	bl	8001510 <MX_GPIO_Init>
  MX_CAN_Init();
 800117e:	f000 f92d 	bl	80013dc <MX_CAN_Init>
  MX_I2C1_Init();
 8001182:	f000 f985 	bl	8001490 <MX_I2C1_Init>
  // sensors
  //############################################################################################################

  /* Initializes BMP180 sensor and oversampling settings. */

  BMP180_Init(&hi2c1);
 8001186:	4b59      	ldr	r3, [pc, #356]	; (80012ec <main+0x180>)
 8001188:	0018      	movs	r0, r3
 800118a:	f7ff fcf5 	bl	8000b78 <BMP180_Init>
  BMP180_SetOversampling(BMP180_ULTRA);
 800118e:	2003      	movs	r0, #3
 8001190:	f7ff fd00 	bl	8000b94 <BMP180_SetOversampling>
  BMP180_UpdateCalibrationData();
 8001194:	f7ff fd0e 	bl	8000bb4 <BMP180_UpdateCalibrationData>

  //############################################################################################################

  // Start the CAN peripheral
  //############################################################################################################
  HAL_CAN_Start(&hcan);
 8001198:	4b55      	ldr	r3, [pc, #340]	; (80012f0 <main+0x184>)
 800119a:	0018      	movs	r0, r3
 800119c:	f000 fe5c 	bl	8001e58 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <main+0x184>)
 80011a2:	2102      	movs	r1, #2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f001 f8c1 	bl	800232c <HAL_CAN_ActivateNotification>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <main+0x46>
  {
	  Error_Handler();
 80011ae:	f000 fab9 	bl	8001724 <Error_Handler>
  }
  CAN_TxHeaderTypeDef TxHeader;
  TxHeader.IDE = CAN_ID_STD;
 80011b2:	2124      	movs	r1, #36	; 0x24
 80011b4:	2618      	movs	r6, #24
 80011b6:	198b      	adds	r3, r1, r6
 80011b8:	19db      	adds	r3, r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = SENSOR_NODE_CAN_ID;
 80011be:	198b      	adds	r3, r1, r6
 80011c0:	19db      	adds	r3, r3, r7
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	601a      	str	r2, [r3, #0]
  TxHeader.ExtId = 0;
 80011c6:	198b      	adds	r3, r1, r6
 80011c8:	19db      	adds	r3, r3, r7
 80011ca:	2200      	movs	r2, #0
 80011cc:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80011ce:	198b      	adds	r3, r1, r6
 80011d0:	19db      	adds	r3, r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8;
 80011d6:	198b      	adds	r3, r1, r6
 80011d8:	19db      	adds	r3, r3, r7
 80011da:	2208      	movs	r2, #8
 80011dc:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80011de:	198b      	adds	r3, r1, r6
 80011e0:	19db      	adds	r3, r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	751a      	strb	r2, [r3, #20]
  //############################################################################################################

  // set up test data
  // ############################################################################################################
  mpu6050_data mpu6050_test;
  mpu6050_test.Ax = 10009.34;
 80011e6:	2008      	movs	r0, #8
 80011e8:	1983      	adds	r3, r0, r6
 80011ea:	19d9      	adds	r1, r3, r7
 80011ec:	4a41      	ldr	r2, [pc, #260]	; (80012f4 <main+0x188>)
 80011ee:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <main+0x18c>)
 80011f0:	600a      	str	r2, [r1, #0]
 80011f2:	604b      	str	r3, [r1, #4]
  mpu6050_test.Ay = 1222.555;
 80011f4:	1983      	adds	r3, r0, r6
 80011f6:	19d9      	adds	r1, r3, r7
 80011f8:	4a40      	ldr	r2, [pc, #256]	; (80012fc <main+0x190>)
 80011fa:	4b41      	ldr	r3, [pc, #260]	; (8001300 <main+0x194>)
 80011fc:	608a      	str	r2, [r1, #8]
 80011fe:	60cb      	str	r3, [r1, #12]
  mpu6050_test.Az = 4002.76;
 8001200:	1983      	adds	r3, r0, r6
 8001202:	19d9      	adds	r1, r3, r7
 8001204:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <main+0x198>)
 8001206:	4b40      	ldr	r3, [pc, #256]	; (8001308 <main+0x19c>)
 8001208:	610a      	str	r2, [r1, #16]
 800120a:	614b      	str	r3, [r1, #20]
  size_t mpu6050_test_len = sizeof(mpu6050_test);
 800120c:	2318      	movs	r3, #24
 800120e:	667b      	str	r3, [r7, #100]	; 0x64
  bmp180_data bmp180_test;
  /*
  bmp180_test.pressure = 6006;
  bmp180_test.temperature = 98;
  */
  size_t bmp180_test_len = sizeof(bmp180_test);
 8001210:	2308      	movs	r3, #8
 8001212:	663b      	str	r3, [r7, #96]	; 0x60

  size_t test_data_buffer_len = mpu6050_test_len + bmp180_test_len;
 8001214:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001218:	18d3      	adds	r3, r2, r3
 800121a:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint8_t test_data_buffer[test_data_buffer_len];
 800121c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800121e:	001a      	movs	r2, r3
 8001220:	3a01      	subs	r2, #1
 8001222:	65ba      	str	r2, [r7, #88]	; 0x58
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	2200      	movs	r2, #0
 8001228:	60fa      	str	r2, [r7, #12]
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	68f9      	ldr	r1, [r7, #12]
 800122e:	0002      	movs	r2, r0
 8001230:	0f52      	lsrs	r2, r2, #29
 8001232:	000e      	movs	r6, r1
 8001234:	00f6      	lsls	r6, r6, #3
 8001236:	617e      	str	r6, [r7, #20]
 8001238:	697e      	ldr	r6, [r7, #20]
 800123a:	4316      	orrs	r6, r2
 800123c:	617e      	str	r6, [r7, #20]
 800123e:	0002      	movs	r2, r0
 8001240:	00d2      	lsls	r2, r2, #3
 8001242:	613a      	str	r2, [r7, #16]
 8001244:	603b      	str	r3, [r7, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	0002      	movs	r2, r0
 8001250:	0f52      	lsrs	r2, r2, #29
 8001252:	000e      	movs	r6, r1
 8001254:	00f5      	lsls	r5, r6, #3
 8001256:	4315      	orrs	r5, r2
 8001258:	0002      	movs	r2, r0
 800125a:	00d4      	lsls	r4, r2, #3
 800125c:	3307      	adds	r3, #7
 800125e:	08db      	lsrs	r3, r3, #3
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	466a      	mov	r2, sp
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	469d      	mov	sp, r3
 8001268:	466b      	mov	r3, sp
 800126a:	3300      	adds	r3, #0
 800126c:	657b      	str	r3, [r7, #84]	; 0x54
    /* USER CODE BEGIN 3 */

	  // gather i2c sensor data and package for CAN
	  //############################################################################################################
	  // read sensor values
	  bmp180_test.pressure = BMP180_GetPressure();
 800126e:	f7ff fe11 	bl	8000e94 <BMP180_GetPressure>
 8001272:	0002      	movs	r2, r0
 8001274:	2418      	movs	r4, #24
 8001276:	193b      	adds	r3, r7, r4
 8001278:	605a      	str	r2, [r3, #4]
	  bmp180_test.temperature = BMP180_GetTemperature();
 800127a:	f7ff fdef 	bl	8000e5c <BMP180_GetTemperature>
 800127e:	1c02      	adds	r2, r0, #0
 8001280:	193b      	adds	r3, r7, r4
 8001282:	601a      	str	r2, [r3, #0]

	  // package sensor values into data buffer
	  memcpy(test_data_buffer, &bmp180_test, bmp180_test_len);
 8001284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001286:	1939      	adds	r1, r7, r4
 8001288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800128a:	0018      	movs	r0, r3
 800128c:	f003 f8f2 	bl	8004474 <memcpy>
	  memcpy(test_data_buffer+bmp180_test_len, &mpu6050_test, mpu6050_test_len);
 8001290:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001298:	2108      	movs	r1, #8
 800129a:	1909      	adds	r1, r1, r4
 800129c:	19c9      	adds	r1, r1, r7
 800129e:	0018      	movs	r0, r3
 80012a0:	f003 f8e8 	bl	8004474 <memcpy>
	  //############################################################################################################

	  // check sensor node state
	  if( sensor_node_state == SENSOR_NODE_TRANSMIT_STATE )
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <main+0x1a0>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d10c      	bne.n	80012c8 <main+0x15c>
	  {
		  // send buffer over CAN
		  CAN_send_buffer(&hcan, &TxHeader, test_data_buffer, test_data_buffer_len);
 80012ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012b4:	2124      	movs	r1, #36	; 0x24
 80012b6:	1909      	adds	r1, r1, r4
 80012b8:	19c9      	adds	r1, r1, r7
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <main+0x184>)
 80012bc:	f000 f9d4 	bl	8001668 <CAN_send_buffer>
		  HAL_Delay(CAN_SEND_DELAY);
 80012c0:	20fa      	movs	r0, #250	; 0xfa
 80012c2:	f000 fbb5 	bl	8001a30 <HAL_Delay>
 80012c6:	e7d2      	b.n	800126e <main+0x102>
	  }
	  else if( sensor_node_state == SENSOR_NODE_RECEIVE_STATE )
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <main+0x1a0>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1cd      	bne.n	800126e <main+0x102>
	  {
		  CAN_send_receive_state(&hcan, &TxHeader);
 80012d2:	2324      	movs	r3, #36	; 0x24
 80012d4:	2218      	movs	r2, #24
 80012d6:	189b      	adds	r3, r3, r2
 80012d8:	19da      	adds	r2, r3, r7
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <main+0x184>)
 80012dc:	0011      	movs	r1, r2
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff ff32 	bl	8001148 <CAN_send_receive_state>
		  HAL_Delay(CAN_SEND_DELAY);
 80012e4:	20fa      	movs	r0, #250	; 0xfa
 80012e6:	f000 fba3 	bl	8001a30 <HAL_Delay>
	  bmp180_test.pressure = BMP180_GetPressure();
 80012ea:	e7c0      	b.n	800126e <main+0x102>
 80012ec:	2000004c 	.word	0x2000004c
 80012f0:	200000a0 	.word	0x200000a0
 80012f4:	851eb852 	.word	0x851eb852
 80012f8:	40c38cab 	.word	0x40c38cab
 80012fc:	51eb851f 	.word	0x51eb851f
 8001300:	40931a38 	.word	0x40931a38
 8001304:	1eb851ec 	.word	0x1eb851ec
 8001308:	40af4585 	.word	0x40af4585
 800130c:	200000ec 	.word	0x200000ec

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b099      	sub	sp, #100	; 0x64
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	242c      	movs	r4, #44	; 0x2c
 8001318:	193b      	adds	r3, r7, r4
 800131a:	0018      	movs	r0, r3
 800131c:	2334      	movs	r3, #52	; 0x34
 800131e:	001a      	movs	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	f003 f87b 	bl	800441c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001326:	231c      	movs	r3, #28
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	0018      	movs	r0, r3
 800132c:	2310      	movs	r3, #16
 800132e:	001a      	movs	r2, r3
 8001330:	2100      	movs	r1, #0
 8001332:	f003 f873 	bl	800441c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001336:	003b      	movs	r3, r7
 8001338:	0018      	movs	r0, r3
 800133a:	231c      	movs	r3, #28
 800133c:	001a      	movs	r2, r3
 800133e:	2100      	movs	r1, #0
 8001340:	f003 f86c 	bl	800441c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001344:	0021      	movs	r1, r4
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2203      	movs	r2, #3
 800134a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134c:	187b      	adds	r3, r7, r1
 800134e:	2201      	movs	r2, #1
 8001350:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001352:	187b      	adds	r3, r7, r1
 8001354:	2201      	movs	r2, #1
 8001356:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001358:	187b      	adds	r3, r7, r1
 800135a:	2210      	movs	r2, #16
 800135c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	187b      	adds	r3, r7, r1
 8001360:	2202      	movs	r2, #2
 8001362:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	0252      	lsls	r2, r2, #9
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	22a0      	movs	r2, #160	; 0xa0
 8001370:	0392      	lsls	r2, r2, #14
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2201      	movs	r2, #1
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	187b      	adds	r3, r7, r1
 800137c:	0018      	movs	r0, r3
 800137e:	f002 fa7d 	bl	800387c <HAL_RCC_OscConfig>
 8001382:	1e03      	subs	r3, r0, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001386:	f000 f9cd 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138a:	211c      	movs	r1, #28
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2207      	movs	r2, #7
 8001390:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2202      	movs	r2, #2
 8001396:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80013a4:	187b      	adds	r3, r7, r1
 80013a6:	2101      	movs	r1, #1
 80013a8:	0018      	movs	r0, r3
 80013aa:	f002 fded 	bl	8003f88 <HAL_RCC_ClockConfig>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013b2:	f000 f9b7 	bl	8001724 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013b6:	003b      	movs	r3, r7
 80013b8:	2220      	movs	r2, #32
 80013ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80013bc:	003b      	movs	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c2:	003b      	movs	r3, r7
 80013c4:	0018      	movs	r0, r3
 80013c6:	f002 ff2b 	bl	8004220 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	1e03      	subs	r3, r0, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ce:	f000 f9a9 	bl	8001724 <Error_Handler>
  }
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b019      	add	sp, #100	; 0x64
 80013d8:	bd90      	pop	{r4, r7, pc}
	...

080013dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_CAN_Init+0xac>)
 80013e4:	4a29      	ldr	r2, [pc, #164]	; (800148c <MX_CAN_Init+0xb0>)
 80013e6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 150;
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_CAN_Init+0xac>)
 80013ea:	2296      	movs	r2, #150	; 0x96
 80013ec:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <MX_CAN_Init+0xac>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <MX_CAN_Init+0xac>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_CAN_Init+0xac>)
 80013fc:	22c0      	movs	r2, #192	; 0xc0
 80013fe:	0312      	lsls	r2, r2, #12
 8001400:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <MX_CAN_Init+0xac>)
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	0352      	lsls	r2, r2, #13
 8001408:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <MX_CAN_Init+0xac>)
 800140c:	2200      	movs	r2, #0
 800140e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001410:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <MX_CAN_Init+0xac>)
 8001412:	2200      	movs	r2, #0
 8001414:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_CAN_Init+0xac>)
 8001418:	2200      	movs	r2, #0
 800141a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <MX_CAN_Init+0xac>)
 800141e:	2200      	movs	r2, #0
 8001420:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_CAN_Init+0xac>)
 8001424:	2200      	movs	r2, #0
 8001426:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <MX_CAN_Init+0xac>)
 800142a:	2200      	movs	r2, #0
 800142c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_CAN_Init+0xac>)
 8001430:	0018      	movs	r0, r3
 8001432:	f000 fb21 	bl	8001a78 <HAL_CAN_Init>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800143a:	f000 f973 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  // configure CAN filter to only accept commands from the sensor server
  CAN_FilterTypeDef canfilterconfig;
  canfilterconfig.FilterBank = (uint32_t)10;  // which filter bank to use from the assigned ones
 800143e:	003b      	movs	r3, r7
 8001440:	220a      	movs	r2, #10
 8001442:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001444:	003b      	movs	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh = SERVER_CAN_ID<<5;
 800144a:	003b      	movs	r3, r7
 800144c:	2220      	movs	r2, #32
 800144e:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow = SERVER_CAN_ID<<5;
 8001450:	003b      	movs	r3, r7
 8001452:	2220      	movs	r2, #32
 8001454:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh = SERVER_CAN_ID<<5;
 8001456:	003b      	movs	r3, r7
 8001458:	2220      	movs	r2, #32
 800145a:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow = SERVER_CAN_ID<<5;
 800145c:	003b      	movs	r3, r7
 800145e:	2220      	movs	r2, #32
 8001460:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001462:	003b      	movs	r3, r7
 8001464:	2201      	movs	r2, #1
 8001466:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001468:	003b      	movs	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800146e:	003b      	movs	r3, r7
 8001470:	2201      	movs	r2, #1
 8001472:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001474:	003a      	movs	r2, r7
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <MX_CAN_Init+0xac>)
 8001478:	0011      	movs	r1, r2
 800147a:	0018      	movs	r0, r3
 800147c:	f000 fbfa 	bl	8001c74 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001480:	46c0      	nop			; (mov r8, r8)
 8001482:	46bd      	mov	sp, r7
 8001484:	b00a      	add	sp, #40	; 0x28
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000a0 	.word	0x200000a0
 800148c:	40006400 	.word	0x40006400

08001490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_I2C1_Init+0x74>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <MX_I2C1_Init+0x78>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_I2C1_Init+0x74>)
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <MX_I2C1_Init+0x7c>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_I2C1_Init+0x74>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_I2C1_Init+0x74>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_I2C1_Init+0x74>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_I2C1_Init+0x74>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_I2C1_Init+0x74>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_I2C1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_I2C1_Init+0x74>)
 80014cc:	0018      	movs	r0, r3
 80014ce:	f001 fbe1 	bl	8002c94 <HAL_I2C_Init>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d001      	beq.n	80014da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014d6:	f000 f925 	bl	8001724 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_I2C1_Init+0x74>)
 80014dc:	2100      	movs	r1, #0
 80014de:	0018      	movs	r0, r3
 80014e0:	f002 f934 	bl	800374c <HAL_I2CEx_ConfigAnalogFilter>
 80014e4:	1e03      	subs	r3, r0, #0
 80014e6:	d001      	beq.n	80014ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e8:	f000 f91c 	bl	8001724 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <MX_I2C1_Init+0x74>)
 80014ee:	2100      	movs	r1, #0
 80014f0:	0018      	movs	r0, r3
 80014f2:	f002 f977 	bl	80037e4 <HAL_I2CEx_ConfigDigitalFilter>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 f913 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000004c 	.word	0x2000004c
 8001508:	40005400 	.word	0x40005400
 800150c:	2000090e 	.word	0x2000090e

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	240c      	movs	r4, #12
 8001518:	193b      	adds	r3, r7, r4
 800151a:	0018      	movs	r0, r3
 800151c:	2314      	movs	r3, #20
 800151e:	001a      	movs	r2, r3
 8001520:	2100      	movs	r1, #0
 8001522:	f002 ff7b 	bl	800441c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <MX_GPIO_Init+0xa8>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <MX_GPIO_Init+0xa8>)
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	03c9      	lsls	r1, r1, #15
 8001530:	430a      	orrs	r2, r1
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <MX_GPIO_Init+0xa8>)
 8001536:	695a      	ldr	r2, [r3, #20]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	03db      	lsls	r3, r3, #15
 800153c:	4013      	ands	r3, r2
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <MX_GPIO_Init+0xa8>)
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <MX_GPIO_Init+0xa8>)
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	0289      	lsls	r1, r1, #10
 800154c:	430a      	orrs	r2, r1
 800154e:	615a      	str	r2, [r3, #20]
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <MX_GPIO_Init+0xa8>)
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	029b      	lsls	r3, r3, #10
 8001558:	4013      	ands	r3, r2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <MX_GPIO_Init+0xa8>)
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_GPIO_Init+0xa8>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	02c9      	lsls	r1, r1, #11
 8001568:	430a      	orrs	r2, r1
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_GPIO_Init+0xa8>)
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	02db      	lsls	r3, r3, #11
 8001574:	4013      	ands	r3, r2
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800157a:	2390      	movs	r3, #144	; 0x90
 800157c:	05db      	lsls	r3, r3, #23
 800157e:	2200      	movs	r2, #0
 8001580:	2120      	movs	r1, #32
 8001582:	0018      	movs	r0, r3
 8001584:	f001 fb68 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001588:	0021      	movs	r1, r4
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2220      	movs	r2, #32
 800158e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2201      	movs	r2, #1
 8001594:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a2:	187a      	adds	r2, r7, r1
 80015a4:	2390      	movs	r3, #144	; 0x90
 80015a6:	05db      	lsls	r3, r3, #23
 80015a8:	0011      	movs	r1, r2
 80015aa:	0018      	movs	r0, r3
 80015ac:	f001 f9dc 	bl	8002968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b009      	add	sp, #36	; 0x24
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	40021000 	.word	0x40021000

080015bc <CAN_send_packet>:

static void CAN_send_packet(	CAN_HandleTypeDef* hcan,
								CAN_TxHeaderTypeDef* TxHeader,
								uint8_t* TxData,
								uint8_t data_len	)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	001a      	movs	r2, r3
 80015ca:	1cfb      	adds	r3, r7, #3
 80015cc:	701a      	strb	r2, [r3, #0]
	uint32_t TxMailbox;

	HAL_StatusTypeDef CAN_status;

	TxHeader->DLC = data_len;
 80015ce:	1cfb      	adds	r3, r7, #3
 80015d0:	781a      	ldrb	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	611a      	str	r2, [r3, #16]

	CAN_status = HAL_CAN_AddTxMessage(hcan, TxHeader, TxData, &TxMailbox);
 80015d6:	2317      	movs	r3, #23
 80015d8:	18fc      	adds	r4, r7, r3
 80015da:	2310      	movs	r3, #16
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fc7e 	bl	8001ee4 <HAL_CAN_AddTxMessage>
 80015e8:	0003      	movs	r3, r0
 80015ea:	7023      	strb	r3, [r4, #0]

	// IMPORTANT - must wait for CAN bytes to be sent before sending next section of bytes
	while(HAL_CAN_IsTxMessagePending(hcan, TxMailbox));
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	0011      	movs	r1, r2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 fd47 	bl	8002088 <HAL_CAN_IsTxMessagePending>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d1f7      	bne.n	80015ee <CAN_send_packet+0x32>

	if (CAN_status != HAL_OK)
 80015fe:	2317      	movs	r3, #23
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <CAN_send_packet+0x58>
	{
	HAL_CAN_GetError(hcan);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	0018      	movs	r0, r3
 800160c:	f001 f8c4 	bl	8002798 <HAL_CAN_GetError>
	Error_Handler();
 8001610:	f000 f888 	bl	8001724 <Error_Handler>
	}
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	b007      	add	sp, #28
 800161a:	bd90      	pop	{r4, r7, pc}

0800161c <CAN_send_start>:

static void CAN_send_start(CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* TxHeader)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
	uint8_t TxData = 0xff;
 8001626:	210f      	movs	r1, #15
 8001628:	187b      	adds	r3, r7, r1
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	701a      	strb	r2, [r3, #0]
	CAN_send_packet(hcan, TxHeader, &TxData, START_MESSAGE_LEN);
 800162e:	187a      	adds	r2, r7, r1
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	2301      	movs	r3, #1
 8001636:	f7ff ffc1 	bl	80015bc <CAN_send_packet>
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b004      	add	sp, #16
 8001640:	bd80      	pop	{r7, pc}

08001642 <CAN_send_stop>:

static void CAN_send_stop(CAN_HandleTypeDef* hcan, CAN_TxHeaderTypeDef* TxHeader)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
	uint8_t TxData = 0xaa;
 800164c:	210f      	movs	r1, #15
 800164e:	187b      	adds	r3, r7, r1
 8001650:	22aa      	movs	r2, #170	; 0xaa
 8001652:	701a      	strb	r2, [r3, #0]
	CAN_send_packet(hcan, TxHeader, &TxData, STOP_MESSAGE_LEN);
 8001654:	187a      	adds	r2, r7, r1
 8001656:	6839      	ldr	r1, [r7, #0]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	2301      	movs	r3, #1
 800165c:	f7ff ffae 	bl	80015bc <CAN_send_packet>
}
 8001660:	46c0      	nop			; (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b004      	add	sp, #16
 8001666:	bd80      	pop	{r7, pc}

08001668 <CAN_send_buffer>:

static void CAN_send_buffer(	CAN_HandleTypeDef* hcan,
								CAN_TxHeaderTypeDef* TxHeader,
								uint8_t* buffer,
								uint8_t buffer_len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	001a      	movs	r2, r3
 8001676:	1cfb      	adds	r3, r7, #3
 8001678:	701a      	strb	r2, [r3, #0]
	// iterate through bytes of data and send over CAN
	CAN_send_start(hcan, TxHeader);
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	0011      	movs	r1, r2
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff ffcb 	bl	800161c <CAN_send_start>
	//############################################################################################################
	TxHeader->DLC = 8;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2208      	movs	r2, #8
 800168a:	611a      	str	r2, [r3, #16]
	for(int mem_offset = 0; mem_offset < buffer_len; mem_offset += CAN_PACKET_LEN)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <CAN_send_buffer+0x40>
	{
	  CAN_send_packet(hcan, TxHeader, buffer+mem_offset, CAN_PACKET_LEN);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	18d2      	adds	r2, r2, r3
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	2308      	movs	r3, #8
 800169e:	f7ff ff8d 	bl	80015bc <CAN_send_packet>
	for(int mem_offset = 0; mem_offset < buffer_len; mem_offset += CAN_PACKET_LEN)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3308      	adds	r3, #8
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	1cfb      	adds	r3, r7, #3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbef      	blt.n	8001692 <CAN_send_buffer+0x2a>
	}

	CAN_send_stop(hcan, TxHeader);
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff ffc2 	bl	8001642 <CAN_send_stop>
}
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b006      	add	sp, #24
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
//-------------------------------------------------------------------------------------------------------------------------



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80016d2:	4a0e      	ldr	r2, [pc, #56]	; (800170c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	2100      	movs	r1, #0
 80016d8:	f000 fcfd 	bl	80020d6 <HAL_CAN_GetRxMessage>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d10e      	bne.n	80016fe <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
  {
	  if( rx_header.StdId == SERVER_CAN_ID) // check for messages from central server
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10a      	bne.n	80016fe <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
	  {
		  if( rx_data[0] == SENSOR_NODE_CAN_ID )
 80016e8:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b30      	cmp	r3, #48	; 0x30
 80016ee:	d103      	bne.n	80016f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
		  {
			  sensor_node_state = SENSOR_NODE_TRANSMIT_STATE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
			  sensor_node_state = SENSOR_NODE_RECEIVE_STATE;
		  }

	  }
  }
}
 80016f6:	e002      	b.n	80016fe <HAL_CAN_RxFifo0MsgPendingCallback+0x36>
			  sensor_node_state = SENSOR_NODE_RECEIVE_STATE;
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	200000e4 	.word	0x200000e4
 800170c:	200000c8 	.word	0x200000c8
 8001710:	200000ec 	.word	0x200000ec

08001714 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  //HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>
	...

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x44>)
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_MspInit+0x44>)
 800173c:	2101      	movs	r1, #1
 800173e:	430a      	orrs	r2, r1
 8001740:	619a      	str	r2, [r3, #24]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x44>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x44>)
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <HAL_MspInit+0x44>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0549      	lsls	r1, r1, #21
 8001758:	430a      	orrs	r2, r1
 800175a:	61da      	str	r2, [r3, #28]
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_MspInit+0x44>)
 800175e:	69da      	ldr	r2, [r3, #28]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	4013      	ands	r3, r2
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	2414      	movs	r4, #20
 8001782:	193b      	adds	r3, r7, r4
 8001784:	0018      	movs	r0, r3
 8001786:	2314      	movs	r3, #20
 8001788:	001a      	movs	r2, r3
 800178a:	2100      	movs	r1, #0
 800178c:	f002 fe46 	bl	800441c <memset>
  if(hcan->Instance==CAN)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_CAN_MspInit+0xa0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d13a      	bne.n	8001810 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800179a:	4b20      	ldr	r3, [pc, #128]	; (800181c <HAL_CAN_MspInit+0xa4>)
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <HAL_CAN_MspInit+0xa4>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	0489      	lsls	r1, r1, #18
 80017a4:	430a      	orrs	r2, r1
 80017a6:	61da      	str	r2, [r3, #28]
 80017a8:	4b1c      	ldr	r3, [pc, #112]	; (800181c <HAL_CAN_MspInit+0xa4>)
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	049b      	lsls	r3, r3, #18
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_CAN_MspInit+0xa4>)
 80017b8:	695a      	ldr	r2, [r3, #20]
 80017ba:	4b18      	ldr	r3, [pc, #96]	; (800181c <HAL_CAN_MspInit+0xa4>)
 80017bc:	2180      	movs	r1, #128	; 0x80
 80017be:	02c9      	lsls	r1, r1, #11
 80017c0:	430a      	orrs	r2, r1
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <HAL_CAN_MspInit+0xa4>)
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	02db      	lsls	r3, r3, #11
 80017cc:	4013      	ands	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	22c0      	movs	r2, #192	; 0xc0
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	0021      	movs	r1, r4
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2202      	movs	r2, #2
 80017e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	2200      	movs	r2, #0
 80017e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	2203      	movs	r2, #3
 80017ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	2204      	movs	r2, #4
 80017f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_CAN_MspInit+0xa8>)
 80017f8:	0019      	movs	r1, r3
 80017fa:	0010      	movs	r0, r2
 80017fc:	f001 f8b4 	bl	8002968 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	201e      	movs	r0, #30
 8001806:	f001 f87d 	bl	8002904 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 800180a:	201e      	movs	r0, #30
 800180c:	f001 f88f 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b00b      	add	sp, #44	; 0x2c
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	40006400 	.word	0x40006400
 800181c:	40021000 	.word	0x40021000
 8001820:	48000400 	.word	0x48000400

08001824 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b08b      	sub	sp, #44	; 0x2c
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	2414      	movs	r4, #20
 800182e:	193b      	adds	r3, r7, r4
 8001830:	0018      	movs	r0, r3
 8001832:	2314      	movs	r3, #20
 8001834:	001a      	movs	r2, r3
 8001836:	2100      	movs	r1, #0
 8001838:	f002 fdf0 	bl	800441c <memset>
  if(hi2c->Instance==I2C1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <HAL_I2C_MspInit+0x90>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d131      	bne.n	80018aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 8001848:	695a      	ldr	r2, [r3, #20]
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 800184c:	2180      	movs	r1, #128	; 0x80
 800184e:	02c9      	lsls	r1, r1, #11
 8001850:	430a      	orrs	r2, r1
 8001852:	615a      	str	r2, [r3, #20]
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 8001856:	695a      	ldr	r2, [r3, #20]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	02db      	lsls	r3, r3, #11
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001862:	0021      	movs	r1, r4
 8001864:	187b      	adds	r3, r7, r1
 8001866:	22c0      	movs	r2, #192	; 0xc0
 8001868:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2212      	movs	r2, #18
 800186e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2203      	movs	r2, #3
 800187a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2201      	movs	r2, #1
 8001880:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	187b      	adds	r3, r7, r1
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_I2C_MspInit+0x98>)
 8001886:	0019      	movs	r1, r3
 8001888:	0010      	movs	r0, r2
 800188a:	f001 f86d 	bl	8002968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 8001890:	69da      	ldr	r2, [r3, #28]
 8001892:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	0389      	lsls	r1, r1, #14
 8001898:	430a      	orrs	r2, r1
 800189a:	61da      	str	r2, [r3, #28]
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <HAL_I2C_MspInit+0x94>)
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	039b      	lsls	r3, r3, #14
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b00b      	add	sp, #44	; 0x2c
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40005400 	.word	0x40005400
 80018b8:	40021000 	.word	0x40021000
 80018bc:	48000400 	.word	0x48000400

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e4:	f000 f888 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <CEC_CAN_IRQHandler+0x14>)
 80018f6:	0018      	movs	r0, r3
 80018f8:	f000 fd42 	bl	8002380 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	200000a0 	.word	0x200000a0

08001908 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001916:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001918:	f7ff fff6 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	; (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <LoopForever+0xe>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001942:	f002 fd73 	bl	800442c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001946:	f7ff fc11 	bl	800116c <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   r0, =_estack
 800194c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001958:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 800195c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001960:	200000f4 	.word	0x200000f4

08001964 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_COMP_IRQHandler>
	...

08001968 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_Init+0x24>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_Init+0x24>)
 8001972:	2110      	movs	r1, #16
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001978:	2000      	movs	r0, #0
 800197a:	f000 f809 	bl	8001990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197e:	f7ff fed7 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	40022000 	.word	0x40022000

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <HAL_InitTick+0x5c>)
 800199a:	681c      	ldr	r4, [r3, #0]
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_InitTick+0x60>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	0019      	movs	r1, r3
 80019a2:	23fa      	movs	r3, #250	; 0xfa
 80019a4:	0098      	lsls	r0, r3, #2
 80019a6:	f7fe fbaf 	bl	8000108 <__udivsi3>
 80019aa:	0003      	movs	r3, r0
 80019ac:	0019      	movs	r1, r3
 80019ae:	0020      	movs	r0, r4
 80019b0:	f7fe fbaa 	bl	8000108 <__udivsi3>
 80019b4:	0003      	movs	r3, r0
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 ffc9 	bl	800294e <HAL_SYSTICK_Config>
 80019bc:	1e03      	subs	r3, r0, #0
 80019be:	d001      	beq.n	80019c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e00f      	b.n	80019e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d80b      	bhi.n	80019e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	2301      	movs	r3, #1
 80019ce:	425b      	negs	r3, r3
 80019d0:	2200      	movs	r2, #0
 80019d2:	0018      	movs	r0, r3
 80019d4:	f000 ff96 	bl	8002904 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_InitTick+0x64>)
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	e000      	b.n	80019e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
}
 80019e4:	0018      	movs	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b003      	add	sp, #12
 80019ea:	bd90      	pop	{r4, r7, pc}
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000010 	.word	0x20000010
 80019f4:	2000000c 	.word	0x2000000c

080019f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <HAL_IncTick+0x1c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	001a      	movs	r2, r3
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_IncTick+0x20>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	18d2      	adds	r2, r2, r3
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_IncTick+0x20>)
 8001a0a:	601a      	str	r2, [r3, #0]
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	20000010 	.word	0x20000010
 8001a18:	200000f0 	.word	0x200000f0

08001a1c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <HAL_GetTick+0x10>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	200000f0 	.word	0x200000f0

08001a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a38:	f7ff fff0 	bl	8001a1c <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3301      	adds	r3, #1
 8001a48:	d005      	beq.n	8001a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <HAL_Delay+0x44>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	001a      	movs	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	189b      	adds	r3, r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	f7ff ffe0 	bl	8001a1c <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d8f7      	bhi.n	8001a58 <HAL_Delay+0x28>
  {
  }
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	20000010 	.word	0x20000010

08001a78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0f0      	b.n	8001c6c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	5c9b      	ldrb	r3, [r3, r2]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff fe6d 	bl	8001778 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aae:	f7ff ffb5 	bl	8001a1c <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ab6:	e013      	b.n	8001ae0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ab8:	f7ff ffb0 	bl	8001a1c <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b0a      	cmp	r3, #10
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	0292      	lsls	r2, r2, #10
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	2105      	movs	r1, #5
 8001ada:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0c5      	b.n	8001c6c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0e5      	beq.n	8001ab8 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2102      	movs	r1, #2
 8001af8:	438a      	bics	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff ff8e 	bl	8001a1c <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b04:	e013      	b.n	8001b2e <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b06:	f7ff ff89 	bl	8001a1c <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b0a      	cmp	r3, #10
 8001b12:	d90c      	bls.n	8001b2e <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	0292      	lsls	r2, r2, #10
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2220      	movs	r2, #32
 8001b26:	2105      	movs	r1, #5
 8001b28:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e09e      	b.n	8001c6c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d1e5      	bne.n	8001b06 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7e1b      	ldrb	r3, [r3, #24]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d108      	bne.n	8001b54 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e007      	b.n	8001b64 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2180      	movs	r1, #128	; 0x80
 8001b60:	438a      	bics	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e5b      	ldrb	r3, [r3, #25]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d108      	bne.n	8001b7e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2140      	movs	r1, #64	; 0x40
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	e007      	b.n	8001b8e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2140      	movs	r1, #64	; 0x40
 8001b8a:	438a      	bics	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7e9b      	ldrb	r3, [r3, #26]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	e007      	b.n	8001bb8 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7edb      	ldrb	r3, [r3, #27]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d108      	bne.n	8001bd2 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2110      	movs	r1, #16
 8001bcc:	438a      	bics	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	e007      	b.n	8001be2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2110      	movs	r1, #16
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7f1b      	ldrb	r3, [r3, #28]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d108      	bne.n	8001bfc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	e007      	b.n	8001c0c <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2108      	movs	r1, #8
 8001c08:	438a      	bics	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7f5b      	ldrb	r3, [r3, #29]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d108      	bne.n	8001c26 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2104      	movs	r1, #4
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e007      	b.n	8001c36 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2104      	movs	r1, #4
 8001c32:	438a      	bics	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	1e5a      	subs	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2220      	movs	r2, #32
 8001c66:	2101      	movs	r1, #1
 8001c68:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c84:	2013      	movs	r0, #19
 8001c86:	183b      	adds	r3, r7, r0
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	2120      	movs	r1, #32
 8001c8c:	5c52      	ldrb	r2, [r2, r1]
 8001c8e:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c90:	0002      	movs	r2, r0
 8001c92:	18bb      	adds	r3, r7, r2
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d004      	beq.n	8001ca4 <HAL_CAN_ConfigFilter+0x30>
 8001c9a:	18bb      	adds	r3, r7, r2
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d000      	beq.n	8001ca4 <HAL_CAN_ConfigFilter+0x30>
 8001ca2:	e0cd      	b.n	8001e40 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	58d3      	ldr	r3, [r2, r3]
 8001cac:	2201      	movs	r2, #1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	0013      	movs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	2387      	movs	r3, #135	; 0x87
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	58d3      	ldr	r3, [r2, r3]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	43d2      	mvns	r2, r2
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	0011      	movs	r1, r2
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	2387      	movs	r3, #135	; 0x87
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d129      	bne.n	8001d3e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	2383      	movs	r3, #131	; 0x83
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	58d3      	ldr	r3, [r2, r3]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	43d2      	mvns	r2, r2
 8001cf6:	401a      	ands	r2, r3
 8001cf8:	0011      	movs	r1, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	2383      	movs	r3, #131	; 0x83
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d14:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3248      	adds	r2, #72	; 0x48
 8001d1a:	00d2      	lsls	r2, r2, #3
 8001d1c:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	041b      	lsls	r3, r3, #16
 8001d2a:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d30:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d32:	6979      	ldr	r1, [r7, #20]
 8001d34:	3348      	adds	r3, #72	; 0x48
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	18cb      	adds	r3, r1, r3
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d128      	bne.n	8001d98 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	2383      	movs	r3, #131	; 0x83
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	58d2      	ldr	r2, [r2, r3]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	0011      	movs	r1, r2
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	2383      	movs	r3, #131	; 0x83
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d6e:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3248      	adds	r2, #72	; 0x48
 8001d74:	00d2      	lsls	r2, r2, #3
 8001d76:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d8c:	6979      	ldr	r1, [r7, #20]
 8001d8e:	3348      	adds	r3, #72	; 0x48
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	18cb      	adds	r3, r1, r3
 8001d94:	3304      	adds	r3, #4
 8001d96:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10c      	bne.n	8001dba <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	2381      	movs	r3, #129	; 0x81
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	58d3      	ldr	r3, [r2, r3]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	43d2      	mvns	r2, r2
 8001dac:	401a      	ands	r2, r3
 8001dae:	0011      	movs	r1, r2
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	2381      	movs	r3, #129	; 0x81
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	50d1      	str	r1, [r2, r3]
 8001db8:	e00a      	b.n	8001dd0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	2381      	movs	r3, #129	; 0x81
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	58d2      	ldr	r2, [r2, r3]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	0011      	movs	r1, r2
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	2381      	movs	r3, #129	; 0x81
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10c      	bne.n	8001df2 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	2385      	movs	r3, #133	; 0x85
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	58d3      	ldr	r3, [r2, r3]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	43d2      	mvns	r2, r2
 8001de4:	401a      	ands	r2, r3
 8001de6:	0011      	movs	r1, r2
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	2385      	movs	r3, #133	; 0x85
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	50d1      	str	r1, [r2, r3]
 8001df0:	e00a      	b.n	8001e08 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	2385      	movs	r3, #133	; 0x85
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	58d2      	ldr	r2, [r2, r3]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	0011      	movs	r1, r2
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	2385      	movs	r3, #133	; 0x85
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10a      	bne.n	8001e26 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	2387      	movs	r3, #135	; 0x87
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	58d2      	ldr	r2, [r2, r3]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	2387      	movs	r3, #135	; 0x87
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	58d3      	ldr	r3, [r2, r3]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4393      	bics	r3, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e007      	b.n	8001e50 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	02d2      	lsls	r2, r2, #11
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
  }
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b006      	add	sp, #24
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	5c9b      	ldrb	r3, [r3, r2]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d12f      	bne.n	8001ecc <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	2102      	movs	r1, #2
 8001e72:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2101      	movs	r1, #1
 8001e80:	438a      	bics	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e84:	f7ff fdca 	bl	8001a1c <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e8c:	e013      	b.n	8001eb6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e8e:	f7ff fdc5 	bl	8001a1c <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b0a      	cmp	r3, #10
 8001e9a:	d90c      	bls.n	8001eb6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	2280      	movs	r2, #128	; 0x80
 8001ea2:	0292      	lsls	r2, r2, #10
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	2105      	movs	r1, #5
 8001eb0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e012      	b.n	8001edc <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1e5      	bne.n	8001e8e <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e007      	b.n	8001edc <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	0312      	lsls	r2, r2, #12
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
  }
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ef2:	201f      	movs	r0, #31
 8001ef4:	183b      	adds	r3, r7, r0
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	2120      	movs	r1, #32
 8001efa:	5c52      	ldrb	r2, [r2, r1]
 8001efc:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f06:	183b      	adds	r3, r7, r0
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d004      	beq.n	8001f18 <HAL_CAN_AddTxMessage+0x34>
 8001f0e:	183b      	adds	r3, r7, r0
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d000      	beq.n	8001f18 <HAL_CAN_AddTxMessage+0x34>
 8001f16:	e0ab      	b.n	8002070 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	04db      	lsls	r3, r3, #19
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d10a      	bne.n	8001f38 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	051b      	lsls	r3, r3, #20
 8001f28:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f2a:	d105      	bne.n	8001f38 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	055b      	lsls	r3, r3, #21
 8001f32:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f34:	d100      	bne.n	8001f38 <HAL_CAN_AddTxMessage+0x54>
 8001f36:	e092      	b.n	800205e <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	0e1b      	lsrs	r3, r3, #24
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	4013      	ands	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f42:	2201      	movs	r2, #1
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	409a      	lsls	r2, r3
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10c      	bne.n	8001f6e <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4311      	orrs	r1, r2
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	3218      	adds	r2, #24
 8001f68:	0112      	lsls	r2, r2, #4
 8001f6a:	50d1      	str	r1, [r2, r3]
 8001f6c:	e00f      	b.n	8001f8e <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001f84:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	3218      	adds	r2, #24
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3318      	adds	r3, #24
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	18cb      	adds	r3, r1, r3
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	7d1b      	ldrb	r3, [r3, #20]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d112      	bne.n	8001fd0 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	18d3      	adds	r3, r2, r3
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6819      	ldr	r1, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3318      	adds	r3, #24
 8001fc8:	011b      	lsls	r3, r3, #4
 8001fca:	18cb      	adds	r3, r1, r3
 8001fcc:	3304      	adds	r3, #4
 8001fce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3307      	adds	r3, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	061a      	lsls	r2, r3, #24
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3306      	adds	r3, #6
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	041b      	lsls	r3, r3, #16
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3305      	adds	r3, #5
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	6979      	ldr	r1, [r7, #20]
 8001ffc:	23c6      	movs	r3, #198	; 0xc6
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	0109      	lsls	r1, r1, #4
 8002002:	1841      	adds	r1, r0, r1
 8002004:	18cb      	adds	r3, r1, r3
 8002006:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3303      	adds	r3, #3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	061a      	lsls	r2, r3, #24
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3302      	adds	r3, #2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3301      	adds	r3, #1
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	0019      	movs	r1, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	6979      	ldr	r1, [r7, #20]
 8002032:	23c4      	movs	r3, #196	; 0xc4
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	0109      	lsls	r1, r1, #4
 8002038:	1841      	adds	r1, r0, r1
 800203a:	18cb      	adds	r3, r1, r3
 800203c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	3218      	adds	r2, #24
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	58d2      	ldr	r2, [r2, r3]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2101      	movs	r1, #1
 8002050:	4311      	orrs	r1, r2
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	3218      	adds	r2, #24
 8002056:	0112      	lsls	r2, r2, #4
 8002058:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e010      	b.n	8002080 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	0392      	lsls	r2, r2, #14
 8002066:	431a      	orrs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e007      	b.n	8002080 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	02d2      	lsls	r2, r2, #11
 8002078:	431a      	orrs	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
  }
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b008      	add	sp, #32
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002096:	200b      	movs	r0, #11
 8002098:	183b      	adds	r3, r7, r0
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	2120      	movs	r1, #32
 800209e:	5c52      	ldrb	r2, [r2, r1]
 80020a0:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80020a2:	0002      	movs	r2, r0
 80020a4:	18bb      	adds	r3, r7, r2
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d003      	beq.n	80020b4 <HAL_CAN_IsTxMessagePending+0x2c>
 80020ac:	18bb      	adds	r3, r7, r2
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d10b      	bne.n	80020cc <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	0692      	lsls	r2, r2, #26
 80020be:	401a      	ands	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	069b      	lsls	r3, r3, #26
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 80020c8:	2301      	movs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80020cc:	68fb      	ldr	r3, [r7, #12]
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020e4:	2017      	movs	r0, #23
 80020e6:	183b      	adds	r3, r7, r0
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	2120      	movs	r1, #32
 80020ec:	5c52      	ldrb	r2, [r2, r1]
 80020ee:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020f0:	0002      	movs	r2, r0
 80020f2:	18bb      	adds	r3, r7, r2
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d004      	beq.n	8002104 <HAL_CAN_GetRxMessage+0x2e>
 80020fa:	18bb      	adds	r3, r7, r2
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d000      	beq.n	8002104 <HAL_CAN_GetRxMessage+0x2e>
 8002102:	e107      	b.n	8002314 <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10e      	bne.n	8002128 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2203      	movs	r2, #3
 8002112:	4013      	ands	r3, r2
 8002114:	d117      	bne.n	8002146 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	2280      	movs	r2, #128	; 0x80
 800211c:	0392      	lsls	r2, r2, #14
 800211e:	431a      	orrs	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0fd      	b.n	8002324 <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2203      	movs	r2, #3
 8002130:	4013      	ands	r3, r2
 8002132:	d108      	bne.n	8002146 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	0392      	lsls	r2, r2, #14
 800213c:	431a      	orrs	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0ee      	b.n	8002324 <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	321b      	adds	r2, #27
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	58d3      	ldr	r3, [r2, r3]
 8002152:	2204      	movs	r2, #4
 8002154:	401a      	ands	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10b      	bne.n	800217a <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	321b      	adds	r2, #27
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	58d3      	ldr	r3, [r2, r3]
 800216e:	0d5b      	lsrs	r3, r3, #21
 8002170:	055b      	lsls	r3, r3, #21
 8002172:	0d5a      	lsrs	r2, r3, #21
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e00a      	b.n	8002190 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	321b      	adds	r2, #27
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	58d3      	ldr	r3, [r2, r3]
 8002186:	08db      	lsrs	r3, r3, #3
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68ba      	ldr	r2, [r7, #8]
 8002196:	321b      	adds	r2, #27
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	58d3      	ldr	r3, [r2, r3]
 800219c:	2202      	movs	r2, #2
 800219e:	401a      	ands	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	331b      	adds	r3, #27
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	18d3      	adds	r3, r2, r3
 80021b0:	3304      	adds	r3, #4
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2208      	movs	r2, #8
 80021b6:	4013      	ands	r3, r2
 80021b8:	d003      	beq.n	80021c2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2208      	movs	r2, #8
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	e00b      	b.n	80021da <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	331b      	adds	r3, #27
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	18d3      	adds	r3, r2, r3
 80021ce:	3304      	adds	r3, #4
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	220f      	movs	r2, #15
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	331b      	adds	r3, #27
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	18d3      	adds	r3, r2, r3
 80021e6:	3304      	adds	r3, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	401a      	ands	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	331b      	adds	r3, #27
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	18d3      	adds	r3, r2, r3
 8002200:	3304      	adds	r3, #4
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	0c1a      	lsrs	r2, r3, #16
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6819      	ldr	r1, [r3, #0]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	23dc      	movs	r3, #220	; 0xdc
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	0112      	lsls	r2, r2, #4
 800221a:	188a      	adds	r2, r1, r2
 800221c:	18d3      	adds	r3, r2, r3
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	23dc      	movs	r3, #220	; 0xdc
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	0112      	lsls	r2, r2, #4
 8002232:	188a      	adds	r2, r1, r2
 8002234:	18d3      	adds	r3, r2, r3
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0a1a      	lsrs	r2, r3, #8
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	23dc      	movs	r3, #220	; 0xdc
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	0112      	lsls	r2, r2, #4
 800224e:	188a      	adds	r2, r1, r2
 8002250:	18d3      	adds	r3, r2, r3
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0c1a      	lsrs	r2, r3, #16
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	3302      	adds	r3, #2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	23dc      	movs	r3, #220	; 0xdc
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	0112      	lsls	r2, r2, #4
 800226a:	188a      	adds	r2, r1, r2
 800226c:	18d3      	adds	r3, r2, r3
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e1a      	lsrs	r2, r3, #24
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	3303      	adds	r3, #3
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	23de      	movs	r3, #222	; 0xde
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	188a      	adds	r2, r1, r2
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	3304      	adds	r3, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	23de      	movs	r3, #222	; 0xde
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	0112      	lsls	r2, r2, #4
 80022a0:	188a      	adds	r2, r1, r2
 80022a2:	18d3      	adds	r3, r2, r3
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	0a1a      	lsrs	r2, r3, #8
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	3305      	adds	r3, #5
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	23de      	movs	r3, #222	; 0xde
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	188a      	adds	r2, r1, r2
 80022be:	18d3      	adds	r3, r2, r3
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0c1a      	lsrs	r2, r3, #16
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3306      	adds	r3, #6
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6819      	ldr	r1, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	23de      	movs	r3, #222	; 0xde
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	0112      	lsls	r2, r2, #4
 80022d8:	188a      	adds	r2, r1, r2
 80022da:	18d3      	adds	r3, r2, r3
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	0e1a      	lsrs	r2, r3, #24
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	3307      	adds	r3, #7
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2120      	movs	r1, #32
 80022fa:	430a      	orrs	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	e007      	b.n	8002310 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2120      	movs	r1, #32
 800230c:	430a      	orrs	r2, r1
 800230e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	e007      	b.n	8002324 <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	02d2      	lsls	r2, r2, #11
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
  }
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b006      	add	sp, #24
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002336:	200f      	movs	r0, #15
 8002338:	183b      	adds	r3, r7, r0
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	2120      	movs	r1, #32
 800233e:	5c52      	ldrb	r2, [r2, r1]
 8002340:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002342:	0002      	movs	r2, r0
 8002344:	18bb      	adds	r3, r7, r2
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d003      	beq.n	8002354 <HAL_CAN_ActivateNotification+0x28>
 800234c:	18bb      	adds	r3, r7, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d109      	bne.n	8002368 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6959      	ldr	r1, [r3, #20]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e007      	b.n	8002378 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	2280      	movs	r2, #128	; 0x80
 800236e:	02d2      	lsls	r2, r2, #11
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
  }
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	; 0x28
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	2201      	movs	r2, #1
 80023c0:	4013      	ands	r3, r2
 80023c2:	d100      	bne.n	80023c6 <HAL_CAN_IRQHandler+0x46>
 80023c4:	e084      	b.n	80024d0 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4013      	ands	r3, r2
 80023cc:	d024      	beq.n	8002418 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	2202      	movs	r2, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 f981 	bl	80026e8 <HAL_CAN_TxMailbox0CompleteCallback>
 80023e6:	e017      	b.n	8002418 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	2204      	movs	r2, #4
 80023ec:	4013      	ands	r3, r2
 80023ee:	d005      	beq.n	80023fc <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	2280      	movs	r2, #128	; 0x80
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	4313      	orrs	r3, r2
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	e00d      	b.n	8002418 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	2208      	movs	r2, #8
 8002400:	4013      	ands	r3, r2
 8002402:	d005      	beq.n	8002410 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	0152      	lsls	r2, r2, #5
 800240a:	4313      	orrs	r3, r2
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	e003      	b.n	8002418 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 f980 	bl	8002718 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d028      	beq.n	8002474 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	0052      	lsls	r2, r2, #1
 800242a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f95d 	bl	80026f8 <HAL_CAN_TxMailbox1CompleteCallback>
 800243e:	e019      	b.n	8002474 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4013      	ands	r3, r2
 8002448:	d005      	beq.n	8002456 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	0192      	lsls	r2, r2, #6
 8002450:	4313      	orrs	r3, r2
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
 8002454:	e00e      	b.n	8002474 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	4013      	ands	r3, r2
 800245e:	d005      	beq.n	800246c <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	2280      	movs	r2, #128	; 0x80
 8002464:	01d2      	lsls	r2, r2, #7
 8002466:	4313      	orrs	r3, r2
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e003      	b.n	8002474 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f95a 	bl	8002728 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	025b      	lsls	r3, r3, #9
 800247a:	4013      	ands	r3, r2
 800247c:	d028      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	0252      	lsls	r2, r2, #9
 8002486:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	029b      	lsls	r3, r3, #10
 800248e:	4013      	ands	r3, r2
 8002490:	d004      	beq.n	800249c <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0018      	movs	r0, r3
 8002496:	f000 f937 	bl	8002708 <HAL_CAN_TxMailbox2CompleteCallback>
 800249a:	e019      	b.n	80024d0 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	02db      	lsls	r3, r3, #11
 80024a2:	4013      	ands	r3, r2
 80024a4:	d005      	beq.n	80024b2 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	2280      	movs	r2, #128	; 0x80
 80024aa:	0212      	lsls	r2, r2, #8
 80024ac:	4313      	orrs	r3, r2
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	e00e      	b.n	80024d0 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	031b      	lsls	r3, r3, #12
 80024b8:	4013      	ands	r3, r2
 80024ba:	d005      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2280      	movs	r2, #128	; 0x80
 80024c0:	0252      	lsls	r2, r2, #9
 80024c2:	4313      	orrs	r3, r2
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
 80024c6:	e003      	b.n	80024d0 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	0018      	movs	r0, r3
 80024cc:	f000 f934 	bl	8002738 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	2208      	movs	r2, #8
 80024d4:	4013      	ands	r3, r2
 80024d6:	d00c      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2210      	movs	r2, #16
 80024dc:	4013      	ands	r3, r2
 80024de:	d008      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4313      	orrs	r3, r2
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2210      	movs	r2, #16
 80024f0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	2204      	movs	r2, #4
 80024f6:	4013      	ands	r3, r2
 80024f8:	d00b      	beq.n	8002512 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2208      	movs	r2, #8
 80024fe:	4013      	ands	r3, r2
 8002500:	d007      	beq.n	8002512 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2208      	movs	r2, #8
 8002508:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 f91b 	bl	8002748 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2203      	movs	r2, #3
 8002522:	4013      	ands	r3, r2
 8002524:	d003      	beq.n	800252e <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff f8cd 	bl	80016c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	4013      	ands	r3, r2
 8002534:	d00c      	beq.n	8002550 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2210      	movs	r2, #16
 800253a:	4013      	ands	r3, r2
 800253c:	d008      	beq.n	8002550 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	2280      	movs	r2, #128	; 0x80
 8002542:	00d2      	lsls	r2, r2, #3
 8002544:	4313      	orrs	r3, r2
 8002546:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2220      	movs	r2, #32
 8002554:	4013      	ands	r3, r2
 8002556:	d00b      	beq.n	8002570 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2208      	movs	r2, #8
 800255c:	4013      	ands	r3, r2
 800255e:	d007      	beq.n	8002570 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2208      	movs	r2, #8
 8002566:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f8fc 	bl	8002768 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	2210      	movs	r2, #16
 8002574:	4013      	ands	r3, r2
 8002576:	d009      	beq.n	800258c <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2203      	movs	r2, #3
 8002580:	4013      	ands	r3, r2
 8002582:	d003      	beq.n	800258c <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f8e6 	bl	8002758 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	029b      	lsls	r3, r3, #10
 8002592:	4013      	ands	r3, r2
 8002594:	d00b      	beq.n	80025ae <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	2210      	movs	r2, #16
 800259a:	4013      	ands	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2210      	movs	r2, #16
 80025a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 f8e5 	bl	8002778 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	025b      	lsls	r3, r3, #9
 80025b4:	4013      	ands	r3, r2
 80025b6:	d00b      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2208      	movs	r2, #8
 80025bc:	4013      	ands	r3, r2
 80025be:	d007      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2208      	movs	r2, #8
 80025c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 f8dc 	bl	8002788 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80025d0:	6a3a      	ldr	r2, [r7, #32]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	4013      	ands	r3, r2
 80025d8:	d100      	bne.n	80025dc <HAL_CAN_IRQHandler+0x25c>
 80025da:	e074      	b.n	80026c6 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2204      	movs	r2, #4
 80025e0:	4013      	ands	r3, r2
 80025e2:	d100      	bne.n	80025e6 <HAL_CAN_IRQHandler+0x266>
 80025e4:	e06b      	b.n	80026be <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025e6:	6a3a      	ldr	r2, [r7, #32]
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	d007      	beq.n	8002600 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80025f6:	d003      	beq.n	8002600 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	2201      	movs	r2, #1
 80025fc:	4313      	orrs	r3, r2
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002600:	6a3a      	ldr	r2, [r7, #32]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4013      	ands	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002610:	d003      	beq.n	800261a <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	2202      	movs	r2, #2
 8002616:	4313      	orrs	r3, r2
 8002618:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800261a:	6a3a      	ldr	r2, [r7, #32]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4013      	ands	r3, r2
 8002622:	d007      	beq.n	8002634 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800262a:	d003      	beq.n	8002634 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	2204      	movs	r2, #4
 8002630:	4313      	orrs	r3, r2
 8002632:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002634:	6a3a      	ldr	r2, [r7, #32]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	4013      	ands	r3, r2
 800263c:	d03f      	beq.n	80026be <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2270      	movs	r2, #112	; 0x70
 8002642:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002644:	d03b      	beq.n	80026be <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2270      	movs	r2, #112	; 0x70
 800264a:	4013      	ands	r3, r2
 800264c:	2b60      	cmp	r3, #96	; 0x60
 800264e:	d027      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x320>
 8002650:	d82c      	bhi.n	80026ac <HAL_CAN_IRQHandler+0x32c>
 8002652:	2b50      	cmp	r3, #80	; 0x50
 8002654:	d01f      	beq.n	8002696 <HAL_CAN_IRQHandler+0x316>
 8002656:	d829      	bhi.n	80026ac <HAL_CAN_IRQHandler+0x32c>
 8002658:	2b40      	cmp	r3, #64	; 0x40
 800265a:	d017      	beq.n	800268c <HAL_CAN_IRQHandler+0x30c>
 800265c:	d826      	bhi.n	80026ac <HAL_CAN_IRQHandler+0x32c>
 800265e:	2b30      	cmp	r3, #48	; 0x30
 8002660:	d00f      	beq.n	8002682 <HAL_CAN_IRQHandler+0x302>
 8002662:	d823      	bhi.n	80026ac <HAL_CAN_IRQHandler+0x32c>
 8002664:	2b10      	cmp	r3, #16
 8002666:	d002      	beq.n	800266e <HAL_CAN_IRQHandler+0x2ee>
 8002668:	2b20      	cmp	r3, #32
 800266a:	d005      	beq.n	8002678 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800266c:	e01e      	b.n	80026ac <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	2208      	movs	r2, #8
 8002672:	4313      	orrs	r3, r2
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002676:	e01a      	b.n	80026ae <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	2210      	movs	r2, #16
 800267c:	4313      	orrs	r3, r2
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002680:	e015      	b.n	80026ae <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	2220      	movs	r2, #32
 8002686:	4313      	orrs	r3, r2
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800268a:	e010      	b.n	80026ae <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	4313      	orrs	r3, r2
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002694:	e00b      	b.n	80026ae <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	4313      	orrs	r3, r2
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800269e:	e006      	b.n	80026ae <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	0052      	lsls	r2, r2, #1
 80026a6:	4313      	orrs	r3, r2
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80026aa:	e000      	b.n	80026ae <HAL_CAN_IRQHandler+0x32e>
            break;
 80026ac:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699a      	ldr	r2, [r3, #24]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2170      	movs	r1, #112	; 0x70
 80026ba:	438a      	bics	r2, r1
 80026bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2204      	movs	r2, #4
 80026c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0018      	movs	r0, r3
 80026dc:	f7ff f81a 	bl	8001714 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	b00a      	add	sp, #40	; 0x28
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b002      	add	sp, #8
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b002      	add	sp, #8
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b002      	add	sp, #8
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80027a4:	0018      	movs	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	0002      	movs	r2, r0
 80027b4:	1dfb      	adds	r3, r7, #7
 80027b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b7f      	cmp	r3, #127	; 0x7f
 80027be:	d809      	bhi.n	80027d4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c0:	1dfb      	adds	r3, r7, #7
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	001a      	movs	r2, r3
 80027c6:	231f      	movs	r3, #31
 80027c8:	401a      	ands	r2, r3
 80027ca:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_EnableIRQ+0x30>)
 80027cc:	2101      	movs	r1, #1
 80027ce:	4091      	lsls	r1, r2
 80027d0:	000a      	movs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
  }
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b002      	add	sp, #8
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	0002      	movs	r2, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027ee:	1dfb      	adds	r3, r7, #7
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b7f      	cmp	r3, #127	; 0x7f
 80027f4:	d828      	bhi.n	8002848 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027f6:	4a2f      	ldr	r2, [pc, #188]	; (80028b4 <__NVIC_SetPriority+0xd4>)
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	089b      	lsrs	r3, r3, #2
 8002800:	33c0      	adds	r3, #192	; 0xc0
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	589b      	ldr	r3, [r3, r2]
 8002806:	1dfa      	adds	r2, r7, #7
 8002808:	7812      	ldrb	r2, [r2, #0]
 800280a:	0011      	movs	r1, r2
 800280c:	2203      	movs	r2, #3
 800280e:	400a      	ands	r2, r1
 8002810:	00d2      	lsls	r2, r2, #3
 8002812:	21ff      	movs	r1, #255	; 0xff
 8002814:	4091      	lsls	r1, r2
 8002816:	000a      	movs	r2, r1
 8002818:	43d2      	mvns	r2, r2
 800281a:	401a      	ands	r2, r3
 800281c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	401a      	ands	r2, r3
 8002826:	1dfb      	adds	r3, r7, #7
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	0018      	movs	r0, r3
 800282c:	2303      	movs	r3, #3
 800282e:	4003      	ands	r3, r0
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002834:	481f      	ldr	r0, [pc, #124]	; (80028b4 <__NVIC_SetPriority+0xd4>)
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	b25b      	sxtb	r3, r3
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	430a      	orrs	r2, r1
 8002840:	33c0      	adds	r3, #192	; 0xc0
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002846:	e031      	b.n	80028ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002848:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <__NVIC_SetPriority+0xd8>)
 800284a:	1dfb      	adds	r3, r7, #7
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	0019      	movs	r1, r3
 8002850:	230f      	movs	r3, #15
 8002852:	400b      	ands	r3, r1
 8002854:	3b08      	subs	r3, #8
 8002856:	089b      	lsrs	r3, r3, #2
 8002858:	3306      	adds	r3, #6
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	18d3      	adds	r3, r2, r3
 800285e:	3304      	adds	r3, #4
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	1dfa      	adds	r2, r7, #7
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	0011      	movs	r1, r2
 8002868:	2203      	movs	r2, #3
 800286a:	400a      	ands	r2, r1
 800286c:	00d2      	lsls	r2, r2, #3
 800286e:	21ff      	movs	r1, #255	; 0xff
 8002870:	4091      	lsls	r1, r2
 8002872:	000a      	movs	r2, r1
 8002874:	43d2      	mvns	r2, r2
 8002876:	401a      	ands	r2, r3
 8002878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	22ff      	movs	r2, #255	; 0xff
 8002880:	401a      	ands	r2, r3
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	0018      	movs	r0, r3
 8002888:	2303      	movs	r3, #3
 800288a:	4003      	ands	r3, r0
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002890:	4809      	ldr	r0, [pc, #36]	; (80028b8 <__NVIC_SetPriority+0xd8>)
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	001c      	movs	r4, r3
 8002898:	230f      	movs	r3, #15
 800289a:	4023      	ands	r3, r4
 800289c:	3b08      	subs	r3, #8
 800289e:	089b      	lsrs	r3, r3, #2
 80028a0:	430a      	orrs	r2, r1
 80028a2:	3306      	adds	r3, #6
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	18c3      	adds	r3, r0, r3
 80028a8:	3304      	adds	r3, #4
 80028aa:	601a      	str	r2, [r3, #0]
}
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b003      	add	sp, #12
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1e5a      	subs	r2, r3, #1
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	045b      	lsls	r3, r3, #17
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d301      	bcc.n	80028d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d0:	2301      	movs	r3, #1
 80028d2:	e010      	b.n	80028f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <SysTick_Config+0x44>)
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	3a01      	subs	r2, #1
 80028da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028dc:	2301      	movs	r3, #1
 80028de:	425b      	negs	r3, r3
 80028e0:	2103      	movs	r1, #3
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7ff ff7c 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <SysTick_Config+0x44>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SysTick_Config+0x44>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b002      	add	sp, #8
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	210f      	movs	r1, #15
 8002910:	187b      	adds	r3, r7, r1
 8002912:	1c02      	adds	r2, r0, #0
 8002914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	187b      	adds	r3, r7, r1
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	b25b      	sxtb	r3, r3
 800291e:	0011      	movs	r1, r2
 8002920:	0018      	movs	r0, r3
 8002922:	f7ff ff5d 	bl	80027e0 <__NVIC_SetPriority>
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b004      	add	sp, #16
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	0002      	movs	r2, r0
 8002936:	1dfb      	adds	r3, r7, #7
 8002938:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293a:	1dfb      	adds	r3, r7, #7
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	b25b      	sxtb	r3, r3
 8002940:	0018      	movs	r0, r3
 8002942:	f7ff ff33 	bl	80027ac <__NVIC_EnableIRQ>
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b002      	add	sp, #8
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	0018      	movs	r0, r3
 800295a:	f7ff ffaf 	bl	80028bc <SysTick_Config>
 800295e:	0003      	movs	r3, r0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b002      	add	sp, #8
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002976:	e155      	b.n	8002c24 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4091      	lsls	r1, r2
 8002982:	000a      	movs	r2, r1
 8002984:	4013      	ands	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d100      	bne.n	8002990 <HAL_GPIO_Init+0x28>
 800298e:	e146      	b.n	8002c1e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2203      	movs	r2, #3
 8002996:	4013      	ands	r3, r2
 8002998:	2b01      	cmp	r3, #1
 800299a:	d005      	beq.n	80029a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2203      	movs	r2, #3
 80029a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d130      	bne.n	8002a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	409a      	lsls	r2, r3
 80029b6:	0013      	movs	r3, r2
 80029b8:	43da      	mvns	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	409a      	lsls	r2, r3
 80029ca:	0013      	movs	r3, r2
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029de:	2201      	movs	r2, #1
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
 80029e4:	0013      	movs	r3, r2
 80029e6:	43da      	mvns	r2, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	2201      	movs	r2, #1
 80029f6:	401a      	ands	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	409a      	lsls	r2, r3
 80029fc:	0013      	movs	r3, r2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2203      	movs	r2, #3
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d017      	beq.n	8002a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	409a      	lsls	r2, r3
 8002a24:	0013      	movs	r3, r2
 8002a26:	43da      	mvns	r2, r3
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	409a      	lsls	r2, r3
 8002a38:	0013      	movs	r3, r2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d123      	bne.n	8002a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	08da      	lsrs	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3208      	adds	r2, #8
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	58d3      	ldr	r3, [r2, r3]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2207      	movs	r2, #7
 8002a64:	4013      	ands	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	0013      	movs	r3, r2
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	2107      	movs	r1, #7
 8002a7e:	400b      	ands	r3, r1
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	409a      	lsls	r2, r3
 8002a84:	0013      	movs	r3, r2
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	6939      	ldr	r1, [r7, #16]
 8002a98:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	0013      	movs	r3, r2
 8002aaa:	43da      	mvns	r2, r3
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	401a      	ands	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	0013      	movs	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	23c0      	movs	r3, #192	; 0xc0
 8002ad4:	029b      	lsls	r3, r3, #10
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d100      	bne.n	8002adc <HAL_GPIO_Init+0x174>
 8002ada:	e0a0      	b.n	8002c1e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <HAL_GPIO_Init+0x2d4>)
 8002ade:	699a      	ldr	r2, [r3, #24]
 8002ae0:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <HAL_GPIO_Init+0x2d4>)
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	619a      	str	r2, [r3, #24]
 8002ae8:	4b54      	ldr	r3, [pc, #336]	; (8002c3c <HAL_GPIO_Init+0x2d4>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002af4:	4a52      	ldr	r2, [pc, #328]	; (8002c40 <HAL_GPIO_Init+0x2d8>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	3302      	adds	r3, #2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	589b      	ldr	r3, [r3, r2]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2203      	movs	r2, #3
 8002b06:	4013      	ands	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	0013      	movs	r3, r2
 8002b10:	43da      	mvns	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	2390      	movs	r3, #144	; 0x90
 8002b1c:	05db      	lsls	r3, r3, #23
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d019      	beq.n	8002b56 <HAL_GPIO_Init+0x1ee>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a47      	ldr	r2, [pc, #284]	; (8002c44 <HAL_GPIO_Init+0x2dc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_GPIO_Init+0x1ea>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a46      	ldr	r2, [pc, #280]	; (8002c48 <HAL_GPIO_Init+0x2e0>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00d      	beq.n	8002b4e <HAL_GPIO_Init+0x1e6>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a45      	ldr	r2, [pc, #276]	; (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d007      	beq.n	8002b4a <HAL_GPIO_Init+0x1e2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a44      	ldr	r2, [pc, #272]	; (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_GPIO_Init+0x1de>
 8002b42:	2304      	movs	r3, #4
 8002b44:	e008      	b.n	8002b58 <HAL_GPIO_Init+0x1f0>
 8002b46:	2305      	movs	r3, #5
 8002b48:	e006      	b.n	8002b58 <HAL_GPIO_Init+0x1f0>
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e004      	b.n	8002b58 <HAL_GPIO_Init+0x1f0>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e002      	b.n	8002b58 <HAL_GPIO_Init+0x1f0>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e000      	b.n	8002b58 <HAL_GPIO_Init+0x1f0>
 8002b56:	2300      	movs	r3, #0
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	2103      	movs	r1, #3
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	4093      	lsls	r3, r2
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b68:	4935      	ldr	r1, [pc, #212]	; (8002c40 <HAL_GPIO_Init+0x2d8>)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	3302      	adds	r3, #2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	2380      	movs	r3, #128	; 0x80
 8002b8c:	035b      	lsls	r3, r3, #13
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	2380      	movs	r3, #128	; 0x80
 8002bb6:	039b      	lsls	r3, r3, #14
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	2380      	movs	r3, #128	; 0x80
 8002be0:	029b      	lsls	r3, r3, #10
 8002be2:	4013      	ands	r3, r2
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43da      	mvns	r2, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	025b      	lsls	r3, r3, #9
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c18:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3301      	adds	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	40da      	lsrs	r2, r3
 8002c2c:	1e13      	subs	r3, r2, #0
 8002c2e:	d000      	beq.n	8002c32 <HAL_GPIO_Init+0x2ca>
 8002c30:	e6a2      	b.n	8002978 <HAL_GPIO_Init+0x10>
  } 
}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	46c0      	nop			; (mov r8, r8)
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b006      	add	sp, #24
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40010000 	.word	0x40010000
 8002c44:	48000400 	.word	0x48000400
 8002c48:	48000800 	.word	0x48000800
 8002c4c:	48000c00 	.word	0x48000c00
 8002c50:	48001000 	.word	0x48001000
 8002c54:	40010400 	.word	0x40010400

08002c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	0008      	movs	r0, r1
 8002c62:	0011      	movs	r1, r2
 8002c64:	1cbb      	adds	r3, r7, #2
 8002c66:	1c02      	adds	r2, r0, #0
 8002c68:	801a      	strh	r2, [r3, #0]
 8002c6a:	1c7b      	adds	r3, r7, #1
 8002c6c:	1c0a      	adds	r2, r1, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c70:	1c7b      	adds	r3, r7, #1
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d004      	beq.n	8002c82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c78:	1cbb      	adds	r3, r7, #2
 8002c7a:	881a      	ldrh	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c80:	e003      	b.n	8002c8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c82:	1cbb      	adds	r3, r7, #2
 8002c84:	881a      	ldrh	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e082      	b.n	8002dac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2241      	movs	r2, #65	; 0x41
 8002caa:	5c9b      	ldrb	r3, [r3, r2]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2240      	movs	r2, #64	; 0x40
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f7fe fdb1 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2241      	movs	r2, #65	; 0x41
 8002cc6:	2124      	movs	r1, #36	; 0x24
 8002cc8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	438a      	bics	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4934      	ldr	r1, [pc, #208]	; (8002db4 <HAL_I2C_Init+0x120>)
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4931      	ldr	r1, [pc, #196]	; (8002db8 <HAL_I2C_Init+0x124>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d108      	bne.n	8002d12 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	0209      	lsls	r1, r1, #8
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	e007      	b.n	8002d22 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2184      	movs	r1, #132	; 0x84
 8002d1c:	0209      	lsls	r1, r1, #8
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d104      	bne.n	8002d34 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	491f      	ldr	r1, [pc, #124]	; (8002dbc <HAL_I2C_Init+0x128>)
 8002d40:	430a      	orrs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	491a      	ldr	r1, [pc, #104]	; (8002db8 <HAL_I2C_Init+0x124>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69d9      	ldr	r1, [r3, #28]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2241      	movs	r2, #65	; 0x41
 8002d98:	2120      	movs	r1, #32
 8002d9a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2242      	movs	r2, #66	; 0x42
 8002da6:	2100      	movs	r1, #0
 8002da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	f0ffffff 	.word	0xf0ffffff
 8002db8:	ffff7fff 	.word	0xffff7fff
 8002dbc:	02008000 	.word	0x02008000

08002dc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002dc0:	b590      	push	{r4, r7, lr}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	0008      	movs	r0, r1
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	0019      	movs	r1, r3
 8002dce:	230a      	movs	r3, #10
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	1c02      	adds	r2, r0, #0
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	1c0a      	adds	r2, r1, #0
 8002ddc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2241      	movs	r2, #65	; 0x41
 8002de2:	5c9b      	ldrb	r3, [r3, r2]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d000      	beq.n	8002dec <HAL_I2C_Master_Transmit+0x2c>
 8002dea:	e0e7      	b.n	8002fbc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	5c9b      	ldrb	r3, [r3, r2]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_I2C_Master_Transmit+0x3a>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e0e1      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1fe>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2240      	movs	r2, #64	; 0x40
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e02:	f7fe fe0b 	bl	8001a1c <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	0219      	lsls	r1, r3, #8
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2319      	movs	r3, #25
 8002e16:	2201      	movs	r2, #1
 8002e18:	f000 fa04 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0cc      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2241      	movs	r2, #65	; 0x41
 8002e28:	2121      	movs	r1, #33	; 0x21
 8002e2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2242      	movs	r2, #66	; 0x42
 8002e30:	2110      	movs	r1, #16
 8002e32:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2208      	movs	r2, #8
 8002e44:	18ba      	adds	r2, r7, r2
 8002e46:	8812      	ldrh	r2, [r2, #0]
 8002e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2bff      	cmp	r3, #255	; 0xff
 8002e58:	d911      	bls.n	8002e7e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	22ff      	movs	r2, #255	; 0xff
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	045c      	lsls	r4, r3, #17
 8002e6a:	230a      	movs	r3, #10
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	8819      	ldrh	r1, [r3, #0]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <HAL_I2C_Master_Transmit+0x208>)
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	0023      	movs	r3, r4
 8002e78:	f000 fc2e 	bl	80036d8 <I2C_TransferConfig>
 8002e7c:	e075      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	049c      	lsls	r4, r3, #18
 8002e92:	230a      	movs	r3, #10
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	8819      	ldrh	r1, [r3, #0]
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	4b4b      	ldr	r3, [pc, #300]	; (8002fc8 <HAL_I2C_Master_Transmit+0x208>)
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	0023      	movs	r3, r4
 8002ea0:	f000 fc1a 	bl	80036d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ea4:	e061      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f000 fa07 	bl	80032c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e081      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	781a      	ldrb	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d03a      	beq.n	8002f6a <HAL_I2C_Master_Transmit+0x1aa>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d136      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	0013      	movs	r3, r2
 8002f06:	2200      	movs	r2, #0
 8002f08:	2180      	movs	r1, #128	; 0x80
 8002f0a:	f000 f98b 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e053      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2bff      	cmp	r3, #255	; 0xff
 8002f1e:	d911      	bls.n	8002f44 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	22ff      	movs	r2, #255	; 0xff
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	045c      	lsls	r4, r3, #17
 8002f30:	230a      	movs	r3, #10
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	8819      	ldrh	r1, [r3, #0]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	2300      	movs	r3, #0
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	0023      	movs	r3, r4
 8002f3e:	f000 fbcb 	bl	80036d8 <I2C_TransferConfig>
 8002f42:	e012      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	049c      	lsls	r4, r3, #18
 8002f58:	230a      	movs	r3, #10
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	8819      	ldrh	r1, [r3, #0]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	2300      	movs	r3, #0
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	0023      	movs	r3, r4
 8002f66:	f000 fbb7 	bl	80036d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d198      	bne.n	8002ea6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f9e6 	bl	800334c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f80:	1e03      	subs	r3, r0, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e01a      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	490c      	ldr	r1, [pc, #48]	; (8002fcc <HAL_I2C_Master_Transmit+0x20c>)
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2241      	movs	r2, #65	; 0x41
 8002fa4:	2120      	movs	r1, #32
 8002fa6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2242      	movs	r2, #66	; 0x42
 8002fac:	2100      	movs	r1, #0
 8002fae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2240      	movs	r2, #64	; 0x40
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b007      	add	sp, #28
 8002fc4:	bd90      	pop	{r4, r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	80002000 	.word	0x80002000
 8002fcc:	fe00e800 	.word	0xfe00e800

08002fd0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	0008      	movs	r0, r1
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	0019      	movs	r1, r3
 8002fde:	230a      	movs	r3, #10
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	1c02      	adds	r2, r0, #0
 8002fe4:	801a      	strh	r2, [r3, #0]
 8002fe6:	2308      	movs	r3, #8
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	1c0a      	adds	r2, r1, #0
 8002fec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2241      	movs	r2, #65	; 0x41
 8002ff2:	5c9b      	ldrb	r3, [r3, r2]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d000      	beq.n	8002ffc <HAL_I2C_Master_Receive+0x2c>
 8002ffa:	e0e8      	b.n	80031ce <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2240      	movs	r2, #64	; 0x40
 8003000:	5c9b      	ldrb	r3, [r3, r2]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_I2C_Master_Receive+0x3a>
 8003006:	2302      	movs	r3, #2
 8003008:	e0e2      	b.n	80031d0 <HAL_I2C_Master_Receive+0x200>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2240      	movs	r2, #64	; 0x40
 800300e:	2101      	movs	r1, #1
 8003010:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003012:	f7fe fd03 	bl	8001a1c <HAL_GetTick>
 8003016:	0003      	movs	r3, r0
 8003018:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	0219      	lsls	r1, r3, #8
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2319      	movs	r3, #25
 8003026:	2201      	movs	r2, #1
 8003028:	f000 f8fc 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 800302c:	1e03      	subs	r3, r0, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0cd      	b.n	80031d0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2241      	movs	r2, #65	; 0x41
 8003038:	2122      	movs	r1, #34	; 0x22
 800303a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2242      	movs	r2, #66	; 0x42
 8003040:	2110      	movs	r1, #16
 8003042:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2208      	movs	r2, #8
 8003054:	18ba      	adds	r2, r7, r2
 8003056:	8812      	ldrh	r2, [r2, #0]
 8003058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2bff      	cmp	r3, #255	; 0xff
 8003068:	d911      	bls.n	800308e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	b2da      	uxtb	r2, r3
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	045c      	lsls	r4, r3, #17
 800307a:	230a      	movs	r3, #10
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	8819      	ldrh	r1, [r3, #0]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	4b55      	ldr	r3, [pc, #340]	; (80031d8 <HAL_I2C_Master_Receive+0x208>)
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	0023      	movs	r3, r4
 8003088:	f000 fb26 	bl	80036d8 <I2C_TransferConfig>
 800308c:	e076      	b.n	800317c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	b2da      	uxtb	r2, r3
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	049c      	lsls	r4, r3, #18
 80030a2:	230a      	movs	r3, #10
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	8819      	ldrh	r1, [r3, #0]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <HAL_I2C_Master_Receive+0x208>)
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	0023      	movs	r3, r4
 80030b0:	f000 fb12 	bl	80036d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80030b4:	e062      	b.n	800317c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f989 	bl	80033d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c2:	1e03      	subs	r3, r0, #0
 80030c4:	d001      	beq.n	80030ca <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e082      	b.n	80031d0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	3b01      	subs	r3, #1
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d03a      	beq.n	800317c <HAL_I2C_Master_Receive+0x1ac>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d136      	bne.n	800317c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800310e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	0013      	movs	r3, r2
 8003118:	2200      	movs	r2, #0
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	f000 f882 	bl	8003224 <I2C_WaitOnFlagUntilTimeout>
 8003120:	1e03      	subs	r3, r0, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e053      	b.n	80031d0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	2bff      	cmp	r3, #255	; 0xff
 8003130:	d911      	bls.n	8003156 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	b2da      	uxtb	r2, r3
 800313e:	2380      	movs	r3, #128	; 0x80
 8003140:	045c      	lsls	r4, r3, #17
 8003142:	230a      	movs	r3, #10
 8003144:	18fb      	adds	r3, r7, r3
 8003146:	8819      	ldrh	r1, [r3, #0]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	2300      	movs	r3, #0
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	0023      	movs	r3, r4
 8003150:	f000 fac2 	bl	80036d8 <I2C_TransferConfig>
 8003154:	e012      	b.n	800317c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	b2da      	uxtb	r2, r3
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	049c      	lsls	r4, r3, #18
 800316a:	230a      	movs	r3, #10
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	8819      	ldrh	r1, [r3, #0]
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	2300      	movs	r3, #0
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	0023      	movs	r3, r4
 8003178:	f000 faae 	bl	80036d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d197      	bne.n	80030b6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	0018      	movs	r0, r3
 800318e:	f000 f8dd 	bl	800334c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d001      	beq.n	800319a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e01a      	b.n	80031d0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2220      	movs	r2, #32
 80031a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	490b      	ldr	r1, [pc, #44]	; (80031dc <HAL_I2C_Master_Receive+0x20c>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2241      	movs	r2, #65	; 0x41
 80031b6:	2120      	movs	r1, #32
 80031b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2242      	movs	r2, #66	; 0x42
 80031be:	2100      	movs	r1, #0
 80031c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	2100      	movs	r1, #0
 80031c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	0018      	movs	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b007      	add	sp, #28
 80031d6:	bd90      	pop	{r4, r7, pc}
 80031d8:	80002400 	.word	0x80002400
 80031dc:	fe00e800 	.word	0xfe00e800

080031e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2202      	movs	r2, #2
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d103      	bne.n	80031fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2201      	movs	r2, #1
 8003206:	4013      	ands	r3, r2
 8003208:	2b01      	cmp	r3, #1
 800320a:	d007      	beq.n	800321c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	430a      	orrs	r2, r1
 800321a:	619a      	str	r2, [r3, #24]
  }
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}

08003224 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	1dfb      	adds	r3, r7, #7
 8003232:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003234:	e030      	b.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	d02d      	beq.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323c:	f7fe fbee 	bl	8001a1c <HAL_GetTick>
 8003240:	0002      	movs	r2, r0
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d302      	bcc.n	8003252 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d122      	bne.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	4013      	ands	r3, r2
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	425a      	negs	r2, r3
 8003262:	4153      	adcs	r3, r2
 8003264:	b2db      	uxtb	r3, r3
 8003266:	001a      	movs	r2, r3
 8003268:	1dfb      	adds	r3, r7, #7
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d113      	bne.n	8003298 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	2220      	movs	r2, #32
 8003276:	431a      	orrs	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2241      	movs	r2, #65	; 0x41
 8003280:	2120      	movs	r1, #32
 8003282:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2242      	movs	r2, #66	; 0x42
 8003288:	2100      	movs	r1, #0
 800328a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e00f      	b.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	425a      	negs	r2, r3
 80032a8:	4153      	adcs	r3, r2
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	001a      	movs	r2, r3
 80032ae:	1dfb      	adds	r3, r7, #7
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d0bf      	beq.n	8003236 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b004      	add	sp, #16
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032cc:	e032      	b.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 f8ff 	bl	80034d8 <I2C_IsErrorOccurred>
 80032da:	1e03      	subs	r3, r0, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e030      	b.n	8003344 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	3301      	adds	r3, #1
 80032e6:	d025      	beq.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e8:	f7fe fb98 	bl	8001a1c <HAL_GetTick>
 80032ec:	0002      	movs	r2, r0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d302      	bcc.n	80032fe <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11a      	bne.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2202      	movs	r2, #2
 8003306:	4013      	ands	r3, r2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d013      	beq.n	8003334 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	2220      	movs	r2, #32
 8003312:	431a      	orrs	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2241      	movs	r2, #65	; 0x41
 800331c:	2120      	movs	r1, #32
 800331e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2242      	movs	r2, #66	; 0x42
 8003324:	2100      	movs	r1, #0
 8003326:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e007      	b.n	8003344 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2202      	movs	r2, #2
 800333c:	4013      	ands	r3, r2
 800333e:	2b02      	cmp	r3, #2
 8003340:	d1c5      	bne.n	80032ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003358:	e02f      	b.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 f8b9 	bl	80034d8 <I2C_IsErrorOccurred>
 8003366:	1e03      	subs	r3, r0, #0
 8003368:	d001      	beq.n	800336e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e02d      	b.n	80033ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7fe fb55 	bl	8001a1c <HAL_GetTick>
 8003372:	0002      	movs	r2, r0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11a      	bne.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	2220      	movs	r2, #32
 800338c:	4013      	ands	r3, r2
 800338e:	2b20      	cmp	r3, #32
 8003390:	d013      	beq.n	80033ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	2220      	movs	r2, #32
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2241      	movs	r2, #65	; 0x41
 80033a2:	2120      	movs	r1, #32
 80033a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2242      	movs	r2, #66	; 0x42
 80033aa:	2100      	movs	r1, #0
 80033ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2240      	movs	r2, #64	; 0x40
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2220      	movs	r2, #32
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d1c8      	bne.n	800335a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033e0:	e06b      	b.n	80034ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f000 f875 	bl	80034d8 <I2C_IsErrorOccurred>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e069      	b.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2220      	movs	r2, #32
 80033fe:	4013      	ands	r3, r2
 8003400:	2b20      	cmp	r3, #32
 8003402:	d138      	bne.n	8003476 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2204      	movs	r2, #4
 800340c:	4013      	ands	r3, r2
 800340e:	2b04      	cmp	r3, #4
 8003410:	d105      	bne.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e055      	b.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2210      	movs	r2, #16
 8003426:	4013      	ands	r3, r2
 8003428:	2b10      	cmp	r3, #16
 800342a:	d107      	bne.n	800343c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2210      	movs	r2, #16
 8003432:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2204      	movs	r2, #4
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
 800343a:	e002      	b.n	8003442 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2220      	movs	r2, #32
 8003448:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685a      	ldr	r2, [r3, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	491f      	ldr	r1, [pc, #124]	; (80034d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003456:	400a      	ands	r2, r1
 8003458:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2241      	movs	r2, #65	; 0x41
 800345e:	2120      	movs	r1, #32
 8003460:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2242      	movs	r2, #66	; 0x42
 8003466:	2100      	movs	r1, #0
 8003468:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2240      	movs	r2, #64	; 0x40
 800346e:	2100      	movs	r1, #0
 8003470:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e029      	b.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe fad1 	bl	8001a1c <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d116      	bne.n	80034ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2204      	movs	r2, #4
 8003494:	4013      	ands	r3, r2
 8003496:	2b04      	cmp	r3, #4
 8003498:	d00f      	beq.n	80034ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	2220      	movs	r2, #32
 80034a0:	431a      	orrs	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2241      	movs	r2, #65	; 0x41
 80034aa:	2120      	movs	r1, #32
 80034ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2240      	movs	r2, #64	; 0x40
 80034b2:	2100      	movs	r1, #0
 80034b4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e007      	b.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	2204      	movs	r2, #4
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b04      	cmp	r3, #4
 80034c6:	d18c      	bne.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	fe00e800 	.word	0xfe00e800

080034d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e4:	2327      	movs	r3, #39	; 0x27
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2210      	movs	r2, #16
 8003500:	4013      	ands	r3, r2
 8003502:	d100      	bne.n	8003506 <I2C_IsErrorOccurred+0x2e>
 8003504:	e082      	b.n	800360c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2210      	movs	r2, #16
 800350c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800350e:	e060      	b.n	80035d2 <I2C_IsErrorOccurred+0xfa>
 8003510:	2427      	movs	r4, #39	; 0x27
 8003512:	193b      	adds	r3, r7, r4
 8003514:	193a      	adds	r2, r7, r4
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3301      	adds	r3, #1
 800351e:	d058      	beq.n	80035d2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7fe fa7c 	bl	8001a1c <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	429a      	cmp	r2, r3
 800352e:	d306      	bcc.n	800353e <I2C_IsErrorOccurred+0x66>
 8003530:	193b      	adds	r3, r7, r4
 8003532:	193a      	adds	r2, r7, r4
 8003534:	7812      	ldrb	r2, [r2, #0]
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d149      	bne.n	80035d2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	01db      	lsls	r3, r3, #7
 8003548:	4013      	ands	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800354c:	2013      	movs	r0, #19
 800354e:	183b      	adds	r3, r7, r0
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	2142      	movs	r1, #66	; 0x42
 8003554:	5c52      	ldrb	r2, [r2, r1]
 8003556:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699a      	ldr	r2, [r3, #24]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	401a      	ands	r2, r3
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	429a      	cmp	r2, r3
 800356a:	d126      	bne.n	80035ba <I2C_IsErrorOccurred+0xe2>
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	01db      	lsls	r3, r3, #7
 8003572:	429a      	cmp	r2, r3
 8003574:	d021      	beq.n	80035ba <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003576:	183b      	adds	r3, r7, r0
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b20      	cmp	r3, #32
 800357c:	d01d      	beq.n	80035ba <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	01c9      	lsls	r1, r1, #7
 800358c:	430a      	orrs	r2, r1
 800358e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003590:	f7fe fa44 	bl	8001a1c <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003598:	e00f      	b.n	80035ba <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800359a:	f7fe fa3f 	bl	8001a1c <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b19      	cmp	r3, #25
 80035a6:	d908      	bls.n	80035ba <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	2220      	movs	r2, #32
 80035ac:	4313      	orrs	r3, r2
 80035ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035b0:	2327      	movs	r3, #39	; 0x27
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	2201      	movs	r2, #1
 80035b6:	701a      	strb	r2, [r3, #0]

              break;
 80035b8:	e00b      	b.n	80035d2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2220      	movs	r2, #32
 80035c2:	4013      	ands	r3, r2
 80035c4:	2127      	movs	r1, #39	; 0x27
 80035c6:	187a      	adds	r2, r7, r1
 80035c8:	1879      	adds	r1, r7, r1
 80035ca:	7809      	ldrb	r1, [r1, #0]
 80035cc:	7011      	strb	r1, [r2, #0]
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d1e3      	bne.n	800359a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	2220      	movs	r2, #32
 80035da:	4013      	ands	r3, r2
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d004      	beq.n	80035ea <I2C_IsErrorOccurred+0x112>
 80035e0:	2327      	movs	r3, #39	; 0x27
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d092      	beq.n	8003510 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035ea:	2327      	movs	r3, #39	; 0x27
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d103      	bne.n	80035fc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2220      	movs	r2, #32
 80035fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2204      	movs	r2, #4
 8003600:	4313      	orrs	r3, r2
 8003602:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003604:	2327      	movs	r3, #39	; 0x27
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4013      	ands	r3, r2
 800361c:	d00c      	beq.n	8003638 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	2201      	movs	r2, #1
 8003622:	4313      	orrs	r3, r2
 8003624:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2280      	movs	r2, #128	; 0x80
 800362c:	0052      	lsls	r2, r2, #1
 800362e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003630:	2327      	movs	r3, #39	; 0x27
 8003632:	18fb      	adds	r3, r7, r3
 8003634:	2201      	movs	r2, #1
 8003636:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4013      	ands	r3, r2
 8003640:	d00c      	beq.n	800365c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	2208      	movs	r2, #8
 8003646:	4313      	orrs	r3, r2
 8003648:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2280      	movs	r2, #128	; 0x80
 8003650:	00d2      	lsls	r2, r2, #3
 8003652:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003654:	2327      	movs	r3, #39	; 0x27
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4013      	ands	r3, r2
 8003664:	d00c      	beq.n	8003680 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2202      	movs	r2, #2
 800366a:	4313      	orrs	r3, r2
 800366c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	0092      	lsls	r2, r2, #2
 8003676:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003678:	2327      	movs	r3, #39	; 0x27
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003680:	2327      	movs	r3, #39	; 0x27
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01d      	beq.n	80036c6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	0018      	movs	r0, r3
 800368e:	f7ff fda7 	bl	80031e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	490d      	ldr	r1, [pc, #52]	; (80036d4 <I2C_IsErrorOccurred+0x1fc>)
 800369e:	400a      	ands	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2241      	movs	r2, #65	; 0x41
 80036b2:	2120      	movs	r1, #32
 80036b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2242      	movs	r2, #66	; 0x42
 80036ba:	2100      	movs	r1, #0
 80036bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2240      	movs	r2, #64	; 0x40
 80036c2:	2100      	movs	r1, #0
 80036c4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80036c6:	2327      	movs	r3, #39	; 0x27
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	781b      	ldrb	r3, [r3, #0]
}
 80036cc:	0018      	movs	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	b00b      	add	sp, #44	; 0x2c
 80036d2:	bd90      	pop	{r4, r7, pc}
 80036d4:	fe00e800 	.word	0xfe00e800

080036d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	0008      	movs	r0, r1
 80036e2:	0011      	movs	r1, r2
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	240a      	movs	r4, #10
 80036e8:	193b      	adds	r3, r7, r4
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	801a      	strh	r2, [r3, #0]
 80036ee:	2009      	movs	r0, #9
 80036f0:	183b      	adds	r3, r7, r0
 80036f2:	1c0a      	adds	r2, r1, #0
 80036f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	059b      	lsls	r3, r3, #22
 80036fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	0419      	lsls	r1, r3, #16
 8003704:	23ff      	movs	r3, #255	; 0xff
 8003706:	041b      	lsls	r3, r3, #16
 8003708:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	4313      	orrs	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003722:	0d51      	lsrs	r1, r2, #21
 8003724:	2280      	movs	r2, #128	; 0x80
 8003726:	00d2      	lsls	r2, r2, #3
 8003728:	400a      	ands	r2, r1
 800372a:	4907      	ldr	r1, [pc, #28]	; (8003748 <I2C_TransferConfig+0x70>)
 800372c:	430a      	orrs	r2, r1
 800372e:	43d2      	mvns	r2, r2
 8003730:	401a      	ands	r2, r3
 8003732:	0011      	movs	r1, r2
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	b007      	add	sp, #28
 8003744:	bd90      	pop	{r4, r7, pc}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	03ff63ff 	.word	0x03ff63ff

0800374c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2241      	movs	r2, #65	; 0x41
 800375a:	5c9b      	ldrb	r3, [r3, r2]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	d138      	bne.n	80037d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	5c9b      	ldrb	r3, [r3, r2]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800376c:	2302      	movs	r3, #2
 800376e:	e032      	b.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	2101      	movs	r1, #1
 8003776:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2241      	movs	r2, #65	; 0x41
 800377c:	2124      	movs	r1, #36	; 0x24
 800377e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2101      	movs	r1, #1
 800378c:	438a      	bics	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4911      	ldr	r1, [pc, #68]	; (80037e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800379c:	400a      	ands	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2101      	movs	r1, #1
 80037bc:	430a      	orrs	r2, r1
 80037be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2241      	movs	r2, #65	; 0x41
 80037c4:	2120      	movs	r1, #32
 80037c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	2100      	movs	r1, #0
 80037ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	0018      	movs	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	ffffefff 	.word	0xffffefff

080037e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2241      	movs	r2, #65	; 0x41
 80037f2:	5c9b      	ldrb	r3, [r3, r2]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d139      	bne.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2240      	movs	r2, #64	; 0x40
 80037fe:	5c9b      	ldrb	r3, [r3, r2]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003804:	2302      	movs	r3, #2
 8003806:	e033      	b.n	8003870 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	2101      	movs	r1, #1
 800380e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2241      	movs	r2, #65	; 0x41
 8003814:	2124      	movs	r1, #36	; 0x24
 8003816:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2101      	movs	r1, #1
 8003824:	438a      	bics	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4a11      	ldr	r2, [pc, #68]	; (8003878 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003834:	4013      	ands	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2101      	movs	r1, #1
 8003856:	430a      	orrs	r2, r1
 8003858:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2241      	movs	r2, #65	; 0x41
 800385e:	2120      	movs	r1, #32
 8003860:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	2100      	movs	r1, #0
 8003868:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b004      	add	sp, #16
 8003876:	bd80      	pop	{r7, pc}
 8003878:	fffff0ff 	.word	0xfffff0ff

0800387c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f000 fb76 	bl	8003f7c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d100      	bne.n	800389c <HAL_RCC_OscConfig+0x20>
 800389a:	e08e      	b.n	80039ba <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800389c:	4bc5      	ldr	r3, [pc, #788]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	220c      	movs	r2, #12
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d00e      	beq.n	80038c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038a8:	4bc2      	ldr	r3, [pc, #776]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	220c      	movs	r2, #12
 80038ae:	4013      	ands	r3, r2
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d117      	bne.n	80038e4 <HAL_RCC_OscConfig+0x68>
 80038b4:	4bbf      	ldr	r3, [pc, #764]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	23c0      	movs	r3, #192	; 0xc0
 80038ba:	025b      	lsls	r3, r3, #9
 80038bc:	401a      	ands	r2, r3
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	025b      	lsls	r3, r3, #9
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d10e      	bne.n	80038e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c6:	4bbb      	ldr	r3, [pc, #748]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	2380      	movs	r3, #128	; 0x80
 80038cc:	029b      	lsls	r3, r3, #10
 80038ce:	4013      	ands	r3, r2
 80038d0:	d100      	bne.n	80038d4 <HAL_RCC_OscConfig+0x58>
 80038d2:	e071      	b.n	80039b8 <HAL_RCC_OscConfig+0x13c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d000      	beq.n	80038de <HAL_RCC_OscConfig+0x62>
 80038dc:	e06c      	b.n	80039b8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f000 fb4c 	bl	8003f7c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_OscConfig+0x80>
 80038ec:	4bb1      	ldr	r3, [pc, #708]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4bb0      	ldr	r3, [pc, #704]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	0249      	lsls	r1, r1, #9
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e02f      	b.n	800395c <HAL_RCC_OscConfig+0xe0>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10c      	bne.n	800391e <HAL_RCC_OscConfig+0xa2>
 8003904:	4bab      	ldr	r3, [pc, #684]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4baa      	ldr	r3, [pc, #680]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 800390a:	49ab      	ldr	r1, [pc, #684]	; (8003bb8 <HAL_RCC_OscConfig+0x33c>)
 800390c:	400a      	ands	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	4ba8      	ldr	r3, [pc, #672]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4ba7      	ldr	r3, [pc, #668]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003916:	49a9      	ldr	r1, [pc, #676]	; (8003bbc <HAL_RCC_OscConfig+0x340>)
 8003918:	400a      	ands	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	e01e      	b.n	800395c <HAL_RCC_OscConfig+0xe0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b05      	cmp	r3, #5
 8003924:	d10e      	bne.n	8003944 <HAL_RCC_OscConfig+0xc8>
 8003926:	4ba3      	ldr	r3, [pc, #652]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4ba2      	ldr	r3, [pc, #648]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 800392c:	2180      	movs	r1, #128	; 0x80
 800392e:	02c9      	lsls	r1, r1, #11
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4b9f      	ldr	r3, [pc, #636]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4b9e      	ldr	r3, [pc, #632]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 800393a:	2180      	movs	r1, #128	; 0x80
 800393c:	0249      	lsls	r1, r1, #9
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0xe0>
 8003944:	4b9b      	ldr	r3, [pc, #620]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4b9a      	ldr	r3, [pc, #616]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 800394a:	499b      	ldr	r1, [pc, #620]	; (8003bb8 <HAL_RCC_OscConfig+0x33c>)
 800394c:	400a      	ands	r2, r1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	4b98      	ldr	r3, [pc, #608]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b97      	ldr	r3, [pc, #604]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003956:	4999      	ldr	r1, [pc, #612]	; (8003bbc <HAL_RCC_OscConfig+0x340>)
 8003958:	400a      	ands	r2, r1
 800395a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d014      	beq.n	800398e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe f85a 	bl	8001a1c <HAL_GetTick>
 8003968:	0003      	movs	r3, r0
 800396a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800396e:	f7fe f855 	bl	8001a1c <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b64      	cmp	r3, #100	; 0x64
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e2fd      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003980:	4b8c      	ldr	r3, [pc, #560]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	029b      	lsls	r3, r3, #10
 8003988:	4013      	ands	r3, r2
 800398a:	d0f0      	beq.n	800396e <HAL_RCC_OscConfig+0xf2>
 800398c:	e015      	b.n	80039ba <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398e:	f7fe f845 	bl	8001a1c <HAL_GetTick>
 8003992:	0003      	movs	r3, r0
 8003994:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003998:	f7fe f840 	bl	8001a1c <HAL_GetTick>
 800399c:	0002      	movs	r2, r0
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e2e8      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	4b82      	ldr	r3, [pc, #520]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	029b      	lsls	r3, r3, #10
 80039b2:	4013      	ands	r3, r2
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_OscConfig+0x11c>
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2202      	movs	r2, #2
 80039c0:	4013      	ands	r3, r2
 80039c2:	d100      	bne.n	80039c6 <HAL_RCC_OscConfig+0x14a>
 80039c4:	e06c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80039c6:	4b7b      	ldr	r3, [pc, #492]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	220c      	movs	r2, #12
 80039cc:	4013      	ands	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80039d0:	4b78      	ldr	r3, [pc, #480]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	220c      	movs	r2, #12
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d11f      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1a0>
 80039dc:	4b75      	ldr	r3, [pc, #468]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	23c0      	movs	r3, #192	; 0xc0
 80039e2:	025b      	lsls	r3, r3, #9
 80039e4:	401a      	ands	r2, r3
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d116      	bne.n	8003a1c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	4b71      	ldr	r3, [pc, #452]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2202      	movs	r2, #2
 80039f4:	4013      	ands	r3, r2
 80039f6:	d005      	beq.n	8003a04 <HAL_RCC_OscConfig+0x188>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e2bb      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b6b      	ldr	r3, [pc, #428]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	22f8      	movs	r2, #248	; 0xf8
 8003a0a:	4393      	bics	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	00da      	lsls	r2, r3, #3
 8003a14:	4b67      	ldr	r3, [pc, #412]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a1a:	e041      	b.n	8003aa0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d024      	beq.n	8003a6e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a24:	4b63      	ldr	r3, [pc, #396]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4b62      	ldr	r3, [pc, #392]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fd fff4 	bl	8001a1c <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a3a:	f7fd ffef 	bl	8001a1c <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e297      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4c:	4b59      	ldr	r3, [pc, #356]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2202      	movs	r2, #2
 8003a52:	4013      	ands	r3, r2
 8003a54:	d0f1      	beq.n	8003a3a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a56:	4b57      	ldr	r3, [pc, #348]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	22f8      	movs	r2, #248	; 0xf8
 8003a5c:	4393      	bics	r3, r2
 8003a5e:	0019      	movs	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	00da      	lsls	r2, r3, #3
 8003a66:	4b53      	ldr	r3, [pc, #332]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	e018      	b.n	8003aa0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a6e:	4b51      	ldr	r3, [pc, #324]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b50      	ldr	r3, [pc, #320]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a74:	2101      	movs	r1, #1
 8003a76:	438a      	bics	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fd ffcf 	bl	8001a1c <HAL_GetTick>
 8003a7e:	0003      	movs	r3, r0
 8003a80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fd ffca 	bl	8001a1c <HAL_GetTick>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e272      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	4b47      	ldr	r3, [pc, #284]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d1f1      	bne.n	8003a84 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d036      	beq.n	8003b18 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d019      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab2:	4b40      	ldr	r3, [pc, #256]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003ab4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab6:	4b3f      	ldr	r3, [pc, #252]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003ab8:	2101      	movs	r1, #1
 8003aba:	430a      	orrs	r2, r1
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003abe:	f7fd ffad 	bl	8001a1c <HAL_GetTick>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac8:	f7fd ffa8 	bl	8001a1c <HAL_GetTick>
 8003acc:	0002      	movs	r2, r0
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e250      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	4b36      	ldr	r3, [pc, #216]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	2202      	movs	r2, #2
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d0f1      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x24c>
 8003ae4:	e018      	b.n	8003b18 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aea:	4b32      	ldr	r3, [pc, #200]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003aec:	2101      	movs	r1, #1
 8003aee:	438a      	bics	r2, r1
 8003af0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fd ff93 	bl	8001a1c <HAL_GetTick>
 8003af6:	0003      	movs	r3, r0
 8003af8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003afc:	f7fd ff8e 	bl	8001a1c <HAL_GetTick>
 8003b00:	0002      	movs	r2, r0
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e236      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0e:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	2202      	movs	r2, #2
 8003b14:	4013      	ands	r3, r2
 8003b16:	d1f1      	bne.n	8003afc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d100      	bne.n	8003b24 <HAL_RCC_OscConfig+0x2a8>
 8003b22:	e0b5      	b.n	8003c90 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b24:	201f      	movs	r0, #31
 8003b26:	183b      	adds	r3, r7, r0
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2c:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003b2e:	69da      	ldr	r2, [r3, #28]
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	055b      	lsls	r3, r3, #21
 8003b34:	4013      	ands	r3, r2
 8003b36:	d110      	bne.n	8003b5a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	0549      	lsls	r1, r1, #21
 8003b42:	430a      	orrs	r2, r1
 8003b44:	61da      	str	r2, [r3, #28]
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	055b      	lsls	r3, r3, #21
 8003b4e:	4013      	ands	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]
 8003b52:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b54:	183b      	adds	r3, r7, r0
 8003b56:	2201      	movs	r2, #1
 8003b58:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b19      	ldr	r3, [pc, #100]	; (8003bc0 <HAL_RCC_OscConfig+0x344>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	2380      	movs	r3, #128	; 0x80
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4013      	ands	r3, r2
 8003b64:	d11a      	bne.n	8003b9c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_RCC_OscConfig+0x344>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <HAL_RCC_OscConfig+0x344>)
 8003b6c:	2180      	movs	r1, #128	; 0x80
 8003b6e:	0049      	lsls	r1, r1, #1
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b74:	f7fd ff52 	bl	8001a1c <HAL_GetTick>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7e:	f7fd ff4d 	bl	8001a1c <HAL_GetTick>
 8003b82:	0002      	movs	r2, r0
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e1f5      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x344>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d0f0      	beq.n	8003b7e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10f      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x348>
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	4b02      	ldr	r3, [pc, #8]	; (8003bb4 <HAL_RCC_OscConfig+0x338>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	430a      	orrs	r2, r1
 8003bae:	621a      	str	r2, [r3, #32]
 8003bb0:	e036      	b.n	8003c20 <HAL_RCC_OscConfig+0x3a4>
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	fffeffff 	.word	0xfffeffff
 8003bbc:	fffbffff 	.word	0xfffbffff
 8003bc0:	40007000 	.word	0x40007000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10c      	bne.n	8003be6 <HAL_RCC_OscConfig+0x36a>
 8003bcc:	4bca      	ldr	r3, [pc, #808]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003bce:	6a1a      	ldr	r2, [r3, #32]
 8003bd0:	4bc9      	ldr	r3, [pc, #804]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	621a      	str	r2, [r3, #32]
 8003bd8:	4bc7      	ldr	r3, [pc, #796]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	4bc6      	ldr	r3, [pc, #792]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003bde:	2104      	movs	r1, #4
 8003be0:	438a      	bics	r2, r1
 8003be2:	621a      	str	r2, [r3, #32]
 8003be4:	e01c      	b.n	8003c20 <HAL_RCC_OscConfig+0x3a4>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0x38c>
 8003bee:	4bc2      	ldr	r3, [pc, #776]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003bf0:	6a1a      	ldr	r2, [r3, #32]
 8003bf2:	4bc1      	ldr	r3, [pc, #772]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	621a      	str	r2, [r3, #32]
 8003bfa:	4bbf      	ldr	r3, [pc, #764]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	4bbe      	ldr	r3, [pc, #760]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c00:	2101      	movs	r1, #1
 8003c02:	430a      	orrs	r2, r1
 8003c04:	621a      	str	r2, [r3, #32]
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0x3a4>
 8003c08:	4bbb      	ldr	r3, [pc, #748]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c0a:	6a1a      	ldr	r2, [r3, #32]
 8003c0c:	4bba      	ldr	r3, [pc, #744]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c0e:	2101      	movs	r1, #1
 8003c10:	438a      	bics	r2, r1
 8003c12:	621a      	str	r2, [r3, #32]
 8003c14:	4bb8      	ldr	r3, [pc, #736]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c16:	6a1a      	ldr	r2, [r3, #32]
 8003c18:	4bb7      	ldr	r3, [pc, #732]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c1a:	2104      	movs	r1, #4
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d014      	beq.n	8003c52 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c28:	f7fd fef8 	bl	8001a1c <HAL_GetTick>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e009      	b.n	8003c46 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd fef3 	bl	8001a1c <HAL_GetTick>
 8003c36:	0002      	movs	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	4aaf      	ldr	r2, [pc, #700]	; (8003efc <HAL_RCC_OscConfig+0x680>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e19a      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c46:	4bac      	ldr	r3, [pc, #688]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d0f0      	beq.n	8003c32 <HAL_RCC_OscConfig+0x3b6>
 8003c50:	e013      	b.n	8003c7a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fd fee3 	bl	8001a1c <HAL_GetTick>
 8003c56:	0003      	movs	r3, r0
 8003c58:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5a:	e009      	b.n	8003c70 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fede 	bl	8001a1c <HAL_GetTick>
 8003c60:	0002      	movs	r2, r0
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	4aa5      	ldr	r2, [pc, #660]	; (8003efc <HAL_RCC_OscConfig+0x680>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e185      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	4ba1      	ldr	r3, [pc, #644]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	2202      	movs	r2, #2
 8003c76:	4013      	ands	r3, r2
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c7a:	231f      	movs	r3, #31
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d105      	bne.n	8003c90 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c84:	4b9c      	ldr	r3, [pc, #624]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	4b9b      	ldr	r3, [pc, #620]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003c8a:	499d      	ldr	r1, [pc, #628]	; (8003f00 <HAL_RCC_OscConfig+0x684>)
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2210      	movs	r2, #16
 8003c96:	4013      	ands	r3, r2
 8003c98:	d063      	beq.n	8003d62 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d12a      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ca2:	4b95      	ldr	r3, [pc, #596]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ca6:	4b94      	ldr	r3, [pc, #592]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003ca8:	2104      	movs	r1, #4
 8003caa:	430a      	orrs	r2, r1
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003cae:	4b92      	ldr	r3, [pc, #584]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb2:	4b91      	ldr	r3, [pc, #580]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cba:	f7fd feaf 	bl	8001a1c <HAL_GetTick>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003cc4:	f7fd feaa 	bl	8001a1c <HAL_GetTick>
 8003cc8:	0002      	movs	r2, r0
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e152      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003cd6:	4b88      	ldr	r3, [pc, #544]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cda:	2202      	movs	r2, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d0f1      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ce0:	4b85      	ldr	r3, [pc, #532]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce4:	22f8      	movs	r2, #248	; 0xf8
 8003ce6:	4393      	bics	r3, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	00da      	lsls	r2, r3, #3
 8003cf0:	4b81      	ldr	r3, [pc, #516]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8003cf6:	e034      	b.n	8003d62 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	3305      	adds	r3, #5
 8003cfe:	d111      	bne.n	8003d24 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003d00:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d04:	4b7c      	ldr	r3, [pc, #496]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d06:	2104      	movs	r1, #4
 8003d08:	438a      	bics	r2, r1
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d0c:	4b7a      	ldr	r3, [pc, #488]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d10:	22f8      	movs	r2, #248	; 0xf8
 8003d12:	4393      	bics	r3, r2
 8003d14:	0019      	movs	r1, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	00da      	lsls	r2, r3, #3
 8003d1c:	4b76      	ldr	r3, [pc, #472]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	635a      	str	r2, [r3, #52]	; 0x34
 8003d22:	e01e      	b.n	8003d62 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d24:	4b74      	ldr	r3, [pc, #464]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d28:	4b73      	ldr	r3, [pc, #460]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003d30:	4b71      	ldr	r3, [pc, #452]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d34:	4b70      	ldr	r3, [pc, #448]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	438a      	bics	r2, r1
 8003d3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7fd fe6e 	bl	8001a1c <HAL_GetTick>
 8003d40:	0003      	movs	r3, r0
 8003d42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d46:	f7fd fe69 	bl	8001a1c <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e111      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d58:	4b67      	ldr	r3, [pc, #412]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d1f1      	bne.n	8003d46 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2220      	movs	r2, #32
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d05c      	beq.n	8003e26 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d6c:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	220c      	movs	r2, #12
 8003d72:	4013      	ands	r3, r2
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	d00e      	beq.n	8003d96 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d78:	4b5f      	ldr	r3, [pc, #380]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	220c      	movs	r2, #12
 8003d7e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d114      	bne.n	8003dae <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003d84:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	23c0      	movs	r3, #192	; 0xc0
 8003d8a:	025b      	lsls	r3, r3, #9
 8003d8c:	401a      	ands	r2, r3
 8003d8e:	23c0      	movs	r3, #192	; 0xc0
 8003d90:	025b      	lsls	r3, r3, #9
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d10b      	bne.n	8003dae <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003d96:	4b58      	ldr	r3, [pc, #352]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9a:	2380      	movs	r3, #128	; 0x80
 8003d9c:	029b      	lsls	r3, r3, #10
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d040      	beq.n	8003e24 <HAL_RCC_OscConfig+0x5a8>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d03c      	beq.n	8003e24 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0e6      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d01b      	beq.n	8003dee <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003db6:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dba:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0249      	lsls	r1, r1, #9
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd fe2a 	bl	8001a1c <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dce:	f7fd fe25 	bl	8001a1c <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0cd      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003de0:	4b45      	ldr	r3, [pc, #276]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	029b      	lsls	r3, r3, #10
 8003de8:	4013      	ands	r3, r2
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x552>
 8003dec:	e01b      	b.n	8003e26 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003dee:	4b42      	ldr	r3, [pc, #264]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df2:	4b41      	ldr	r3, [pc, #260]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003df4:	4943      	ldr	r1, [pc, #268]	; (8003f04 <HAL_RCC_OscConfig+0x688>)
 8003df6:	400a      	ands	r2, r1
 8003df8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfa:	f7fd fe0f 	bl	8001a1c <HAL_GetTick>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e04:	f7fd fe0a 	bl	8001a1c <HAL_GetTick>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e0b2      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003e16:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	029b      	lsls	r3, r3, #10
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x588>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003e24:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d100      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5b4>
 8003e2e:	e0a4      	b.n	8003f7a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e30:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	220c      	movs	r2, #12
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d100      	bne.n	8003e3e <HAL_RCC_OscConfig+0x5c2>
 8003e3c:	e078      	b.n	8003f30 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d14c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b2c      	ldr	r3, [pc, #176]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b2b      	ldr	r3, [pc, #172]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003e4c:	492e      	ldr	r1, [pc, #184]	; (8003f08 <HAL_RCC_OscConfig+0x68c>)
 8003e4e:	400a      	ands	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fd fde3 	bl	8001a1c <HAL_GetTick>
 8003e56:	0003      	movs	r3, r0
 8003e58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fd fdde 	bl	8001a1c <HAL_GetTick>
 8003e60:	0002      	movs	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e086      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6e:	4b22      	ldr	r3, [pc, #136]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	049b      	lsls	r3, r3, #18
 8003e76:	4013      	ands	r3, r2
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	220f      	movs	r2, #15
 8003e80:	4393      	bics	r3, r2
 8003e82:	0019      	movs	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e88:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a1e      	ldr	r2, [pc, #120]	; (8003f0c <HAL_RCC_OscConfig+0x690>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	0019      	movs	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0449      	lsls	r1, r1, #17
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fd fdb1 	bl	8001a1c <HAL_GetTick>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd fdac 	bl	8001a1c <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e054      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	049b      	lsls	r3, r3, #18
 8003eda:	4013      	ands	r3, r2
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x644>
 8003ede:	e04c      	b.n	8003f7a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_RCC_OscConfig+0x67c>)
 8003ee6:	4908      	ldr	r1, [pc, #32]	; (8003f08 <HAL_RCC_OscConfig+0x68c>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fd fd96 	bl	8001a1c <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef4:	e015      	b.n	8003f22 <HAL_RCC_OscConfig+0x6a6>
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	00001388 	.word	0x00001388
 8003f00:	efffffff 	.word	0xefffffff
 8003f04:	fffeffff 	.word	0xfffeffff
 8003f08:	feffffff 	.word	0xfeffffff
 8003f0c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fd fd84 	bl	8001a1c <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e02c      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f22:	4b18      	ldr	r3, [pc, #96]	; (8003f84 <HAL_RCC_OscConfig+0x708>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	049b      	lsls	r3, r3, #18
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0x694>
 8003f2e:	e024      	b.n	8003f7a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e01f      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <HAL_RCC_OscConfig+0x708>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f42:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <HAL_RCC_OscConfig+0x708>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f46:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	23c0      	movs	r3, #192	; 0xc0
 8003f4c:	025b      	lsls	r3, r3, #9
 8003f4e:	401a      	ands	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d10e      	bne.n	8003f76 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	220f      	movs	r2, #15
 8003f5c:	401a      	ands	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d107      	bne.n	8003f76 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	23f0      	movs	r3, #240	; 0xf0
 8003f6a:	039b      	lsls	r3, r3, #14
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b008      	add	sp, #32
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000

08003f88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0bf      	b.n	800411c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b61      	ldr	r3, [pc, #388]	; (8004124 <HAL_RCC_ClockConfig+0x19c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d911      	bls.n	8003fce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <HAL_RCC_ClockConfig+0x19c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	4393      	bics	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	4b5b      	ldr	r3, [pc, #364]	; (8004124 <HAL_RCC_ClockConfig+0x19c>)
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbc:	4b59      	ldr	r3, [pc, #356]	; (8004124 <HAL_RCC_ClockConfig+0x19c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e0a6      	b.n	800411c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d015      	beq.n	8004004 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2204      	movs	r2, #4
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d006      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fe2:	4b51      	ldr	r3, [pc, #324]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	4b50      	ldr	r3, [pc, #320]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8003fe8:	21e0      	movs	r1, #224	; 0xe0
 8003fea:	00c9      	lsls	r1, r1, #3
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ff0:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	22f0      	movs	r2, #240	; 0xf0
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2201      	movs	r2, #1
 800400a:	4013      	ands	r3, r2
 800400c:	d04c      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004016:	4b44      	ldr	r3, [pc, #272]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	029b      	lsls	r3, r3, #10
 800401e:	4013      	ands	r3, r2
 8004020:	d120      	bne.n	8004064 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e07a      	b.n	800411c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4b3e      	ldr	r3, [pc, #248]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	049b      	lsls	r3, r3, #18
 8004036:	4013      	ands	r3, r2
 8004038:	d114      	bne.n	8004064 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e06e      	b.n	800411c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b03      	cmp	r3, #3
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004046:	4b38      	ldr	r3, [pc, #224]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	029b      	lsls	r3, r3, #10
 800404e:	4013      	ands	r3, r2
 8004050:	d108      	bne.n	8004064 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e062      	b.n	800411c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b34      	ldr	r3, [pc, #208]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2202      	movs	r2, #2
 800405c:	4013      	ands	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e05b      	b.n	800411c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004064:	4b30      	ldr	r3, [pc, #192]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2203      	movs	r2, #3
 800406a:	4393      	bics	r3, r2
 800406c:	0019      	movs	r1, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	4b2d      	ldr	r3, [pc, #180]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004078:	f7fd fcd0 	bl	8001a1c <HAL_GetTick>
 800407c:	0003      	movs	r3, r0
 800407e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004080:	e009      	b.n	8004096 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004082:	f7fd fccb 	bl	8001a1c <HAL_GetTick>
 8004086:	0002      	movs	r2, r0
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	4a27      	ldr	r2, [pc, #156]	; (800412c <HAL_RCC_ClockConfig+0x1a4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e042      	b.n	800411c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	220c      	movs	r2, #12
 800409c:	401a      	ands	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1ec      	bne.n	8004082 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <HAL_RCC_ClockConfig+0x19c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2201      	movs	r2, #1
 80040ae:	4013      	ands	r3, r2
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d211      	bcs.n	80040da <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_RCC_ClockConfig+0x19c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2201      	movs	r2, #1
 80040bc:	4393      	bics	r3, r2
 80040be:	0019      	movs	r1, r3
 80040c0:	4b18      	ldr	r3, [pc, #96]	; (8004124 <HAL_RCC_ClockConfig+0x19c>)
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <HAL_RCC_ClockConfig+0x19c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2201      	movs	r2, #1
 80040ce:	4013      	ands	r3, r2
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d001      	beq.n	80040da <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e020      	b.n	800411c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2204      	movs	r2, #4
 80040e0:	4013      	ands	r3, r2
 80040e2:	d009      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a11      	ldr	r2, [pc, #68]	; (8004130 <HAL_RCC_ClockConfig+0x1a8>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	0019      	movs	r1, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040f8:	f000 f820 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040fc:	0001      	movs	r1, r0
 80040fe:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <HAL_RCC_ClockConfig+0x1a0>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	091b      	lsrs	r3, r3, #4
 8004104:	220f      	movs	r2, #15
 8004106:	4013      	ands	r3, r2
 8004108:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <HAL_RCC_ClockConfig+0x1ac>)
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	000a      	movs	r2, r1
 800410e:	40da      	lsrs	r2, r3
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1b0>)
 8004112:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004114:	2000      	movs	r0, #0
 8004116:	f7fd fc3b 	bl	8001990 <HAL_InitTick>
  
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40022000 	.word	0x40022000
 8004128:	40021000 	.word	0x40021000
 800412c:	00001388 	.word	0x00001388
 8004130:	fffff8ff 	.word	0xfffff8ff
 8004134:	080044e8 	.word	0x080044e8
 8004138:	20000008 	.word	0x20000008

0800413c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004156:	4b2d      	ldr	r3, [pc, #180]	; (800420c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	220c      	movs	r2, #12
 8004160:	4013      	ands	r3, r2
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d046      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0xb8>
 8004166:	d848      	bhi.n	80041fa <HAL_RCC_GetSysClockFreq+0xbe>
 8004168:	2b04      	cmp	r3, #4
 800416a:	d002      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x36>
 800416c:	2b08      	cmp	r3, #8
 800416e:	d003      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x3c>
 8004170:	e043      	b.n	80041fa <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004174:	613b      	str	r3, [r7, #16]
      break;
 8004176:	e043      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	0c9b      	lsrs	r3, r3, #18
 800417c:	220f      	movs	r2, #15
 800417e:	4013      	ands	r3, r2
 8004180:	4a24      	ldr	r2, [pc, #144]	; (8004214 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004182:	5cd3      	ldrb	r3, [r2, r3]
 8004184:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004186:	4b21      	ldr	r3, [pc, #132]	; (800420c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	220f      	movs	r2, #15
 800418c:	4013      	ands	r3, r2
 800418e:	4a22      	ldr	r2, [pc, #136]	; (8004218 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004190:	5cd3      	ldrb	r3, [r2, r3]
 8004192:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	23c0      	movs	r3, #192	; 0xc0
 8004198:	025b      	lsls	r3, r3, #9
 800419a:	401a      	ands	r2, r3
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d109      	bne.n	80041b8 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	481a      	ldr	r0, [pc, #104]	; (8004210 <HAL_RCC_GetSysClockFreq+0xd4>)
 80041a8:	f7fb ffae 	bl	8000108 <__udivsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	001a      	movs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4353      	muls	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	e01a      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	23c0      	movs	r3, #192	; 0xc0
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	401a      	ands	r2, r3
 80041c0:	23c0      	movs	r3, #192	; 0xc0
 80041c2:	025b      	lsls	r3, r3, #9
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d109      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	4814      	ldr	r0, [pc, #80]	; (800421c <HAL_RCC_GetSysClockFreq+0xe0>)
 80041cc:	f7fb ff9c 	bl	8000108 <__udivsi3>
 80041d0:	0003      	movs	r3, r0
 80041d2:	001a      	movs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4353      	muls	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e008      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	480c      	ldr	r0, [pc, #48]	; (8004210 <HAL_RCC_GetSysClockFreq+0xd4>)
 80041e0:	f7fb ff92 	bl	8000108 <__udivsi3>
 80041e4:	0003      	movs	r3, r0
 80041e6:	001a      	movs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4353      	muls	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	613b      	str	r3, [r7, #16]
      break;
 80041f2:	e005      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80041f4:	4b09      	ldr	r3, [pc, #36]	; (800421c <HAL_RCC_GetSysClockFreq+0xe0>)
 80041f6:	613b      	str	r3, [r7, #16]
      break;
 80041f8:	e002      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetSysClockFreq+0xd4>)
 80041fc:	613b      	str	r3, [r7, #16]
      break;
 80041fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004200:	693b      	ldr	r3, [r7, #16]
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b006      	add	sp, #24
 8004208:	bd80      	pop	{r7, pc}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	40021000 	.word	0x40021000
 8004210:	007a1200 	.word	0x007a1200
 8004214:	080044f8 	.word	0x080044f8
 8004218:	08004508 	.word	0x08004508
 800421c:	02dc6c00 	.word	0x02dc6c00

08004220 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	025b      	lsls	r3, r3, #9
 8004238:	4013      	ands	r3, r2
 800423a:	d100      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800423c:	e08e      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800423e:	2017      	movs	r0, #23
 8004240:	183b      	adds	r3, r7, r0
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b6e      	ldr	r3, [pc, #440]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	2380      	movs	r3, #128	; 0x80
 800424c:	055b      	lsls	r3, r3, #21
 800424e:	4013      	ands	r3, r2
 8004250:	d110      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4b6b      	ldr	r3, [pc, #428]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	4b6a      	ldr	r3, [pc, #424]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004258:	2180      	movs	r1, #128	; 0x80
 800425a:	0549      	lsls	r1, r1, #21
 800425c:	430a      	orrs	r2, r1
 800425e:	61da      	str	r2, [r3, #28]
 8004260:	4b67      	ldr	r3, [pc, #412]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004262:	69da      	ldr	r2, [r3, #28]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	055b      	lsls	r3, r3, #21
 8004268:	4013      	ands	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426e:	183b      	adds	r3, r7, r0
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004274:	4b63      	ldr	r3, [pc, #396]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4013      	ands	r3, r2
 800427e:	d11a      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004280:	4b60      	ldr	r3, [pc, #384]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4b5f      	ldr	r3, [pc, #380]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004286:	2180      	movs	r1, #128	; 0x80
 8004288:	0049      	lsls	r1, r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428e:	f7fd fbc5 	bl	8001a1c <HAL_GetTick>
 8004292:	0003      	movs	r3, r0
 8004294:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004296:	e008      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004298:	f7fd fbc0 	bl	8001a1c <HAL_GetTick>
 800429c:	0002      	movs	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0a6      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4013      	ands	r3, r2
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042b6:	4b52      	ldr	r3, [pc, #328]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042b8:	6a1a      	ldr	r2, [r3, #32]
 80042ba:	23c0      	movs	r3, #192	; 0xc0
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4013      	ands	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d034      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	23c0      	movs	r3, #192	; 0xc0
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4013      	ands	r3, r2
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d02c      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d8:	4b49      	ldr	r3, [pc, #292]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4a4a      	ldr	r2, [pc, #296]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80042de:	4013      	ands	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	4b46      	ldr	r3, [pc, #280]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042e8:	2180      	movs	r1, #128	; 0x80
 80042ea:	0249      	lsls	r1, r1, #9
 80042ec:	430a      	orrs	r2, r1
 80042ee:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042f0:	4b43      	ldr	r3, [pc, #268]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	4b42      	ldr	r3, [pc, #264]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042f6:	4945      	ldr	r1, [pc, #276]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80042f8:	400a      	ands	r2, r1
 80042fa:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042fc:	4b40      	ldr	r3, [pc, #256]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	4013      	ands	r3, r2
 8004308:	d013      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430a:	f7fd fb87 	bl	8001a1c <HAL_GetTick>
 800430e:	0003      	movs	r3, r0
 8004310:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004312:	e009      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004314:	f7fd fb82 	bl	8001a1c <HAL_GetTick>
 8004318:	0002      	movs	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	4a3c      	ldr	r2, [pc, #240]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e067      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004328:	4b35      	ldr	r3, [pc, #212]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	2202      	movs	r2, #2
 800432e:	4013      	ands	r3, r2
 8004330:	d0f0      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004332:	4b33      	ldr	r3, [pc, #204]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	4a34      	ldr	r2, [pc, #208]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004338:	4013      	ands	r3, r2
 800433a:	0019      	movs	r1, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	4b2f      	ldr	r3, [pc, #188]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004342:	430a      	orrs	r2, r1
 8004344:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004346:	2317      	movs	r3, #23
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004352:	69da      	ldr	r2, [r3, #28]
 8004354:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004356:	492f      	ldr	r1, [pc, #188]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004358:	400a      	ands	r2, r1
 800435a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2201      	movs	r2, #1
 8004362:	4013      	ands	r3, r2
 8004364:	d009      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	2203      	movs	r2, #3
 800436c:	4393      	bics	r3, r2
 800436e:	0019      	movs	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	4b22      	ldr	r3, [pc, #136]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004376:	430a      	orrs	r2, r1
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2202      	movs	r2, #2
 8004380:	4013      	ands	r3, r2
 8004382:	d009      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	4a23      	ldr	r2, [pc, #140]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800438a:	4013      	ands	r3, r2
 800438c:	0019      	movs	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004394:	430a      	orrs	r2, r1
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2220      	movs	r2, #32
 800439e:	4013      	ands	r3, r2
 80043a0:	d009      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a2:	4b17      	ldr	r3, [pc, #92]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	2210      	movs	r2, #16
 80043a8:	4393      	bics	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	4b13      	ldr	r3, [pc, #76]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	4013      	ands	r3, r2
 80043c0:	d009      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	2280      	movs	r2, #128	; 0x80
 80043c8:	4393      	bics	r3, r2
 80043ca:	0019      	movs	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043d2:	430a      	orrs	r2, r1
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	; 0x80
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4013      	ands	r3, r2
 80043e0:	d009      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	2240      	movs	r2, #64	; 0x40
 80043e8:	4393      	bics	r3, r2
 80043ea:	0019      	movs	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	4b03      	ldr	r3, [pc, #12]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80043f2:	430a      	orrs	r2, r1
 80043f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	0018      	movs	r0, r3
 80043fa:	46bd      	mov	sp, r7
 80043fc:	b006      	add	sp, #24
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	40021000 	.word	0x40021000
 8004404:	40007000 	.word	0x40007000
 8004408:	fffffcff 	.word	0xfffffcff
 800440c:	fffeffff 	.word	0xfffeffff
 8004410:	00001388 	.word	0x00001388
 8004414:	efffffff 	.word	0xefffffff
 8004418:	fffcffff 	.word	0xfffcffff

0800441c <memset>:
 800441c:	0003      	movs	r3, r0
 800441e:	1882      	adds	r2, r0, r2
 8004420:	4293      	cmp	r3, r2
 8004422:	d100      	bne.n	8004426 <memset+0xa>
 8004424:	4770      	bx	lr
 8004426:	7019      	strb	r1, [r3, #0]
 8004428:	3301      	adds	r3, #1
 800442a:	e7f9      	b.n	8004420 <memset+0x4>

0800442c <__libc_init_array>:
 800442c:	b570      	push	{r4, r5, r6, lr}
 800442e:	2600      	movs	r6, #0
 8004430:	4c0c      	ldr	r4, [pc, #48]	; (8004464 <__libc_init_array+0x38>)
 8004432:	4d0d      	ldr	r5, [pc, #52]	; (8004468 <__libc_init_array+0x3c>)
 8004434:	1b64      	subs	r4, r4, r5
 8004436:	10a4      	asrs	r4, r4, #2
 8004438:	42a6      	cmp	r6, r4
 800443a:	d109      	bne.n	8004450 <__libc_init_array+0x24>
 800443c:	2600      	movs	r6, #0
 800443e:	f000 f823 	bl	8004488 <_init>
 8004442:	4c0a      	ldr	r4, [pc, #40]	; (800446c <__libc_init_array+0x40>)
 8004444:	4d0a      	ldr	r5, [pc, #40]	; (8004470 <__libc_init_array+0x44>)
 8004446:	1b64      	subs	r4, r4, r5
 8004448:	10a4      	asrs	r4, r4, #2
 800444a:	42a6      	cmp	r6, r4
 800444c:	d105      	bne.n	800445a <__libc_init_array+0x2e>
 800444e:	bd70      	pop	{r4, r5, r6, pc}
 8004450:	00b3      	lsls	r3, r6, #2
 8004452:	58eb      	ldr	r3, [r5, r3]
 8004454:	4798      	blx	r3
 8004456:	3601      	adds	r6, #1
 8004458:	e7ee      	b.n	8004438 <__libc_init_array+0xc>
 800445a:	00b3      	lsls	r3, r6, #2
 800445c:	58eb      	ldr	r3, [r5, r3]
 800445e:	4798      	blx	r3
 8004460:	3601      	adds	r6, #1
 8004462:	e7f2      	b.n	800444a <__libc_init_array+0x1e>
 8004464:	08004518 	.word	0x08004518
 8004468:	08004518 	.word	0x08004518
 800446c:	0800451c 	.word	0x0800451c
 8004470:	08004518 	.word	0x08004518

08004474 <memcpy>:
 8004474:	2300      	movs	r3, #0
 8004476:	b510      	push	{r4, lr}
 8004478:	429a      	cmp	r2, r3
 800447a:	d100      	bne.n	800447e <memcpy+0xa>
 800447c:	bd10      	pop	{r4, pc}
 800447e:	5ccc      	ldrb	r4, [r1, r3]
 8004480:	54c4      	strb	r4, [r0, r3]
 8004482:	3301      	adds	r3, #1
 8004484:	e7f8      	b.n	8004478 <memcpy+0x4>
	...

08004488 <_init>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448e:	bc08      	pop	{r3}
 8004490:	469e      	mov	lr, r3
 8004492:	4770      	bx	lr

08004494 <_fini>:
 8004494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449a:	bc08      	pop	{r3}
 800449c:	469e      	mov	lr, r3
 800449e:	4770      	bx	lr
